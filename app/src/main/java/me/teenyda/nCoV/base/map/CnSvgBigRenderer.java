/*
 * Copyright (C) 2017, Sora Shiro (https://github.com/Sora-Shiro)
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */

package me.teenyda.nCoV.base.map;

import android.content.Context;
import android.graphics.Canvas;
import android.graphics.ColorFilter;
import android.graphics.Paint;
import android.graphics.Region;

import com.github.megatronking.svg.support.SVGRenderer;

import java.util.ArrayList;
import java.util.HashMap;

/**
 * AUTO-GENERATED FILE.  DO NOT MODIFY.
 * <p>
 * This class was automatically generated by the
 * SVG-Generator. It should not be modified by hand.
 * <p>
 * Modified: SoraShiro
 * <p>
 * 使用技术：https://github.com/MegatronKing/SVG-Android/blob/master/README.zh-cn.md
 * 不使用 VectorDrawable，兼容 Android 4.0+
 *
 * @since 2017/8/7
 */
public class CnSvgBigRenderer extends SVGRenderer {

    private String[]                     mProvince;
    private HashMap<String, CnMapConfig> mConfig;

    private float scaleX;
    private float scaleY;
    private CnMap mCnMap;

    private Paint mTextPaint;
    private Paint mHighlightPaint;
    private Paint mHighlightStrokePaint;
    private Paint mHightlightTextPaint;

    private int mTouchIndex;

    private Region mGlobalRegion;
    private Region mRegion;
    public ArrayList<Region> mRegionList;


    public CnSvgBigRenderer(Context context, CnMap cnMap) {
        super(context);
        mAlpha = 1.0f;
        mWidth = dip2px(1369.0f);
        mHeight = dip2px(1141.0f);
        mProvince = cnMap.PROVINCE;
        mConfig = cnMap.configMap;
        mRegionList = new ArrayList<>();
        for (String aPROVINCE : cnMap.PROVINCE) {
            mRegionList.add(new Region());
        }
    }

    @Override
    public void render(Canvas canvas, int w, int h, ColorFilter filter) {
        scaleX = w / 1214.0f;
        scaleY = h / 1016.0f;
        mTouchIndex = -1;
        final float minScale = Math.min(scaleX, scaleY);

        mGlobalRegion = new Region(0, 0, w, h);

        mPath.reset();
        mRenderPath.reset();

        mFinalPathMatrix.setValues(new float[]{1.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 1.0f});
        mFinalPathMatrix.postScale(scaleX, scaleY);

        mFillPaint = initPaint(Paint.Style.FILL);
        mStrokePaint = initPaint(Paint.Style.STROKE);
        mTextPaint = initPaint(Paint.Style.FILL);
        mHighlightPaint = initPaint(Paint.Style.FILL);
        mHighlightStrokePaint = initPaint(Paint.Style.STROKE);
        mHightlightTextPaint = initPaint(Paint.Style.FILL);

        // 根据设定绘制省份
        for (int i = 0; i < 34; i++) {
            CnMapConfig cnMapConfig = mConfig.get(mProvince[i]);

            float strokeWidth = cnMapConfig.getStrokeWidth();
            if (strokeWidth < minScale * 1.0f * 1.0f) {
                strokeWidth = minScale * 1.0f * 1.0f;
            }
            mStrokePaint.setStrokeWidth(strokeWidth);

            if (cnMapConfig.getIfClick()) {
                mHighlightPaint.setColor(cnMapConfig.getClickColor());
                mHighlightPaint.setStrokeWidth(strokeWidth);
                mHighlightStrokePaint.setColor(cnMapConfig.getClickStrokeColor());
                mHighlightStrokePaint.setStrokeWidth(strokeWidth);
                mTouchIndex = i;
            } else if (cnMapConfig.getIfLongClick()) {
                mHighlightPaint.setColor(cnMapConfig.getLongClickColor());
                mHighlightPaint.setStrokeWidth(strokeWidth);
                mHighlightStrokePaint.setColor(cnMapConfig.getLongClickStrokeColor());
                mHighlightStrokePaint.setStrokeWidth(strokeWidth);
                mTouchIndex = i;
            } else {
                mFillPaint.setColor(cnMapConfig.getFillColor());
                mFillPaint.setStrokeWidth(strokeWidth);
                mStrokePaint.setColor(cnMapConfig.getStrokeColor());
                mStrokePaint.setStrokeWidth(strokeWidth);
                renderGo(canvas, filter, mStrokePaint, i);
                renderGo(canvas, filter, mFillPaint, i);
            }
        }

        // 被触摸的最后着色，防止边界被其他省份掩盖
        if (mTouchIndex != -1) {
            renderGo(canvas, filter, mHighlightPaint, mTouchIndex);
            renderGo(canvas, filter, mHighlightStrokePaint, mTouchIndex);
        }

        // 绘制文字
        for (int i = 0; i < 34; i++) {
            CnMapConfig cnMapConfig = mConfig.get(mProvince[i]);
            if (cnMapConfig.getIfTextScale()) {
                mTextPaint.setTextSize(cnMapConfig.getTextSize() * scaleX);
                mHightlightTextPaint.setTextSize(cnMapConfig.getTextSize() * scaleX);
            } else {
                mTextPaint.setTextSize(cnMapConfig.getTextSize());
                mHightlightTextPaint.setTextSize(cnMapConfig.getTextSize());
            }
            if (cnMapConfig.getIfClick()) {
                mHightlightTextPaint.setColor(cnMapConfig.getClickTextColor());
                renderTextByProvince(canvas, mHightlightTextPaint, cnMapConfig.getText(), i, w, h);
            } else if(cnMapConfig.getIfLongClick()) {
                mHightlightTextPaint.setColor(cnMapConfig.getLongClickTextColor());
                renderTextByProvince(canvas, mHightlightTextPaint, cnMapConfig.getText(), i, w, h);
            } else {
                mTextPaint.setColor(cnMapConfig.getTextColor());
                renderTextByProvince(canvas, mTextPaint, cnMapConfig.getText(), i, w, h);
            }

        }

    }

    private Paint initPaint(Paint.Style style) {
        Paint paint = new Paint();
        paint.setStyle(style);
        paint.setAntiAlias(true);
        return paint;
    }


    private void renderGo(Canvas canvas, ColorFilter filter, Paint paint, int i) {
        if (i >= 0 && i <= 8) {
            renderByProvince1(i);
        } else if (i >= 9 && i <= 19) {
            renderByProvince2(i);
        } else if (i >= 20 && i <= 29) {
            renderByProvince3(i);
        } else if (i >= 29 && i <= 33) {
            renderByProvince4(i);
        }
        mRenderPath.addPath(mPath, mFinalPathMatrix);
        paint.setStrokeJoin(Paint.Join.MITER);
        paint.setStrokeCap(Paint.Cap.BUTT);
        paint.setStrokeMiter(4.0f);
        paint.setColorFilter(filter);
        canvas.drawPath(mRenderPath, paint);

        // Region
        mRegion = mRegionList.get(i);
        mRegion.setPath(mRenderPath, mGlobalRegion);
        mRegionList.set(i, mRegion);

        mPath.reset();
        mRenderPath.reset();

        mFinalPathMatrix.setValues(
                new float[]{1.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 1.0f}
        );
        mFinalPathMatrix.postScale(scaleX, scaleY);
    }

    //省份文本绘制
    private void renderTextByProvince(Canvas canvas, Paint paint, String text, int index, int w, int h) {
        switch (index) {
            case -1:
                mPath.moveTo(0, 0f);
                mPath.lineTo(1369f, 0f);
                mPath.lineTo(1369f, 1141f);
                mPath.lineTo(0f, 1141f);
                mPath.lineTo(0f, 0f);
                mPath.close();
                mPath.moveTo(0, 0f);
            case 0:
                canvas.drawText(text, 890 * scaleX, 620 * scaleY, paint);
                break;
            case 1:
                canvas.drawText(text, 870 * scaleX, 420 * scaleY, paint);
                break;
            case 2:
                canvas.drawText(text, 680 * scaleX, 700 * scaleY, paint);
                break;
            case 3:
                canvas.drawText(text, 925 * scaleX, 770 * scaleY, paint);
                break;
            case 4:
                canvas.drawText(text, 460 * scaleX, 420 * scaleY, paint);
                break;
            case 5:
                canvas.drawText(text, 825 * scaleX, 840 * scaleY, paint);
                break;
            case 6:
                canvas.drawText(text, 720 * scaleX, 840 * scaleY, paint);
                break;
            case 7:
                canvas.drawText(text, 669 * scaleX, 770 * scaleY, paint);
                break;
            case 8:
                canvas.drawText(text, 755 * scaleX, 960 * scaleY, paint);
                break;
            case 9:
                canvas.drawText(text, 840 * scaleX, 470 * scaleY, paint);
                break;
            case 10:
                canvas.drawText(text, 1016 * scaleX, 200 * scaleY, paint);
                break;
            case 11:
                canvas.drawText(text, 803 * scaleX, 580 * scaleY, paint);
                break;
            case 12:
                canvas.drawText(text, 900 * scaleX, 900 * scaleY, paint);
                break;
            case 13:
                canvas.drawText(text, 781 * scaleX, 655 * scaleY, paint);
                break;
            case 14:
                canvas.drawText(text, 772 * scaleX, 740 * scaleY, paint);
                break;
            case 15:
                canvas.drawText(text, 930 * scaleX, 575 * scaleY, paint);
                break;
            case 16:
                canvas.drawText(text, 865 * scaleX, 725 * scaleY, paint);
                break;
            case 17:
                canvas.drawText(text, 1016 * scaleX, 301 * scaleY, paint);
                break;
            case 18:
                canvas.drawText(text, 960 * scaleX, 365 * scaleY, paint);
                break;
            case 19:
                canvas.drawText(text, 827 * scaleX, 920 * scaleY, paint);
                break;
            case 20:
                canvas.drawText(text, 618 * scaleX, 420 * scaleY, paint);
                break;
            case 21:
                canvas.drawText(text, 663 * scaleX, 500 * scaleY, paint);
                break;
            case 22:
                canvas.drawText(text, 409 * scaleX, 530 * scaleY, paint);
                break;
            case 23:
                canvas.drawText(text, 700 * scaleX, 585 * scaleY, paint);
                break;
            case 24:
                canvas.drawText(text, 1027 * scaleX, 620 * scaleY, paint);
                break;
            case 25:
                canvas.drawText(text, 890 * scaleX, 510 * scaleY, paint);
                break;
            case 26:
                canvas.drawText(text, 775 * scaleX, 475 * scaleY, paint);
                break;
            case 27:
                canvas.drawText(text, 556 * scaleX, 650 * scaleY, paint);
                break;
            case 28:
                canvas.drawText(text, 1054 * scaleX, 840 * scaleY, paint);
                break;
            case 29:
                canvas.drawText(text, 921 * scaleX, 445 * scaleY, paint);
                break;
            case 30:
                canvas.drawText(text, 149 * scaleX, 400 * scaleY, paint);
                break;
            case 31:
                canvas.drawText(text, 200 * scaleX, 595 * scaleY, paint);
                break;
            case 32:
                canvas.drawText(text, 530 * scaleX, 820 * scaleY, paint);
                break;
            case 33:
                canvas.drawText(text, 967 * scaleX, 680 * scaleY, paint);
                break;
        }
    }


    //各个省份的路径绘制
    private void renderByProvince1(int index) {
        switch (index) {
            case 0:
                mPath.moveTo(896.9f, 566.6f);
                mPath.rCubicTo(-0.9f, 1.6f, -4.6f, 2.6f, -7.2f, 5.9f);
                mPath.rLineTo(-6.0f, -5.6f);
                mPath.rCubicTo(-2.7f, -2.5f, -6.6f, -1.9f, -7.7f, 0.4f);
                mPath.rCubicTo(-0.4f, 1.0f, -0.2f, 4.6f, -0.4f, 6.1f);
                mPath.rCubicTo(-0.7f, 5.6f, -2.1f, 5.1f, -2.9f, 7.7f);
                mPath.rCubicTo(-0.6f, 1.8f, 0.3f, 3.5f, 0.0f, 4.8f);
                mPath.rCubicTo(-0.3f, 1.8f, -3.4f, 4.1f, -5.1f, 4.6f);
                mPath.rCubicTo(-1.0f, 0.3f, -2.3f, 0.2f, -3.4f, 0.2f);
                mPath.rCubicTo(0.4f, 1.5f, 0.8f, 3.3f, 2.1f, 4.3f);
                mPath.rCubicTo(1.2f, 0.9f, 3.3f, 1.1f, 4.3f, 2.2f);
                mPath.rCubicTo(1.1f, 1.2f, 1.2f, 4.4f, 1.2f, 6.0f);
                mPath.rLineTo(5.3f, 0.8f);
                mPath.rCubicTo(3.0f, 0.4f, 5.3f, -0.2f, 8.1f, 1.6f);
                mPath.rCubicTo(1.8f, 1.1f, 1.9f, 2.4f, 2.3f, 4.3f);
                mPath.rCubicTo(0.6f, 3.1f, 1.7f, 9.1f, 0.0f, 11.9f);
                mPath.rCubicTo(-1.0f, 1.6f, -2.7f, 1.4f, -4.2f, 2.2f);
                mPath.rCubicTo(-2.4f, 1.3f, -4.8f, 5.2f, -4.5f, 8.0f);
                mPath.rCubicTo(0.8f, 7.3f, 16.4f, 5.0f, 11.8f, 13.4f);
                mPath.rCubicTo(-0.5f, 1.0f, -1.4f, 2.0f, -2.1f, 2.9f);
                mPath.rLineTo(3.6f, 6.2f);
                mPath.rLineTo(1.3f, 4.3f);
                mPath.rLineTo(2.6f, 4.3f);
                mPath.rLineTo(2.5f, 7.2f);
                mPath.rLineTo(5.5f, -1.4f);
                mPath.rLineTo(3.8f, -4.4f);
                mPath.rLineTo(5.6f, -0.5f);
                mPath.rCubicTo(0.0f, 8.2f, -0.6f, 4.4f, -2.4f, 10.1f);
                mPath.rCubicTo(2.7f, 0.8f, 5.5f, 0.6f, 7.2f, -2.1f);
                mPath.rCubicTo(1.2f, -1.9f, 0.2f, -4.9f, 4.8f, -4.6f);
                mPath.rCubicTo(3.1f, 0.2f, 3.0f, 2.4f, 5.3f, 3.7f);
                mPath.rLineTo(8.1f, 1.9f);
                mPath.rLineTo(7.2f, 2.3f);
                mPath.rCubicTo(2.5f, 0.2f, 5.1f, -2.5f, 6.7f, -4.1f);
                mPath.rCubicTo(2.4f, -2.4f, 6.5f, -9.4f, 6.5f, -13.0f);
                mPath.rCubicTo(0.0f, -1.6f, -1.1f, -4.8f, -1.7f, -6.2f);
                mPath.rCubicTo(5.0f, -1.7f, 5.4f, -1.5f, 10.1f, -4.3f);
                mPath.rLineTo(-3.4f, -5.8f);
                mPath.rLineTo(4.8f, -1.0f);
                mPath.rCubicTo(1.1f, -7.5f, 1.4f, -3.5f, 1.4f, -13.0f);
                mPath.rLineTo(-8.6f, -2.1f);
                mPath.rLineTo(-8.6f, 2.6f);
                mPath.rCubicTo(0.3f, -3.6f, 1.4f, -7.2f, -1.3f, -10.3f);
                mPath.rCubicTo(-2.5f, -2.9f, -8.4f, -3.5f, -8.8f, -7.9f);
                mPath.rCubicTo(-0.4f, -4.5f, 2.0f, -4.9f, 3.0f, -7.7f);
                mPath.rLineTo(1.3f, -8.6f);
                mPath.rCubicTo(1.5f, 0.4f, 3.8f, 1.5f, 5.3f, 1.1f);
                mPath.rCubicTo(3.1f, -0.8f, 4.0f, -3.1f, 3.0f, -5.9f);
                mPath.rCubicTo(-0.3f, -0.9f, -0.6f, -1.7f, -1.4f, -2.3f);
                mPath.rCubicTo(-5.8f, -4.4f, -9.4f, 4.3f, -13.7f, 4.0f);
                mPath.rCubicTo(-3.3f, -0.2f, -4.2f, -3.8f, -5.7f, -6.0f);
                mPath.rCubicTo(-1.7f, -2.3f, -3.6f, -2.0f, -4.9f, -4.9f);
                mPath.rCubicTo(-1.2f, -2.5f, 0.2f, -3.9f, 0.8f, -6.2f);
                mPath.rCubicTo(0.4f, -1.6f, 0.3f, -4.5f, 0.3f, -6.2f);
                mPath.rCubicTo(-1.4f, 0.0f, -3.1f, 0.1f, -4.3f, -0.5f);
                mPath.rCubicTo(-1.8f, -0.9f, -4.2f, -4.1f, -6.7f, -5.2f);
                mPath.rCubicTo(-1.7f, -0.7f, -3.0f, -0.1f, -4.8f, 0.0f);
                mPath.rCubicTo(-1.8f, -0.1f, -3.6f, -0.6f, -5.3f, -1.4f);
                mPath.rCubicTo(-4.0f, -1.9f, -3.3f, -3.2f, -5.1f, -5.1f);
                mPath.rCubicTo(-0.9f, -1.0f, -4.2f, -3.0f, -5.5f, -3.7f);
                mPath.rCubicTo(-2.5f, -1.4f, -6.5f, -4.2f, -9.0f, -2.0f);
                mPath.rCubicTo(-1.1f, 0.9f, -1.2f, 1.7f, -1.0f, 3.0f);
                mPath.rCubicTo(0.7f, 5.9f, 6.3f, 4.2f, 8.8f, 9.6f);
                mPath.cubicTo(896.6f, 563.6f, 897.5f, 565.3f, 896.9f, 566.6f);
                mPath.lineTo(896.9f, 566.6f);
                mPath.close();
                mPath.moveTo(896.9f, 566.6f);
                break;
            case 1:
                mPath.moveTo(859.19995f, 412.7f);
                mPath.rCubicTo(-1.0f, 1.9f, -0.7f, 7.6f, -0.7f, 10.0f);
                mPath.rLineTo(7.7f, 1.3f);
                mPath.rLineTo(4.8f, 0.0f);
                mPath.rCubicTo(1.8f, 0.3f, 3.2f, 1.9f, 4.8f, 1.4f);
                mPath.rCubicTo(1.4f, -0.4f, 2.7f, -2.6f, 3.9f, -3.6f);
                mPath.rCubicTo(2.2f, -1.8f, 4.1f, -0.5f, 4.5f, -2.6f);
                mPath.rCubicTo(0.3f, -1.5f, -1.6f, -5.3f, -2.1f, -7.1f);
                mPath.rLineTo(7.7f, -4.6f);
                mPath.rCubicTo(0.8f, -0.6f, 2.0f, -1.6f, 2.2f, -2.6f);
                mPath.rCubicTo(0.5f, -1.7f, -1.8f, -2.3f, -2.2f, -4.3f);
                mPath.rCubicTo(-0.6f, -2.7f, 1.5f, -5.2f, 2.9f, -7.2f);
                mPath.rCubicTo(-3.1f, 0.0f, -7.3f, 0.5f, -10.1f, -1.0f);
                mPath.rCubicTo(-5.0f, -2.7f, -3.6f, -5.3f, -6.7f, -5.0f);
                mPath.rCubicTo(-4.2f, 0.4f, -2.9f, 3.7f, -5.4f, 6.3f);
                mPath.rCubicTo(-1.5f, 1.5f, -5.2f, 3.6f, -6.1f, 5.2f);
                mPath.rCubicTo(-0.8f, 1.3f, -0.5f, 5.8f, -0.5f, 7.5f);
                mPath.rCubicTo(0.0f, 1.2f, 0.1f, 2.6f, -0.8f, 3.5f);
                mPath.cubicTo(861.9f, 411.0f, 860.1f, 410.90002f, 859.19995f, 412.7f);
                mPath.lineTo(859.19995f, 412.7f);
                mPath.close();
                mPath.moveTo(859.19995f, 412.7f);
                break;
            case 2:
                mPath.moveTo(746.0f, 630.1f);
                mPath.rLineTo(-13.4f, -7.2f);
                mPath.rCubicTo(-0.9f, 0.9f, -2.3f, 2.2f, -2.8f, 3.4f);
                mPath.rCubicTo(-1.2f, 2.9f, 1.1f, 7.3f, 3.3f, 9.1f);
                mPath.rCubicTo(-3.2f, 3.2f, -4.9f, 4.9f, -6.8f, 9.1f);
                mPath.rLineTo(-1.9f, 4.8f);
                mPath.rCubicTo(-1.1f, 3.7f, -0.6f, 6.0f, -4.3f, 8.2f);
                mPath.rCubicTo(-2.2f, 1.3f, -2.4f, 1.1f, -4.8f, 0.9f);
                mPath.rCubicTo(-5.3f, -0.5f, -3.7f, 4.3f, -4.7f, 7.2f);
                mPath.rCubicTo(-0.5f, 1.5f, -3.3f, 6.0f, -4.3f, 7.7f);
                mPath.rCubicTo(-1.1f, 2.0f, -1.9f, 3.8f, -4.1f, 4.9f);
                mPath.rCubicTo(-4.9f, 2.5f, -9.7f, -4.1f, -11.5f, -4.8f);
                mPath.rCubicTo(-1.6f, -0.6f, -2.8f, 0.8f, -4.1f, 0.6f);
                mPath.rCubicTo(-1.3f, -0.2f, -2.7f, -2.0f, -5.0f, -3.0f);
                mPath.rCubicTo(-4.0f, -1.7f, -4.4f, -0.4f, -6.9f, 2.2f);
                mPath.rCubicTo(-1.0f, 1.0f, -2.0f, 1.7f, -3.1f, 2.5f);
                mPath.rCubicTo(1.1f, 2.2f, 2.4f, 2.7f, 2.3f, 4.3f);
                mPath.rCubicTo(-0.3f, 3.1f, -4.7f, 6.8f, -6.2f, 9.6f);
                mPath.rCubicTo(-0.7f, 1.2f, -1.7f, 3.0f, -1.2f, 4.3f);
                mPath.rCubicTo(0.6f, 1.7f, 4.6f, 5.0f, 6.1f, 6.4f);
                mPath.rCubicTo(3.4f, 3.1f, 3.0f, 4.7f, 4.2f, 5.6f);
                mPath.rCubicTo(1.1f, 0.8f, 2.6f, 0.1f, 4.5f, 1.0f);
                mPath.rCubicTo(4.1f, 2.0f, 5.6f, 5.6f, 7.2f, 9.5f);
                mPath.rLineTo(4.3f, -3.4f);
                mPath.rLineTo(2.9f, 5.3f);
                mPath.rCubicTo(4.4f, -4.5f, 3.2f, -10.8f, 9.6f, -10.6f);
                mPath.rLineTo(4.3f, 1.0f);
                mPath.rCubicTo(0.4f, -1.9f, 1.1f, -7.7f, 2.5f, -8.6f);
                mPath.rCubicTo(2.8f, -1.8f, 5.6f, 1.8f, 8.0f, 2.2f);
                mPath.rCubicTo(1.4f, 0.3f, 5.0f, -0.6f, 6.7f, -0.8f);
                mPath.rLineTo(4.3f, 0.0f);
                mPath.rLineTo(1.4f, 11.0f);
                mPath.rCubicTo(1.2f, -0.1f, 3.6f, -0.6f, 4.5f, 0.3f);
                mPath.rCubicTo(0.8f, 0.8f, 0.9f, 2.9f, 1.1f, 4.0f);
                mPath.rCubicTo(0.5f, 2.7f, 2.1f, 5.0f, 4.9f, 5.6f);
                mPath.rCubicTo(4.3f, 0.8f, 7.7f, -2.5f, 8.4f, -6.6f);
                mPath.rLineTo(-0.8f, -9.6f);
                mPath.rCubicTo(-0.1f, -7.5f, 0.5f, -4.7f, -2.4f, -11.5f);
                mPath.rLineTo(-4.8f, 1.0f);
                mPath.rCubicTo(0.0f, -1.4f, 0.2f, -5.4f, -0.5f, -6.4f);
                mPath.rCubicTo(-0.7f, -1.0f, -2.7f, -1.6f, -3.8f, -2.5f);
                mPath.rCubicTo(-1.7f, -1.4f, -2.2f, -3.0f, -2.9f, -5.0f);
                mPath.rLineTo(-3.8f, 3.4f);
                mPath.rCubicTo(0.7f, -3.1f, 3.1f, -10.0f, 2.1f, -13.0f);
                mPath.rCubicTo(-0.4f, -1.4f, -2.2f, -3.5f, -3.1f, -4.8f);
                mPath.rLineTo(4.8f, -2.2f);
                mPath.rLineTo(4.3f, 0.0f);
                mPath.rLineTo(3.4f, -2.3f);
                mPath.rLineTo(3.3f, 0.7f);
                mPath.rLineTo(4.8f, -0.9f);
                mPath.rLineTo(7.7f, -5.5f);
                mPath.rLineTo(3.2f, -2.0f);
                mPath.rLineTo(3.6f, 1.2f);
                mPath.rCubicTo(2.3f, -6.8f, 3.8f, -10.6f, -2.1f, -16.2f);
                mPath.rCubicTo(-1.5f, -1.4f, -2.6f, -1.7f, -4.2f, -2.8f);
                mPath.rCubicTo(-1.2f, -0.8f, -3.1f, -2.6f, -4.3f, -3.1f);
                mPath.rCubicTo(-1.9f, -0.6f, -4.0f, 0.7f, -5.7f, 0.0f);
                mPath.cubicTo(749.0f, 633.7f, 748.0f, 631.5f, 746.0f, 630.1f);
                mPath.lineTo(746.0f, 630.1f);
                mPath.close();
                mPath.moveTo(746.0f, 630.1f);
                break;
            case 3:
                mPath.moveTo(943.1f, 713.6f);
                mPath.rCubicTo(-1.4f, 1.0f, -2.1f, 2.8f, -2.6f, 4.4f);
                mPath.rLineTo(-4.8f, -3.8f);
                mPath.rCubicTo(-4.0f, 2.7f, -4.2f, 3.4f, -7.3f, 6.7f);
                mPath.rCubicTo(-0.8f, 0.9f, -2.7f, 2.3f, -2.8f, 3.4f);
                mPath.rCubicTo(-0.2f, 1.6f, 1.7f, 3.0f, 2.3f, 4.8f);
                mPath.rCubicTo(0.5f, 1.7f, -0.4f, 5.2f, -1.2f, 6.7f);
                mPath.rCubicTo(-2.4f, 4.7f, -6.4f, 3.6f, -9.0f, 9.1f);
                mPath.rCubicTo(-0.7f, 1.5f, -1.1f, 2.7f, -0.6f, 4.3f);
                mPath.rCubicTo(0.6f, 1.9f, 2.0f, 3.2f, 1.3f, 5.3f);
                mPath.rCubicTo(-0.5f, 1.3f, -2.0f, 2.8f, -2.5f, 4.8f);
                mPath.rCubicTo(-0.5f, 2.0f, 0.2f, 4.3f, -0.6f, 6.2f);
                mPath.rCubicTo(-0.6f, 1.4f, -3.3f, 4.5f, -4.9f, 8.6f);
                mPath.rCubicTo(-0.9f, 2.3f, -2.6f, 13.9f, -2.8f, 16.8f);
                mPath.rCubicTo(-0.1f, 1.0f, -0.1f, 2.2f, 0.7f, 2.9f);
                mPath.rCubicTo(0.9f, 0.7f, 4.5f, 0.8f, 6.4f, 1.4f);
                mPath.rCubicTo(4.6f, 1.6f, 6.3f, 4.4f, 8.2f, 4.9f);
                mPath.rCubicTo(1.7f, 0.4f, 4.0f, -1.0f, 5.4f, 0.2f);
                mPath.rCubicTo(0.7f, 0.6f, 1.5f, 3.0f, 2.1f, 4.0f);
                mPath.rLineTo(2.9f, 4.8f);
                mPath.rCubicTo(1.6f, 3.8f, 1.7f, 7.6f, 4.6f, 11.0f);
                mPath.rCubicTo(0.8f, 0.9f, 2.1f, 2.3f, 3.3f, 2.7f);
                mPath.rCubicTo(1.4f, 0.5f, 5.3f, -0.6f, 6.0f, -2.0f);
                mPath.rCubicTo(0.4f, -0.9f, 0.3f, -4.8f, 0.3f, -6.0f);
                mPath.rLineTo(2.4f, 3.4f);
                mPath.rLineTo(2.1f, -4.3f);
                mPath.rCubicTo(2.5f, -3.4f, 5.9f, -5.8f, 5.5f, -10.5f);
                mPath.rCubicTo(-0.1f, -0.8f, -0.1f, -1.4f, -0.7f, -2.0f);
                mPath.rCubicTo(-0.6f, -0.6f, -1.8f, -1.1f, -2.6f, -1.4f);
                mPath.rLineTo(5.8f, -2.1f);
                mPath.rLineTo(6.7f, -3.5f);
                mPath.rLineTo(3.5f, -1.2f);
                mPath.rLineTo(1.5f, -4.3f);
                mPath.rLineTo(3.1f, -5.8f);
                mPath.rLineTo(-0.4f, -5.8f);
                mPath.rCubicTo(3.8f, 1.6f, 3.6f, 1.7f, 7.2f, -0.5f);
                mPath.rLineTo(-2.9f, -4.3f);
                mPath.rCubicTo(5.1f, -1.9f, 3.9f, -3.8f, 10.1f, -3.8f);
                mPath.rCubicTo(-0.1f, -1.6f, -0.5f, -3.2f, -0.3f, -4.8f);
                mPath.rCubicTo(0.2f, -1.8f, 1.3f, -4.1f, 1.1f, -5.8f);
                mPath.rCubicTo(-0.2f, -2.4f, -2.1f, -3.8f, -1.7f, -6.2f);
                mPath.rCubicTo(0.8f, -4.8f, 1.2f, -2.5f, -1.5f, -7.2f);
                mPath.rLineTo(2.9f, -1.0f);
                mPath.rLineTo(-3.8f, -1.0f);
                mPath.rLineTo(0.0f, -5.3f);
                mPath.rCubicTo(3.6f, 1.3f, 5.0f, 1.0f, 8.6f, 0.0f);
                mPath.rLineTo(-1.4f, 4.8f);
                mPath.rCubicTo(1.6f, -1.2f, 4.2f, -3.6f, 4.3f, -5.8f);
                mPath.rCubicTo(0.0f, -1.3f, -0.9f, -2.5f, -0.6f, -3.8f);
                mPath.rCubicTo(0.2f, -1.0f, 1.4f, -2.3f, 2.0f, -3.4f);
                mPath.rCubicTo(0.7f, -1.4f, 1.2f, -3.3f, 1.6f, -4.8f);
                mPath.rLineTo(-4.3f, -1.0f);
                mPath.rLineTo(4.8f, 0.0f);
                mPath.rLineTo(-3.4f, -4.8f);
                mPath.rCubicTo(-1.9f, 0.5f, -3.6f, 1.3f, -5.3f, 2.4f);
                mPath.rCubicTo(-0.9f, 0.6f, -2.3f, 1.9f, -3.4f, 1.9f);
                mPath.rCubicTo(-2.6f, 0.0f, -5.3f, -5.6f, -6.2f, -7.7f);
                mPath.rCubicTo(-2.4f, 1.8f, -4.9f, 5.7f, -7.7f, 6.4f);
                mPath.rCubicTo(-1.7f, 0.5f, -7.1f, -0.8f, -8.2f, -2.2f);
                mPath.rCubicTo(-0.9f, -1.2f, -0.7f, -2.8f, -1.7f, -4.7f);
                mPath.rCubicTo(-0.9f, -1.6f, -2.6f, -2.9f, -2.8f, -4.8f);
                mPath.rCubicTo(-0.1f, -1.0f, 0.5f, -3.7f, 0.7f, -4.8f);
                mPath.rLineTo(-2.9f, -1.8f);
                mPath.rCubicTo(-1.2f, -0.6f, -2.1f, -0.6f, -3.4f, -0.6f);
                mPath.rCubicTo(-5.2f, 0.0f, -2.2f, 3.4f, -7.7f, 8.1f);
                mPath.cubicTo(945.80005f, 713.2f, 944.6f, 712.5f, 943.1f, 713.6f);
                mPath.lineTo(943.1f, 713.6f);
                mPath.close();
                mPath.moveTo(943.1f, 713.6f);
                break;
            case 4:
                mPath.moveTo(437.7f, 399.7f);
                mPath.rLineTo(-6.0f, -1.5f);
                mPath.rLineTo(-1.3f, 9.6f);
                mPath.rLineTo(-3.1f, 6.2f);
                mPath.rLineTo(1.4f, 10.1f);
                mPath.rLineTo(-0.9f, 7.7f);
                mPath.rCubicTo(6.4f, 1.8f, 6.9f, -1.6f, 12.5f, -1.7f);
                mPath.rLineTo(7.2f, 1.4f);
                mPath.rCubicTo(2.2f, 0.1f, 3.9f, -1.2f, 5.8f, -1.1f);
                mPath.rCubicTo(1.2f, 0.1f, 4.9f, 1.8f, 6.2f, 2.3f);
                mPath.rLineTo(9.1f, 3.1f);
                mPath.rCubicTo(2.9f, 1.3f, 6.2f, 3.0f, 8.6f, 5.2f);
                mPath.rLineTo(8.2f, 8.9f);
                mPath.rCubicTo(2.8f, 2.5f, 5.2f, 2.5f, 7.7f, 4.2f);
                mPath.rCubicTo(3.9f, 2.7f, 3.2f, 4.3f, 9.1f, 5.9f);
                mPath.lineTo(505.0f, 443.8f);
                mPath.rCubicTo(0.5f, -1.3f, 2.8f, -4.0f, 4.2f, -4.2f);
                mPath.rCubicTo(0.9f, -0.1f, 3.3f, 1.1f, 4.1f, 1.6f);
                mPath.rCubicTo(4.1f, 2.5f, 6.9f, 7.1f, 12.0f, 6.9f);
                mPath.rCubicTo(1.3f, 0.0f, 2.0f, -0.1f, 2.9f, -1.1f);
                mPath.rCubicTo(0.6f, -0.7f, 1.0f, -1.5f, 1.4f, -2.3f);
                mPath.rCubicTo(1.2f, 0.6f, 3.6f, 2.1f, 4.8f, 2.1f);
                mPath.rCubicTo(1.4f, 0.0f, 2.3f, -1.0f, 3.4f, -1.3f);
                mPath.rCubicTo(1.6f, -0.4f, 3.5f, 0.9f, 4.8f, 1.9f);
                mPath.rCubicTo(4.8f, 3.6f, 5.6f, 6.4f, 8.8f, 10.3f);
                mPath.rCubicTo(2.9f, 3.5f, 6.7f, 6.4f, 10.9f, 8.2f);
                mPath.rLineTo(1.4f, -5.3f);
                mPath.rLineTo(3.5f, 3.6f);
                mPath.rLineTo(4.0f, 2.9f);
                mPath.rLineTo(2.8f, 3.7f);
                mPath.rLineTo(7.5f, 4.6f);
                mPath.rLineTo(3.8f, 3.2f);
                mPath.rLineTo(4.8f, 3.4f);
                mPath.rLineTo(6.2f, 5.1f);
                mPath.rLineTo(2.4f, -4.3f);
                mPath.rCubicTo(1.0f, 6.2f, 2.6f, 5.3f, 5.2f, 7.8f);
                mPath.rCubicTo(3.4f, 3.2f, 2.0f, 3.3f, 7.3f, 5.7f);
                mPath.rLineTo(-1.9f, 4.3f);
                mPath.rLineTo(3.0f, 5.3f);
                mPath.rLineTo(2.2f, 8.6f);
                mPath.rLineTo(2.8f, 5.3f);
                mPath.rLineTo(-0.3f, 4.8f);
                mPath.rLineTo(0.9f, 6.2f);
                mPath.rLineTo(-4.8f, 1.0f);
                mPath.rCubicTo(0.2f, 0.9f, 0.7f, 2.9f, 0.5f, 3.7f);
                mPath.rCubicTo(-0.6f, 2.3f, -7.0f, 3.5f, -8.2f, 5.6f);
                mPath.rCubicTo(-0.8f, 1.5f, 0.6f, 3.0f, -0.5f, 6.1f);
                mPath.rCubicTo(-1.4f, 3.8f, -3.9f, 4.2f, -5.6f, 5.9f);
                mPath.rCubicTo(-2.8f, 2.8f, -1.3f, 5.2f, -6.4f, 6.1f);
                mPath.rCubicTo(2.6f, 1.5f, 7.2f, 4.7f, 8.2f, 7.6f);
                mPath.rCubicTo(0.4f, 1.3f, -0.7f, 2.1f, -1.5f, 3.0f);
                mPath.rCubicTo(-1.8f, 1.8f, -3.5f, 4.1f, -6.2f, 4.3f);
                mPath.rCubicTo(-3.4f, 0.2f, -5.7f, -1.6f, -8.6f, -2.9f);
                mPath.rCubicTo(-4.4f, -1.9f, -6.4f, -2.3f, -11.0f, -2.3f);
                mPath.rCubicTo(0.0f, 1.6f, 0.3f, 4.8f, 0.8f, 6.2f);
                mPath.rCubicTo(1.2f, 3.4f, 5.9f, 8.9f, 9.3f, 10.3f);
                mPath.rCubicTo(1.0f, 0.3f, 1.4f, 0.1f, 2.4f, 0.0f);
                mPath.rCubicTo(2.8f, 0.1f, 3.3f, 1.4f, 5.3f, 3.1f);
                mPath.rCubicTo(3.6f, 3.2f, 4.5f, 2.7f, 4.8f, 8.2f);
                mPath.rLineTo(4.1f, -0.3f);
                mPath.rLineTo(1.8f, -2.6f);
                mPath.rLineTo(2.6f, -5.8f);
                mPath.rLineTo(-4.2f, -9.6f);
                mPath.rLineTo(5.3f, -3.5f);
                mPath.rCubicTo(3.7f, -2.0f, 5.1f, -0.7f, 8.6f, -5.6f);
                mPath.rCubicTo(1.2f, 1.3f, 5.9f, 7.4f, 6.6f, 8.6f);
                mPath.rCubicTo(1.0f, 2.0f, 0.6f, 4.1f, 1.9f, 5.3f);
                mPath.rCubicTo(1.6f, 1.6f, 7.4f, 3.1f, 9.8f, 3.3f);
                mPath.rCubicTo(1.6f, 0.1f, 3.3f, -0.2f, 4.8f, 0.5f);
                mPath.rCubicTo(4.4f, 1.9f, 6.2f, 7.4f, 7.7f, 11.6f);
                mPath.rCubicTo(0.5f, 1.2f, 1.6f, 3.5f, 1.2f, 4.8f);
                mPath.rCubicTo(-0.3f, 1.1f, -1.8f, 2.2f, -2.6f, 2.9f);
                mPath.rCubicTo(3.5f, 4.3f, 14.2f, 9.1f, 19.7f, 6.5f);
                mPath.rCubicTo(2.8f, -1.3f, 3.7f, -4.8f, 5.8f, -6.0f);
                mPath.rCubicTo(1.7f, -1.0f, 5.5f, 0.3f, 7.6f, -3.4f);
                mPath.rCubicTo(0.7f, -1.3f, 1.1f, -4.3f, 0.6f, -5.7f);
                mPath.rCubicTo(-0.4f, -1.1f, -1.3f, -2.2f, -1.4f, -3.4f);
                mPath.rCubicTo(-0.1f, -1.2f, 1.6f, -4.4f, 2.2f, -5.8f);
                mPath.rCubicTo(4.4f, 1.6f, 7.9f, 0.0f, 12.5f, 0.0f);
                mPath.rLineTo(-2.2f, -5.3f);
                mPath.rLineTo(0.2f, -4.8f);
                mPath.rLineTo(0.5f, -5.7f);
                mPath.rLineTo(4.3f, -3.9f);
                mPath.rCubicTo(-2.2f, -2.5f, -4.9f, -4.4f, -8.2f, -5.3f);
                mPath.rCubicTo(1.8f, -2.5f, 3.8f, -4.4f, 4.2f, -7.7f);
                mPath.rLineTo(-0.4f, -5.3f);
                mPath.rLineTo(3.8f, -0.4f);
                mPath.rCubicTo(5.2f, -0.4f, 5.9f, 2.5f, 8.6f, 3.1f);
                mPath.rCubicTo(2.9f, 0.7f, 10.4f, -0.2f, 11.7f, -3.4f);
                mPath.rCubicTo(0.5f, -1.3f, -0.3f, -4.3f, -0.7f, -5.6f);
                mPath.rCubicTo(6.6f, 1.3f, 3.2f, 0.7f, 9.1f, 0.0f);
                mPath.rLineTo(3.8f, 0.0f);
                mPath.rCubicTo(1.7f, -0.1f, 4.0f, -0.2f, 4.8f, -2.0f);
                mPath.rCubicTo(2.2f, -5.1f, -1.4f, -8.8f, -0.9f, -13.9f);
                mPath.rCubicTo(0.3f, -2.6f, 1.6f, -3.5f, 2.2f, -5.3f);
                mPath.rCubicTo(0.5f, -1.4f, -0.3f, -5.3f, -1.1f, -6.6f);
                mPath.rCubicTo(-0.8f, -1.3f, -2.3f, -1.1f, -3.5f, -1.6f);
                mPath.rLineTo(-3.8f, -2.2f);
                mPath.rLineTo(-3.3f, -1.0f);
                mPath.rCubicTo(-2.6f, -1.1f, -2.6f, -3.6f, -4.5f, -4.6f);
                mPath.rCubicTo(-0.9f, -0.5f, -6.3f, -1.2f, -8.8f, -3.4f);
                mPath.rCubicTo(-2.4f, -2.0f, -3.5f, -5.7f, -8.8f, -6.0f);
                mPath.rCubicTo(-3.8f, -0.2f, -6.0f, 1.3f, -6.6f, 5.3f);
                mPath.rCubicTo(-0.2f, 1.5f, 0.1f, 3.4f, -0.4f, 4.8f);
                mPath.rCubicTo(-0.5f, 1.3f, -1.4f, 1.8f, -1.9f, 3.0f);
                mPath.rCubicTo(-0.4f, 1.1f, -0.3f, 4.5f, 0.0f, 5.7f);
                mPath.rCubicTo(0.8f, 3.7f, 3.5f, 3.6f, 5.4f, 5.1f);
                mPath.rCubicTo(3.2f, 2.7f, 4.1f, 7.0f, 1.0f, 10.1f);
                mPath.rCubicTo(-0.6f, 0.6f, -2.1f, 1.8f, -2.8f, 2.2f);
                mPath.rCubicTo(-1.6f, 1.0f, -3.0f, 0.8f, -4.8f, 0.8f);
                mPath.rLineTo(0.4f, 5.3f);
                mPath.rLineTo(-1.3f, 5.8f);
                mPath.rCubicTo(-4.3f, -4.3f, -3.8f, -3.8f, -9.6f, -3.8f);
                mPath.rLineTo(2.4f, -1.9f);
                mPath.rCubicTo(-4.1f, -1.9f, -11.9f, -5.3f, -13.7f, -9.6f);
                mPath.rCubicTo(-0.9f, -2.1f, 0.5f, -3.4f, 0.7f, -6.2f);
                mPath.rCubicTo(0.1f, -1.5f, -0.4f, -5.3f, -1.0f, -6.7f);
                mPath.rCubicTo(-0.6f, -1.4f, -1.8f, -2.9f, -2.0f, -4.3f);
                mPath.rCubicTo(-0.4f, -1.8f, 0.6f, -3.6f, 0.0f, -5.8f);
                mPath.rCubicTo(-1.0f, -4.4f, -3.2f, -5.4f, -6.0f, -8.2f);
                mPath.rCubicTo(-1.0f, -1.1f, -1.8f, -2.4f, -3.1f, -3.1f);
                mPath.rLineTo(-4.2f, -1.2f);
                mPath.rLineTo(2.4f, -3.4f);
                mPath.rCubicTo(-4.8f, 0.0f, -11.4f, -2.0f, -15.4f, -4.7f);
                mPath.rCubicTo(-2.3f, -1.5f, -3.7f, -4.3f, -5.4f, -5.4f);
                mPath.rCubicTo(-1.3f, -0.8f, -3.2f, -0.9f, -4.7f, -0.9f);
                mPath.rCubicTo(-0.9f, -6.6f, -1.7f, -6.6f, 2.9f, -8.6f);
                mPath.rLineTo(-0.6f, -4.3f);
                mPath.rLineTo(6.2f, -7.2f);
                mPath.rLineTo(3.7f, -7.2f);
                mPath.rLineTo(2.7f, -4.8f);
                mPath.rLineTo(-3.4f, -9.1f);
                mPath.rCubicTo(-2.4f, 0.1f, -9.5f, 1.6f, -11.5f, 2.8f);
                mPath.rCubicTo(-2.1f, 1.3f, -4.8f, 4.9f, -7.2f, 5.4f);
                mPath.rCubicTo(-1.7f, 0.4f, -4.9f, -1.4f, -6.7f, -1.8f);
                mPath.rCubicTo(-1.4f, -0.3f, -7.8f, -0.3f, -9.1f, 0.0f);
                mPath.rCubicTo(-1.1f, 0.2f, -2.3f, 0.8f, -3.4f, 1.3f);
                mPath.rCubicTo(0.4f, 1.1f, 1.4f, 3.8f, 1.3f, 4.8f);
                mPath.rCubicTo(-0.1f, 1.2f, -1.0f, 2.0f, -1.8f, 2.9f);
                mPath.rCubicTo(-0.9f, 0.9f, -2.1f, 2.2f, -3.3f, 2.6f);
                mPath.rCubicTo(-2.7f, 0.9f, -7.0f, -1.7f, -9.1f, -3.2f);
                mPath.rCubicTo(-2.9f, -2.0f, -7.4f, -4.2f, -8.8f, -7.5f);
                mPath.rCubicTo(-0.9f, -2.2f, 0.5f, -4.2f, -0.3f, -5.5f);
                mPath.rCubicTo(-0.5f, -0.8f, -2.0f, -1.3f, -2.8f, -1.7f);
                mPath.rCubicTo(-1.3f, -0.7f, -4.1f, -2.4f, -5.2f, -3.3f);
                mPath.rCubicTo(-2.4f, -1.9f, -2.1f, -3.2f, -3.3f, -4.6f);
                mPath.rCubicTo(-1.1f, -1.3f, -2.3f, -1.1f, -4.0f, -2.3f);
                mPath.rCubicTo(-1.4f, -1.0f, -2.9f, -2.9f, -4.3f, -3.6f);
                mPath.rCubicTo(-1.4f, -0.7f, -4.6f, -0.5f, -6.2f, -0.5f);
                mPath.rCubicTo(1.2f, -1.6f, 2.7f, -3.8f, 4.3f, -5.0f);
                mPath.rCubicTo(2.0f, -1.5f, 3.6f, -1.5f, 5.4f, -3.7f);
                mPath.rLineTo(3.7f, -5.7f);
                mPath.rCubicTo(0.5f, -0.8f, 1.3f, -1.9f, 1.5f, -2.9f);
                mPath.rCubicTo(0.3f, -1.4f, -0.7f, -5.3f, -1.8f, -6.3f);
                mPath.rCubicTo(-0.8f, -0.7f, -3.8f, -1.6f, -5.0f, -2.0f);
                mPath.rCubicTo(-0.9f, -0.3f, -1.9f, -0.6f, -2.9f, -0.7f);
                mPath.rCubicTo(-2.5f, -0.1f, -12.3f, 2.3f, -14.4f, 3.6f);
                mPath.rCubicTo(-2.0f, 1.3f, -3.4f, 4.0f, -5.0f, 4.9f);
                mPath.rCubicTo(-1.0f, 0.6f, -2.5f, 0.5f, -3.7f, 0.5f);
                mPath.rLineTo(-3.8f, 0.0f);
                mPath.rCubicTo(0.7f, -1.5f, 2.7f, -6.7f, 2.4f, -8.2f);
                mPath.rCubicTo(-0.3f, -1.3f, -1.8f, -2.8f, -2.7f, -3.8f);
                mPath.rLineTo(-5.6f, -6.7f);
                mPath.rCubicTo(-0.9f, -1.0f, -2.4f, -2.5f, -2.5f, -3.8f);
                mPath.rCubicTo(-0.3f, -2.2f, 2.8f, -4.9f, 2.4f, -8.2f);
                mPath.rLineTo(-5.7f, -17.3f);
                mPath.rLineTo(-3.5f, -9.9f);
                mPath.rCubicTo(-0.9f, -1.4f, -2.6f, -1.1f, -4.0f, -1.1f);
                mPath.rCubicTo(-4.8f, 0.0f, -11.3f, -0.9f, -15.2f, 2.4f);
                mPath.rCubicTo(-1.8f, 1.6f, -1.9f, 5.9f, -2.1f, 8.2f);
                mPath.rCubicTo(-0.4f, 4.9f, -0.6f, 7.8f, -5.2f, 10.8f);
                mPath.rCubicTo(-2.8f, 1.7f, -7.0f, -0.1f, -10.1f, 0.0f);
                mPath.rCubicTo(-4.7f, 0.3f, -11.9f, 3.4f, -15.4f, 6.5f);
                mPath.lineTo(451.0f, 388.59998f);
                mPath.rCubicTo(-5.1f, 5.3f, -3.4f, 8.1f, -9.6f, 10.3f);
                mPath.cubicTo(440.40002f, 399.3f, 438.7f, 399.7f, 437.7f, 399.7f);
                mPath.lineTo(437.7f, 399.7f);
                mPath.close();
                mPath.moveTo(437.7f, 399.7f);
                break;
            case 5:
                mPath.moveTo(842.6f, 789.2f);
                mPath.rCubicTo(-1.6f, 1.0f, -3.5f, 1.2f, -5.3f, 1.2f);
                mPath.rCubicTo(2.5f, 5.2f, 3.4f, 4.1f, 4.3f, 10.6f);
                mPath.rCubicTo(-1.7f, 0.0f, -5.2f, 0.3f, -6.4f, -0.8f);
                mPath.rCubicTo(-1.2f, -1.1f, -1.2f, -3.0f, -2.8f, -3.7f);
                mPath.rCubicTo(-1.1f, -0.5f, -8.3f, -0.3f, -10.0f, -0.3f);
                mPath.rCubicTo(0.0f, 1.8f, 0.2f, 4.7f, -0.4f, 6.2f);
                mPath.rCubicTo(-0.6f, 1.6f, -2.0f, 3.1f, -2.2f, 4.8f);
                mPath.rLineTo(0.5f, 6.7f);
                mPath.rCubicTo(-0.3f, 1.9f, -1.9f, 3.9f, -2.2f, 5.8f);
                mPath.rCubicTo(-0.3f, 1.9f, 0.8f, 3.3f, 0.0f, 5.3f);
                mPath.rCubicTo(-1.2f, 2.7f, -4.2f, 4.4f, -5.3f, 5.9f);
                mPath.rCubicTo(-1.0f, 1.3f, -0.8f, 2.8f, -1.5f, 4.2f);
                mPath.rCubicTo(-0.9f, 2.0f, -2.6f, 2.9f, -3.5f, 4.8f);
                mPath.rCubicTo(-1.8f, 3.7f, 0.0f, 6.9f, 0.4f, 10.6f);
                mPath.rCubicTo(0.3f, 2.5f, -1.3f, 4.1f, -3.0f, 5.7f);
                mPath.rCubicTo(-2.8f, 2.8f, -10.3f, 6.8f, -11.4f, 9.6f);
                mPath.rCubicTo(-0.6f, 1.5f, 0.5f, 3.7f, 0.9f, 5.3f);
                mPath.rLineTo(-6.7f, 3.0f);
                mPath.rLineTo(-3.1f, 2.0f);
                mPath.rLineTo(-0.3f, 5.1f);
                mPath.rCubicTo(-1.4f, 0.0f, -4.6f, -0.1f, -5.8f, 0.3f);
                mPath.rCubicTo(-2.2f, 0.8f, -5.4f, 5.5f, -7.2f, 7.4f);
                mPath.rLineTo(4.3f, 6.2f);
                mPath.rLineTo(-3.4f, 0.5f);
                mPath.rLineTo(-1.5f, 5.8f);
                mPath.rCubicTo(-0.2f, 2.0f, 0.9f, 4.3f, 1.5f, 6.2f);
                mPath.rLineTo(1.3f, 4.8f);
                mPath.rCubicTo(0.8f, 1.7f, 4.4f, 6.4f, 5.9f, 7.4f);
                mPath.rCubicTo(1.2f, 0.8f, 4.8f, 1.4f, 6.2f, 1.1f);
                mPath.rCubicTo(3.7f, -0.7f, 5.0f, -5.1f, 3.8f, -6.8f);
                mPath.rCubicTo(-0.7f, -1.0f, -3.6f, -2.2f, -4.8f, -2.7f);
                mPath.rLineTo(1.0f, -4.8f);
                mPath.rCubicTo(-5.1f, -2.1f, -4.1f, -1.8f, -3.8f, -6.7f);
                mPath.rCubicTo(3.5f, 3.3f, 3.6f, 2.9f, 8.2f, 2.9f);
                mPath.rLineTo(-2.9f, -4.8f);
                mPath.rLineTo(0.5f, -5.3f);
                mPath.rLineTo(0.5f, 4.3f);
                mPath.rLineTo(12.0f, -5.7f);
                mPath.rLineTo(9.6f, -2.4f);
                mPath.rLineTo(9.1f, -3.4f);
                mPath.rLineTo(-2.4f, -3.8f);
                mPath.rLineTo(3.8f, 0.0f);
                mPath.rLineTo(0.0f, 3.8f);
                mPath.rCubicTo(1.7f, -1.5f, 4.5f, -5.1f, 6.7f, -5.2f);
                mPath.rCubicTo(1.1f, -0.1f, 3.3f, 0.9f, 4.3f, 1.4f);
                mPath.rLineTo(2.4f, -4.8f);
                mPath.rLineTo(5.8f, 2.9f);
                mPath.rLineTo(2.4f, -4.8f);
                mPath.rLineTo(4.8f, 1.0f);
                mPath.rLineTo(1.0f, -6.2f);
                mPath.rLineTo(4.8f, 3.4f);
                mPath.rCubicTo(2.3f, -3.5f, 2.5f, -4.6f, 6.7f, -5.8f);
                mPath.rLineTo(-0.5f, -6.2f);
                mPath.lineTo(858.8999f, 853.8f);
                mPath.rLineTo(4.8f, -1.0f);
                mPath.rCubicTo(0.6f, 1.2f, 1.5f, 3.2f, 2.6f, 4.0f);
                mPath.rCubicTo(2.5f, 2.0f, 8.9f, -1.3f, 11.8f, -1.6f);
                mPath.rCubicTo(1.8f, -0.2f, 3.5f, 0.5f, 5.3f, 0.9f);
                mPath.rLineTo(-1.4f, -4.3f);
                mPath.rLineTo(4.2f, -0.4f);
                mPath.rLineTo(4.5f, 3.3f);
                mPath.rCubicTo(0.5f, -1.1f, 1.1f, -2.4f, 1.9f, -3.3f);
                mPath.rCubicTo(2.8f, -3.5f, 9.2f, -1.2f, 11.0f, -1.7f);
                mPath.rCubicTo(1.9f, -0.5f, 1.6f, -2.4f, 4.0f, -3.1f);
                mPath.rLineTo(7.2f, -0.2f);
                mPath.rCubicTo(1.8f, -0.3f, 3.8f, -1.4f, 5.3f, -2.4f);
                mPath.rLineTo(7.4f, -4.7f);
                mPath.rCubicTo(2.0f, -2.1f, -1.0f, -4.9f, 4.1f, -5.3f);
                mPath.rCubicTo(-1.1f, -1.7f, -2.5f, -2.1f, -4.3f, -2.9f);
                mPath.rLineTo(4.6f, -1.0f);
                mPath.rLineTo(3.6f, -4.2f);
                mPath.rLineTo(5.2f, -2.5f);
                mPath.rLineTo(-5.1f, -6.7f);
                mPath.rLineTo(-3.0f, -8.6f);
                mPath.rLineTo(-2.4f, -3.8f);
                mPath.rLineTo(-1.9f, -3.6f);
                mPath.rLineTo(-5.4f, -0.5f);
                mPath.rLineTo(-6.7f, -4.2f);
                mPath.rLineTo(-9.1f, -1.8f);
                mPath.rCubicTo(-2.1f, 5.1f, -1.2f, 4.1f, 0.0f, 9.1f);
                mPath.rCubicTo(-6.2f, -0.5f, -6.5f, -2.8f, -9.1f, -3.1f);
                mPath.rLineTo(-8.6f, 2.0f);
                mPath.rCubicTo(-2.9f, 0.8f, -2.7f, 2.4f, -4.5f, 3.4f);
                mPath.rCubicTo(-1.5f, 0.9f, -2.9f, 0.0f, -5.6f, 1.1f);
                mPath.rCubicTo(-1.2f, 0.5f, -3.0f, 1.7f, -4.3f, 1.4f);
                mPath.rCubicTo(-2.9f, -0.6f, -3.9f, -3.9f, -3.2f, -6.4f);
                mPath.rCubicTo(1.3f, -4.5f, 4.7f, -7.3f, 8.5f, -9.6f);
                mPath.rCubicTo(-0.2f, -0.9f, -0.4f, -2.5f, -0.8f, -3.3f);
                mPath.rCubicTo(-0.5f, -1.0f, -1.1f, -1.5f, -2.1f, -1.9f);
                mPath.rCubicTo(-4.1f, -2.0f, -6.4f, 1.5f, -10.1f, 1.4f);
                mPath.rCubicTo(-1.8f, -0.1f, -3.4f, -1.4f, -4.8f, -2.4f);
                mPath.rCubicTo(-1.3f, 1.1f, -2.8f, 3.0f, -4.3f, 3.6f);
                mPath.rCubicTo(-1.9f, 0.7f, -5.9f, -0.4f, -7.7f, -1.2f);
                mPath.rCubicTo(-1.0f, -0.5f, -2.8f, -1.7f, -3.8f, -1.7f);
                mPath.cubicTo(845.0f, 786.8f, 843.8f, 788.39996f, 842.6f, 789.2f);
                mPath.lineTo(842.6f, 789.2f);
                mPath.close();
                mPath.moveTo(842.6f, 789.2f);
                break;
            case 6:
                mPath.moveTo(763.9f, 780.39996f);
                mPath.rCubicTo(-1.0f, 0.0f, -3.3f, -1.8f, -4.3f, -2.4f);
                mPath.rLineTo(-2.4f, 8.2f);
                mPath.rCubicTo(-1.5f, 0.0f, -4.8f, -0.2f, -6.0f, 0.5f);
                mPath.rCubicTo(-1.4f, 0.8f, -2.3f, 2.8f, -4.1f, 3.9f);
                mPath.rLineTo(-8.1f, 2.6f);
                mPath.rCubicTo(-2.8f, 0.7f, -4.9f, -1.2f, -7.5f, 1.2f);
                mPath.rCubicTo(-1.5f, 1.4f, -1.1f, 3.9f, -1.1f, 5.8f);
                mPath.rLineTo(-5.2f, 1.3f);
                mPath.rCubicTo(-1.4f, 0.2f, -8.8f, -2.4f, -10.1f, -3.3f);
                mPath.rCubicTo(-2.8f, -1.9f, -2.8f, -5.8f, -7.3f, -6.0f);
                mPath.rCubicTo(-1.0f, 0.0f, -1.6f, 0.2f, -2.4f, 0.9f);
                mPath.rCubicTo(-3.4f, 2.8f, 0.1f, 5.1f, -2.1f, 7.0f);
                mPath.rCubicTo(-0.7f, 0.6f, -3.6f, 1.7f, -4.6f, 2.1f);
                mPath.rLineTo(-7.7f, 3.3f);
                mPath.rCubicTo(-1.3f, 0.5f, -4.5f, 1.1f, -5.3f, 2.1f);
                mPath.rCubicTo(-0.7f, 0.9f, -0.5f, 4.2f, -0.5f, 5.4f);
                mPath.rCubicTo(-3.7f, 0.0f, -10.5f, -0.7f, -13.9f, -1.9f);
                mPath.rCubicTo(-2.0f, -0.7f, -2.7f, -1.7f, -4.3f, -2.5f);
                mPath.rCubicTo(-1.4f, -0.7f, -3.3f, -1.0f, -4.8f, -1.4f);
                mPath.rCubicTo(-0.6f, 1.1f, -1.5f, 3.3f, -2.2f, 4.1f);
                mPath.rCubicTo(-1.1f, 1.2f, -5.8f, 3.7f, -7.4f, 3.5f);
                mPath.rCubicTo(-1.1f, -0.1f, -3.2f, -1.4f, -4.3f, -1.9f);
                mPath.rLineTo(0.5f, 5.5f);
                mPath.rLineTo(3.8f, 1.3f);
                mPath.rLineTo(9.6f, 1.8f);
                mPath.rCubicTo(0.1f, 1.3f, 0.4f, 4.1f, 1.0f, 5.1f);
                mPath.rCubicTo(1.1f, 1.6f, 4.3f, 2.2f, 6.2f, 2.5f);
                mPath.rLineTo(3.8f, 0.5f);
                mPath.rCubicTo(2.0f, 0.1f, 7.7f, -0.2f, 9.1f, 0.3f);
                mPath.rCubicTo(1.1f, 0.4f, 2.0f, 1.3f, 2.8f, 2.1f);
                mPath.rCubicTo(0.6f, 0.6f, 1.2f, 1.3f, 1.4f, 2.1f);
                mPath.rCubicTo(0.3f, 1.6f, -2.1f, 8.2f, -4.7f, 9.2f);
                mPath.rCubicTo(-1.1f, 0.4f, -3.1f, -0.1f, -4.3f, -0.3f);
                mPath.rLineTo(-6.2f, 8.2f);
                mPath.rCubicTo(1.7f, 1.1f, 7.7f, 5.6f, 9.1f, 5.8f);
                mPath.rLineTo(5.3f, -0.4f);
                mPath.rLineTo(6.7f, 1.7f);
                mPath.rCubicTo(1.6f, 0.1f, 4.2f, -0.3f, 5.4f, 0.8f);
                mPath.rCubicTo(1.0f, 0.9f, 2.0f, 3.9f, 1.3f, 5.2f);
                mPath.rCubicTo(-0.7f, 1.2f, -2.5f, 2.2f, -2.5f, 4.1f);
                mPath.rLineTo(1.3f, 4.3f);
                mPath.rCubicTo(0.8f, 2.8f, 1.1f, 5.2f, 1.1f, 8.2f);
                mPath.rCubicTo(1.3f, -0.1f, 3.2f, -0.4f, 4.3f, 0.0f);
                mPath.rCubicTo(1.9f, 0.8f, 4.6f, 4.7f, 7.7f, 6.3f);
                mPath.rCubicTo(1.3f, 0.7f, 8.9f, 2.1f, 10.6f, 2.1f);
                mPath.rLineTo(3.4f, -0.4f);
                mPath.rCubicTo(2.3f, 0.1f, 4.6f, 1.9f, 6.7f, 2.1f);
                mPath.rCubicTo(3.1f, 0.4f, 7.5f, -1.8f, 9.0f, -4.5f);
                mPath.rCubicTo(0.6f, -1.1f, 0.9f, -3.9f, 1.1f, -5.2f);
                mPath.rCubicTo(3.5f, 4.1f, 3.0f, 4.0f, 8.2f, 6.2f);
                mPath.rLineTo(-1.0f, -4.3f);
                mPath.rLineTo(3.8f, 5.3f);
                mPath.rLineTo(3.8f, -1.0f);
                mPath.rLineTo(1.0f, 5.8f);
                mPath.rCubicTo(2.2f, -0.6f, 6.3f, -1.1f, 7.7f, -3.1f);
                mPath.rCubicTo(0.7f, -1.0f, 1.1f, -3.7f, 1.4f, -5.1f);
                mPath.rLineTo(4.3f, 3.4f);
                mPath.rLineTo(7.7f, -7.7f);
                mPath.rLineTo(5.3f, -0.5f);
                mPath.rLineTo(0.5f, -4.7f);
                mPath.rLineTo(9.6f, -5.4f);
                mPath.rCubicTo(-0.3f, -1.0f, -1.0f, -3.0f, -0.9f, -3.8f);
                mPath.rCubicTo(0.2f, -1.5f, 2.2f, -3.3f, 3.3f, -4.2f);
                mPath.rCubicTo(3.4f, -3.0f, 8.0f, -4.7f, 10.6f, -8.7f);
                mPath.rCubicTo(2.3f, -3.8f, -2.2f, -8.8f, 0.0f, -13.4f);
                mPath.rCubicTo(0.9f, -1.7f, 2.4f, -2.7f, 3.3f, -4.3f);
                mPath.rCubicTo(1.0f, -1.8f, 0.6f, -3.4f, 2.1f, -5.2f);
                mPath.rCubicTo(1.2f, -1.5f, 3.9f, -2.9f, 5.0f, -5.4f);
                mPath.rCubicTo(1.3f, -2.8f, -0.9f, -3.8f, 0.7f, -7.2f);
                mPath.rCubicTo(0.6f, -1.2f, 1.3f, -2.4f, 1.6f, -3.8f);
                mPath.rCubicTo(0.4f, -2.1f, 0.0f, -6.6f, -2.3f, -7.4f);
                mPath.rCubicTo(-3.2f, -1.1f, -4.1f, 0.6f, -6.7f, 1.8f);
                mPath.rCubicTo(-1.4f, 0.7f, -3.2f, 1.0f, -4.8f, 1.3f);
                mPath.rLineTo(-1.0f, -11.0f);
                mPath.rCubicTo(-7.5f, 2.5f, -4.1f, 1.5f, -10.1f, 5.3f);
                mPath.rLineTo(0.4f, -6.2f);
                mPath.rLineTo(5.8f, -8.2f);
                mPath.rLineTo(0.8f, -5.3f);
                mPath.rLineTo(2.7f, -4.8f);
                mPath.rCubicTo(-1.0f, 0.1f, -2.4f, 0.4f, -3.3f, 0.0f);
                mPath.rCubicTo(-2.4f, -1.3f, -3.0f, -8.0f, -3.5f, -10.5f);
                mPath.rCubicTo(-6.8f, 0.0f, -5.8f, 1.4f, -9.1f, 1.8f);
                mPath.rCubicTo(-1.6f, 0.1f, -3.2f, -0.7f, -4.8f, 0.0f);
                mPath.rCubicTo(-2.6f, 1.4f, -3.2f, 5.0f, -7.7f, 6.1f);
                mPath.rCubicTo(-2.7f, 0.6f, -3.6f, -2.5f, -5.8f, -2.2f);
                mPath.cubicTo(768.8f, 775.3f, 766.1f, 780.3f, 763.9f, 780.39996f);
                mPath.lineTo(763.9f, 780.39996f);
                mPath.close();
                mPath.moveTo(763.9f, 780.39996f);
                break;
            case 7:
                mPath.moveTo(716.4f, 700.6f);
                mPath.rLineTo(-4.8f, -0.4f);
                mPath.rLineTo(-1.4f, 9.1f);
                mPath.rCubicTo(-1.6f, -0.3f, -3.9f, -1.3f, -5.3f, -1.2f);
                mPath.rCubicTo(-4.8f, 0.4f, -4.4f, 3.1f, -6.1f, 6.5f);
                mPath.rLineTo(-2.6f, 4.3f);
                mPath.rLineTo(-3.8f, -5.3f);
                mPath.rCubicTo(-0.9f, 0.7f, -2.9f, 2.4f, -3.8f, 2.5f);
                mPath.rCubicTo(-2.0f, 0.3f, -5.0f, -3.1f, -7.2f, -3.2f);
                mPath.rCubicTo(-1.5f, -0.1f, -4.9f, 2.4f, -6.2f, 3.4f);
                mPath.rCubicTo(-0.5f, 0.4f, -1.1f, 0.8f, -1.4f, 1.4f);
                mPath.rCubicTo(-0.6f, 1.1f, -0.1f, 4.2f, 0.8f, 5.1f);
                mPath.rLineTo(2.9f, 1.6f);
                mPath.rCubicTo(1.2f, 0.9f, 1.9f, 2.3f, 3.4f, 2.7f);
                mPath.rCubicTo(1.1f, 0.3f, 4.0f, -0.4f, 5.3f, -0.6f);
                mPath.rCubicTo(0.3f, 1.8f, 1.4f, 4.7f, 1.1f, 6.2f);
                mPath.rCubicTo(-1.2f, 5.0f, -4.1f, 3.8f, -7.8f, 4.7f);
                mPath.rCubicTo(-1.5f, 0.4f, -3.3f, 1.3f, -4.8f, 1.1f);
                mPath.rCubicTo(-1.6f, -0.2f, -3.4f, -1.6f, -4.8f, -1.9f);
                mPath.rCubicTo(-3.4f, -0.7f, -4.5f, 2.6f, -6.1f, 4.7f);
                mPath.rCubicTo(-1.3f, 1.8f, -5.9f, 6.0f, -7.9f, 7.0f);
                mPath.rCubicTo(-3.2f, 1.5f, -6.9f, -2.4f, -11.0f, -3.6f);
                mPath.rCubicTo(-3.3f, 5.2f, -3.8f, 1.8f, -7.7f, 2.1f);
                mPath.rCubicTo(-3.5f, 0.3f, -7.9f, 4.0f, -8.6f, 7.5f);
                mPath.rCubicTo(-0.4f, 2.2f, 1.5f, 3.0f, 2.3f, 4.8f);
                mPath.rCubicTo(1.2f, 2.5f, -1.4f, 5.1f, 2.0f, 7.0f);
                mPath.rCubicTo(2.5f, 1.3f, 3.9f, -1.0f, 6.2f, -1.4f);
                mPath.rCubicTo(1.3f, -0.2f, 7.9f, 1.0f, 9.1f, 1.6f);
                mPath.rCubicTo(0.8f, 0.5f, 1.4f, 1.1f, 1.9f, 1.9f);
                mPath.rCubicTo(2.5f, 3.5f, 1.0f, 3.3f, -1.2f, 8.2f);
                mPath.rCubicTo(-1.6f, 3.4f, -3.3f, 8.3f, -3.8f, 12.0f);
                mPath.rCubicTo(-0.5f, 4.2f, 1.8f, 3.0f, 3.8f, 5.0f);
                mPath.rCubicTo(1.4f, 1.5f, 3.1f, 5.4f, 3.2f, 7.4f);
                mPath.rCubicTo(0.2f, 4.4f, -2.2f, 7.6f, -3.8f, 11.5f);
                mPath.rCubicTo(1.2f, 0.8f, 2.9f, 2.0f, 4.3f, 2.1f);
                mPath.rCubicTo(1.2f, 0.1f, 2.3f, -0.5f, 3.4f, -1.0f);
                mPath.rCubicTo(3.9f, -1.9f, 4.6f, -2.6f, 5.8f, -6.8f);
                mPath.rCubicTo(1.5f, 0.4f, 3.4f, 0.7f, 4.8f, 1.4f);
                mPath.rCubicTo(1.6f, 0.8f, 2.4f, 1.8f, 4.3f, 2.5f);
                mPath.rCubicTo(3.4f, 1.2f, 10.2f, 1.9f, 13.9f, 1.9f);
                mPath.lineTo(684.8001f, 806.8f);
                mPath.rCubicTo(5.8f, -0.9f, 8.7f, -2.9f, 13.9f, -4.9f);
                mPath.rCubicTo(3.0f, -1.2f, 5.1f, -1.1f, 4.9f, -4.7f);
                mPath.rCubicTo(-0.2f, -3.4f, 2.7f, -6.3f, 6.1f, -4.8f);
                mPath.rCubicTo(3.1f, 1.4f, 3.1f, 3.4f, 5.0f, 5.0f);
                mPath.rCubicTo(1.5f, 1.3f, 9.0f, 3.9f, 10.9f, 3.5f);
                mPath.rCubicTo(1.0f, -0.2f, 3.2f, -0.9f, 3.8f, -1.7f);
                mPath.rCubicTo(0.6f, -0.8f, 0.4f, -2.1f, 0.6f, -3.0f);
                mPath.rCubicTo(0.4f, -1.5f, 1.8f, -2.7f, 3.2f, -3.3f);
                mPath.rCubicTo(2.2f, -1.0f, 3.5f, 0.4f, 6.2f, -0.4f);
                mPath.rLineTo(8.1f, -2.6f);
                mPath.rCubicTo(1.6f, -1.0f, 2.5f, -3.0f, 4.0f, -3.8f);
                mPath.rCubicTo(1.8f, -1.0f, 3.9f, 0.1f, 5.2f, -1.2f);
                mPath.rCubicTo(0.5f, -0.6f, 0.9f, -1.9f, 1.2f, -2.6f);
                mPath.rCubicTo(1.7f, -5.0f, 1.3f, -5.9f, 1.3f, -11.0f);
                mPath.rLineTo(-4.3f, -1.0f);
                mPath.rCubicTo(1.9f, -4.8f, 2.0f, -4.0f, 0.0f, -8.6f);
                mPath.rCubicTo(1.3f, -0.4f, 3.5f, -0.9f, 4.3f, -2.1f);
                mPath.rCubicTo(1.8f, -2.5f, 0.7f, -7.7f, -2.4f, -8.7f);
                mPath.rCubicTo(-1.1f, -0.4f, -2.7f, 0.5f, -3.8f, 0.8f);
                mPath.rCubicTo(-2.0f, 0.7f, -4.1f, 1.0f, -6.2f, 1.4f);
                mPath.rCubicTo(0.8f, -2.8f, 3.2f, -7.4f, 5.1f, -9.6f);
                mPath.rCubicTo(1.9f, -2.3f, 3.6f, -2.5f, 4.3f, -5.3f);
                mPath.rCubicTo(1.0f, -4.1f, -0.9f, -4.8f, -1.9f, -8.1f);
                mPath.rCubicTo(-0.5f, -1.6f, -0.2f, -3.5f, -0.4f, -5.3f);
                mPath.rLineTo(-1.3f, -7.7f);
                mPath.rCubicTo(-1.6f, 1.6f, -2.2f, 3.9f, -4.3f, 5.0f);
                mPath.rCubicTo(-7.2f, 4.0f, -10.4f, -3.3f, -10.5f, -9.4f);
                mPath.rLineTo(-4.2f, 0.0f);
                mPath.rLineTo(-1.4f, -2.8f);
                mPath.rLineTo(-1.2f, -7.7f);
                mPath.rLineTo(-4.3f, 0.0f);
                mPath.rLineTo(-5.8f, 0.7f);
                mPath.lineTo(716.4f, 700.6f);
                mPath.lineTo(716.4f, 700.6f);
                mPath.close();
                mPath.moveTo(716.4f, 700.6f);
                break;
            case 8:
                mPath.moveTo(769.8f, 928.1f);
                mPath.rCubicTo(-1.3f, 0.6f, -2.1f, 2.7f, -2.6f, 4.0f);
                mPath.rLineTo(-5.3f, -1.4f);
                mPath.rCubicTo(-0.3f, 1.0f, -0.6f, 2.5f, -1.0f, 3.4f);
                mPath.rCubicTo(-1.0f, 1.9f, -7.5f, 7.2f, -9.5f, 8.9f);
                mPath.rCubicTo(-1.0f, 0.9f, -3.7f, 3.0f, -4.3f, 4.1f);
                mPath.rCubicTo(-0.6f, 1.2f, -0.1f, 3.3f, 0.0f, 4.7f);
                mPath.rLineTo(1.5f, 11.9f);
                mPath.rCubicTo(0.6f, 1.6f, 2.8f, 2.2f, 4.2f, 2.8f);
                mPath.rCubicTo(4.4f, 1.9f, 8.1f, 4.0f, 13.0f, 4.1f);
                mPath.rLineTo(6.2f, 0.0f);
                mPath.rCubicTo(1.7f, -0.2f, 3.7f, -2.1f, 5.3f, -2.9f);
                mPath.rLineTo(5.3f, -2.4f);
                mPath.rCubicTo(1.8f, -1.1f, 8.1f, -7.4f, 9.2f, -9.1f);
                mPath.rLineTo(4.4f, -12.0f);
                mPath.rCubicTo(1.4f, -2.5f, 2.1f, -3.7f, 4.1f, -5.8f);
                mPath.rCubicTo(1.0f, -1.0f, 3.1f, -2.6f, 3.5f, -3.9f);
                mPath.rCubicTo(0.7f, -2.3f, -2.0f, -8.2f, -5.0f, -8.9f);
                mPath.rLineTo(-8.6f, 0.6f);
                mPath.rCubicTo(-2.2f, -0.1f, -2.8f, -0.5f, -5.3f, 0.0f);
                mPath.rCubicTo(-3.1f, 0.5f, -6.9f, 2.2f, -10.1f, 1.9f);
                mPath.cubicTo(773.5f, 928.0f, 771.1f, 927.39996f, 769.8f, 928.1f);
                mPath.lineTo(769.8f, 928.1f);
                mPath.close();
                mPath.moveTo(769.8f, 928.1f);
                break;

        }
    }

    private void renderByProvince2(int index) {
        switch (index) {
            case 9:
                mPath.moveTo(832.2f, 367.0f);
                mPath.rCubicTo(-2.5f, 4.9f, -2.5f, 6.7f, -2.5f, 12.0f);
                mPath.rLineTo(-4.3f, 0.5f);
                mPath.rLineTo(0.0f, 8.6f);
                mPath.rCubicTo(0.1f, 4.1f, 2.1f, 5.4f, 4.4f, 8.6f);
                mPath.rLineTo(3.7f, 7.1f);
                mPath.rCubicTo(0.9f, 1.2f, 3.9f, 3.2f, 5.4f, 4.4f);
                mPath.rLineTo(-4.3f, 2.4f);
                mPath.rCubicTo(-3.6f, 2.1f, -5.0f, 2.4f, -6.2f, 6.7f);
                mPath.rLineTo(8.1f, 2.6f);
                mPath.rCubicTo(2.3f, 1.3f, 3.4f, 6.5f, 3.5f, 9.0f);
                mPath.rCubicTo(0.1f, 4.3f, 0.8f, 8.7f, -3.8f, 11.0f);
                mPath.rCubicTo(-2.1f, 1.1f, -4.0f, -0.3f, -6.1f, 1.6f);
                mPath.rCubicTo(-3.0f, 2.7f, -0.8f, 4.7f, -1.6f, 7.1f);
                mPath.rCubicTo(-1.1f, 3.0f, -4.2f, 3.4f, -3.8f, 8.6f);
                mPath.rCubicTo(0.4f, 5.2f, 4.9f, 4.9f, 6.8f, 8.6f);
                mPath.rLineTo(3.1f, 6.2f);
                mPath.rCubicTo(0.7f, 1.1f, 2.6f, 4.2f, 2.9f, 5.3f);
                mPath.rCubicTo(0.4f, 1.7f, -1.7f, 5.4f, -2.4f, 7.2f);
                mPath.rLineTo(-1.4f, 3.8f);
                mPath.rCubicTo(-0.8f, 2.9f, -1.1f, 8.1f, -3.1f, 10.5f);
                mPath.rCubicTo(-0.9f, 1.1f, -1.9f, 1.5f, -3.1f, 2.0f);
                mPath.rCubicTo(0.5f, 2.4f, 2.0f, 6.4f, 3.9f, 8.0f);
                mPath.rCubicTo(2.3f, 1.9f, 4.6f, 0.6f, 7.2f, 1.4f);
                mPath.rLineTo(3.4f, 1.4f);
                mPath.rLineTo(4.3f, 0.6f);
                mPath.rLineTo(4.3f, 1.8f);
                mPath.rCubicTo(1.3f, 0.3f, 2.5f, -0.1f, 3.8f, 0.0f);
                mPath.rCubicTo(4.1f, -0.1f, 4.6f, 1.7f, 6.7f, -3.1f);
                mPath.rLineTo(3.4f, 2.9f);
                mPath.rCubicTo(0.7f, -0.6f, 1.6f, -1.1f, 2.0f, -1.9f);
                mPath.rCubicTo(1.6f, -3.1f, -4.5f, -5.7f, -2.6f, -10.1f);
                mPath.rCubicTo(1.6f, -3.7f, 5.0f, -6.3f, 7.0f, -9.6f);
                mPath.rCubicTo(2.0f, -3.4f, 1.1f, -6.0f, 4.3f, -11.0f);
                mPath.rCubicTo(2.0f, -3.1f, 5.0f, -3.1f, 7.4f, -5.1f);
                mPath.rCubicTo(1.9f, -1.6f, 3.7f, -6.9f, 7.8f, -9.5f);
                mPath.rLineTo(7.2f, -1.9f);
                mPath.rCubicTo(1.1f, -0.4f, 2.8f, -1.0f, 3.8f, -1.7f);
                mPath.rCubicTo(2.0f, -1.4f, 5.3f, -6.2f, 5.1f, -8.7f);
                mPath.rCubicTo(-0.2f, -2.2f, -2.9f, -8.1f, -5.1f, -8.8f);
                mPath.rCubicTo(-1.7f, -0.5f, -6.0f, 1.1f, -8.0f, 1.1f);
                mPath.rCubicTo(-1.8f, 0.0f, -5.5f, -2.6f, -6.8f, -3.9f);
                mPath.rCubicTo(-3.0f, -3.3f, 0.1f, -8.5f, 0.0f, -12.4f);
                mPath.rCubicTo(-0.2f, -2.5f, -1.7f, -3.8f, -2.4f, -9.1f);
                mPath.rCubicTo(-4.3f, 0.0f, -5.8f, 1.3f, -7.7f, 5.3f);
                mPath.rLineTo(-4.8f, -2.1f);
                mPath.rLineTo(-5.3f, 0.0f);
                mPath.rLineTo(-8.2f, -1.3f);
                mPath.rCubicTo(0.0f, -2.5f, -0.3f, -7.9f, 0.7f, -10.1f);
                mPath.rCubicTo(1.1f, -2.4f, 3.2f, -2.3f, 4.1f, -3.6f);
                mPath.rCubicTo(0.6f, -0.8f, 0.5f, -2.2f, 0.5f, -3.1f);
                mPath.rCubicTo(0.0f, -1.7f, -0.3f, -5.8f, 0.5f, -7.2f);
                mPath.rCubicTo(0.9f, -1.8f, 4.5f, -3.7f, 6.1f, -5.3f);
                mPath.rCubicTo(2.7f, -2.6f, 1.2f, -6.2f, 5.4f, -6.8f);
                mPath.rCubicTo(3.7f, -0.5f, 2.2f, 2.7f, 7.2f, 5.1f);
                mPath.rCubicTo(2.5f, 1.2f, 8.1f, 0.7f, 11.0f, 0.7f);
                mPath.rCubicTo(-0.9f, 0.9f, -1.8f, 1.8f, -2.5f, 2.9f);
                mPath.rCubicTo(-0.5f, 0.8f, -0.7f, 1.5f, -0.8f, 2.4f);
                mPath.rCubicTo(-1.1f, 5.7f, 3.2f, 5.3f, 6.7f, 7.2f);
                mPath.rCubicTo(1.6f, 0.9f, 3.4f, 2.6f, 4.8f, 3.8f);
                mPath.rLineTo(-3.4f, 0.5f);
                mPath.rCubicTo(0.0f, 5.1f, 0.2f, 5.8f, 2.9f, 10.1f);
                mPath.rLineTo(4.3f, -1.0f);
                mPath.rCubicTo(0.4f, 5.0f, 1.4f, 8.8f, 6.7f, 10.1f);
                mPath.rCubicTo(0.8f, 0.2f, 2.5f, 0.7f, 3.4f, 0.6f);
                mPath.rCubicTo(2.0f, -0.2f, 2.6f, -1.9f, 5.3f, -2.7f);
                mPath.rCubicTo(2.5f, -0.8f, 4.9f, -0.4f, 7.1f, -2.4f);
                mPath.rCubicTo(4.0f, -3.7f, 1.7f, -5.6f, 2.8f, -9.5f);
                mPath.rCubicTo(1.3f, -4.6f, 5.0f, -8.7f, 9.3f, -10.6f);
                mPath.rCubicTo(-0.6f, -1.5f, -1.7f, -4.0f, -2.7f, -5.2f);
                mPath.rCubicTo(-2.3f, -2.9f, -3.8f, -1.8f, -5.5f, -7.9f);
                mPath.rCubicTo(-1.2f, 0.1f, -3.2f, 0.2f, -4.3f, 0.0f);
                mPath.rCubicTo(-1.1f, -0.4f, -1.8f, -0.9f, -2.9f, -1.3f);
                mPath.rCubicTo(-2.5f, -1.1f, -6.1f, -2.3f, -6.1f, -5.8f);
                mPath.rCubicTo(0.0f, -1.2f, 1.5f, -3.1f, 2.0f, -4.3f);
                mPath.rCubicTo(0.9f, -1.9f, 1.8f, -5.1f, 2.2f, -7.2f);
                mPath.rCubicTo(-6.0f, 0.5f, -4.9f, -0.4f, -8.2f, -0.3f);
                mPath.rCubicTo(-2.4f, 0.0f, -4.8f, 1.5f, -7.6f, -0.9f);
                mPath.rCubicTo(-1.4f, -1.2f, -3.5f, -4.2f, -3.5f, -6.0f);
                mPath.rCubicTo(0.0f, -1.9f, 1.4f, -3.8f, 1.0f, -6.2f);
                mPath.rCubicTo(-1.1f, -5.5f, -5.1f, -4.7f, -7.8f, -8.2f);
                mPath.rCubicTo(-2.0f, -2.6f, -1.5f, -5.8f, -5.6f, -6.8f);
                mPath.rCubicTo(-2.7f, -0.7f, -5.1f, 0.8f, -7.2f, 2.3f);
                mPath.rLineTo(-4.5f, 3.0f);
                mPath.rCubicTo(-1.0f, 1.0f, -2.9f, 5.4f, -3.5f, 6.9f);
                mPath.rCubicTo(-0.6f, 1.5f, -1.4f, 5.0f, -2.4f, 6.0f);
                mPath.rCubicTo(-1.0f, 0.9f, -2.4f, 0.7f, -3.6f, 1.0f);
                mPath.rCubicTo(-2.0f, 0.6f, -3.4f, 2.1f, -5.0f, 2.1f);
                mPath.rCubicTo(-1.8f, 0.0f, -3.6f, -1.8f, -6.0f, -0.7f);
                mPath.rCubicTo(-1.7f, 0.7f, -5.8f, 4.2f, -7.0f, 5.6f);
                mPath.rCubicTo(-0.9f, 1.1f, -2.2f, 3.6f, -3.4f, 4.0f);
                mPath.rCubicTo(-0.7f, 0.4f, -1.8f, 0.2f, -2.6f, 0.0f);
                mPath.rCubicTo(-4.9f, -1.6f, -4.9f, -7.7f, -5.8f, -9.3f);
                mPath.rCubicTo(-0.7f, -1.3f, -2.3f, -2.7f, -3.8f, -2.3f);
                mPath.cubicTo(834.5f, 363.2f, 833.0f, 365.5f, 832.2f, 367.0f);
                mPath.lineTo(832.2f, 367.0f);
                mPath.close();
                mPath.moveTo(832.2f, 367.0f);
                break;
            case 10:
                mPath.moveTo(937.1f, 61.300003f);
                mPath.rCubicTo(-6.6f, 2.4f, -15.5f, 3.6f, -21.1f, 7.1f);
                mPath.rCubicTo(1.1f, 2.2f, 2.3f, 2.5f, 3.1f, 4.3f);
                mPath.rCubicTo(2.7f, 6.1f, -1.9f, 10.0f, -5.0f, 14.4f);
                mPath.rCubicTo(1.9f, 0.7f, 4.0f, 1.2f, 5.7f, 2.4f);
                mPath.rCubicTo(2.0f, 1.4f, 2.4f, 3.3f, 5.3f, 2.8f);
                mPath.rCubicTo(2.2f, -0.3f, 3.1f, -3.4f, 3.9f, -5.2f);
                mPath.rCubicTo(1.4f, 0.5f, 3.1f, 1.2f, 4.3f, 1.9f);
                mPath.rCubicTo(3.6f, 2.2f, 2.2f, 2.5f, 6.7f, 1.9f);
                mPath.rCubicTo(-0.4f, 0.9f, -1.1f, 2.4f, -1.2f, 3.4f);
                mPath.rCubicTo(-0.4f, 3.0f, 3.1f, 9.2f, 4.4f, 12.0f);
                mPath.rCubicTo(0.9f, 2.0f, 1.6f, 4.6f, 3.5f, 6.0f);
                mPath.rCubicTo(1.4f, 1.0f, 3.6f, 0.8f, 5.3f, 0.8f);
                mPath.rCubicTo(5.0f, -0.1f, 5.2f, -2.3f, 8.2f, -3.2f);
                mPath.rCubicTo(1.8f, -0.6f, 2.7f, 0.3f, 4.8f, 0.0f);
                mPath.rCubicTo(2.1f, -0.2f, 6.8f, -2.1f, 8.6f, -3.3f);
                mPath.rCubicTo(3.1f, -2.0f, 5.0f, -6.5f, 7.7f, -6.9f);
                mPath.rCubicTo(1.1f, -0.2f, 3.4f, 0.7f, 4.3f, 1.3f);
                mPath.rCubicTo(1.0f, 0.6f, 8.7f, 7.2f, 9.5f, 8.2f);
                mPath.rCubicTo(3.2f, 3.6f, 0.6f, 6.0f, 0.0f, 8.2f);
                mPath.rCubicTo(-0.5f, 2.0f, 0.7f, 3.1f, 0.0f, 5.3f);
                mPath.rLineTo(-3.5f, 8.2f);
                mPath.rCubicTo(-0.8f, 1.5f, -2.1f, 3.1f, -2.2f, 4.8f);
                mPath.rCubicTo(-0.4f, 4.2f, 3.2f, 15.1f, 3.4f, 18.2f);
                mPath.rCubicTo(0.3f, 3.8f, -0.6f, 6.2f, -4.8f, 5.8f);
                mPath.rLineTo(-1.4f, 12.0f);
                mPath.rLineTo(0.0f, 15.4f);
                mPath.rCubicTo(-3.7f, -3.9f, -3.7f, -3.8f, -5.3f, -8.6f);
                mPath.rCubicTo(-4.5f, 2.4f, -5.8f, 6.3f, -8.3f, 10.6f);
                mPath.rCubicTo(-2.4f, 4.1f, -3.6f, 3.6f, -5.2f, 5.8f);
                mPath.rCubicTo(-1.3f, 1.8f, -0.9f, 3.0f, -3.4f, 5.7f);
                mPath.rCubicTo(-3.3f, 3.6f, -6.9f, 4.2f, -7.4f, 9.6f);
                mPath.rCubicTo(-0.5f, 5.5f, 2.3f, 5.6f, 5.5f, 8.7f);
                mPath.rCubicTo(2.3f, 2.2f, 2.8f, 3.0f, 4.3f, 5.7f);
                mPath.rCubicTo(4.1f, -0.8f, 4.5f, -0.9f, 6.2f, -4.8f);
                mPath.rLineTo(3.8f, 1.0f);
                mPath.rCubicTo(-0.8f, 3.2f, -1.5f, 4.4f, -3.8f, 6.7f);
                mPath.rCubicTo(-0.9f, 0.9f, -3.2f, 2.7f, -3.4f, 3.9f);
                mPath.rCubicTo(-0.2f, 1.4f, 2.6f, 4.9f, 3.4f, 6.2f);
                mPath.rLineTo(12.5f, -3.8f);
                mPath.rLineTo(3.0f, 5.3f);
                mPath.rCubicTo(1.1f, 2.6f, 1.9f, 7.0f, 3.9f, 8.9f);
                mPath.rCubicTo(0.8f, 0.8f, 2.3f, 1.6f, 3.2f, 2.3f);
                mPath.rCubicTo(2.3f, 1.5f, 4.3f, 3.5f, 7.2f, 2.1f);
                mPath.rCubicTo(1.6f, -0.8f, 2.5f, -2.3f, 3.4f, -3.7f);
                mPath.rCubicTo(0.9f, 0.9f, 2.3f, 2.3f, 3.4f, 2.9f);
                mPath.rCubicTo(3.7f, 1.8f, 5.2f, -2.6f, 11.0f, -3.8f);
                mPath.rCubicTo(0.3f, 1.2f, 0.8f, 3.1f, 1.6f, 4.1f);
                mPath.rCubicTo(1.5f, 1.9f, 6.8f, 2.5f, 9.0f, 1.7f);
                mPath.rCubicTo(2.2f, -0.8f, 3.0f, -2.4f, 5.8f, -2.7f);
                mPath.rCubicTo(1.0f, -0.1f, 1.9f, 0.0f, 2.9f, 0.3f);
                mPath.rCubicTo(6.5f, 1.8f, 5.8f, 8.2f, 8.2f, 10.8f);
                mPath.rCubicTo(2.1f, 2.3f, 6.8f, 0.2f, 8.9f, 2.0f);
                mPath.rCubicTo(1.7f, 1.5f, 1.9f, 5.5f, 5.0f, 8.3f);
                mPath.rCubicTo(0.4f, 0.4f, 0.9f, 0.8f, 1.4f, 1.0f);
                mPath.rCubicTo(5.5f, 2.8f, 6.2f, -6.3f, 6.2f, -9.6f);
                mPath.rCubicTo(1.7f, 0.1f, 3.8f, 0.1f, 4.9f, 1.6f);
                mPath.rCubicTo(1.2f, 1.5f, 0.5f, 3.3f, 2.1f, 5.6f);
                mPath.rLineTo(5.8f, 6.7f);
                mPath.rCubicTo(1.8f, 2.5f, 3.0f, 6.3f, 6.8f, 4.4f);
                mPath.rCubicTo(1.4f, -0.7f, 1.6f, -2.5f, 2.2f, -3.9f);
                mPath.rCubicTo(0.9f, -1.8f, 2.1f, -3.7f, 3.7f, -5.0f);
                mPath.rCubicTo(3.1f, -2.5f, 4.7f, -2.6f, 6.7f, -6.5f);
                mPath.rLineTo(3.8f, 2.9f);
                mPath.rLineTo(1.0f, -2.4f);
                mPath.rLineTo(9.6f, 5.4f);
                mPath.rLineTo(4.8f, 2.5f);
                mPath.rLineTo(7.7f, -1.3f);
                mPath.rLineTo(-3.0f, -8.2f);
                mPath.rLineTo(-0.7f, -5.8f);
                mPath.rLineTo(-3.2f, -6.7f);
                mPath.rCubicTo(-1.3f, -2.7f, -2.1f, -4.2f, -3.7f, -6.7f);
                mPath.rCubicTo(-0.6f, -0.9f, -1.8f, -2.4f, -1.8f, -3.6f);
                mPath.rCubicTo(0.1f, -3.8f, 4.1f, -4.8f, 6.1f, -7.1f);
                mPath.rCubicTo(2.6f, -3.0f, 2.5f, -5.6f, 4.4f, -7.3f);
                mPath.rCubicTo(1.8f, -1.6f, 3.9f, -1.7f, 6.1f, -1.7f);
                mPath.rLineTo(14.9f, 0.0f);
                mPath.rCubicTo(-0.1f, -4.2f, -1.0f, -5.4f, 0.0f, -10.1f);
                mPath.rCubicTo(0.6f, -2.5f, 1.9f, -2.9f, 2.6f, -4.8f);
                mPath.rCubicTo(0.6f, -1.6f, 1.2f, -9.1f, 1.2f, -11.0f);
                mPath.rCubicTo(0.0f, -6.0f, 2.0f, -2.9f, 1.9f, -10.1f);
                mPath.rLineTo(-1.9f, -12.5f);
                mPath.rCubicTo(-0.1f, -4.0f, 1.6f, -4.8f, 1.4f, -6.7f);
                mPath.rCubicTo(-0.2f, -1.7f, -2.0f, -2.8f, -1.7f, -4.5f);
                mPath.rCubicTo(0.5f, -2.3f, 2.6f, -3.3f, 3.7f, -4.8f);
                mPath.rCubicTo(0.8f, -1.0f, 1.5f, -4.3f, 1.7f, -5.6f);
                mPath.rCubicTo(0.8f, -4.4f, -3.3f, -7.2f, -4.4f, -10.6f);
                mPath.rCubicTo(-1.1f, -3.3f, 1.1f, -6.9f, 2.6f, -9.6f);
                mPath.rLineTo(-5.3f, 2.5f);
                mPath.rCubicTo(-2.9f, 1.2f, -4.6f, 1.2f, -7.2f, 3.4f);
                mPath.rCubicTo(-2.7f, 2.2f, -3.7f, 4.9f, -6.7f, 7.4f);
                mPath.rCubicTo(-2.9f, 2.4f, -5.3f, 1.5f, -7.4f, 3.6f);
                mPath.rLineTo(-2.4f, 3.2f);
                mPath.rLineTo(-3.4f, 3.4f);
                mPath.rCubicTo(-4.2f, 4.8f, -1.6f, 4.2f, -8.3f, 7.1f);
                mPath.rCubicTo(-2.8f, 1.2f, -3.5f, 1.9f, -6.7f, 2.6f);
                mPath.rLineTo(-5.8f, 0.7f);
                mPath.rCubicTo(-1.9f, 0.6f, -3.4f, 2.3f, -5.2f, 1.2f);
                mPath.rCubicTo(-2.2f, -1.3f, -6.1f, -6.6f, -6.9f, -9.3f);
                mPath.rCubicTo(-0.6f, -2.2f, -0.1f, -3.3f, -0.9f, -4.8f);
                mPath.rCubicTo(-1.0f, -2.0f, -4.2f, -4.2f, -5.5f, -6.2f);
                mPath.rCubicTo(-1.0f, -1.6f, -1.2f, -3.5f, -1.2f, -5.3f);
                mPath.rCubicTo(-1.7f, 0.1f, -3.9f, 0.7f, -5.4f, 0.4f);
                mPath.rCubicTo(-4.3f, -1.0f, -5.9f, -3.3f, -9.0f, -5.2f);
                mPath.rLineTo(-5.8f, -2.7f);
                mPath.rCubicTo(-3.5f, -1.3f, -3.9f, 0.9f, -7.2f, 0.6f);
                mPath.rCubicTo(-3.9f, -0.4f, -4.9f, -2.7f, -7.2f, -2.9f);
                mPath.rCubicTo(-2.6f, -0.2f, -5.4f, 1.9f, -7.7f, 2.7f);
                mPath.rCubicTo(-2.9f, 1.1f, -7.2f, 0.5f, -9.5f, -1.7f);
                mPath.rCubicTo(-4.5f, -4.2f, -3.7f, -6.1f, -5.8f, -10.9f);
                mPath.rCubicTo(-1.2f, -2.9f, -2.4f, -2.6f, -3.4f, -4.4f);
                mPath.rCubicTo(-0.8f, -1.3f, -0.6f, -3.5f, -1.5f, -5.2f);
                mPath.rCubicTo(-2.0f, -3.9f, -7.3f, -7.3f, -10.3f, -12.5f);
                mPath.rCubicTo(-3.0f, -5.3f, -3.8f, -9.5f, -4.7f, -11.0f);
                mPath.rCubicTo(-1.4f, -2.3f, -3.6f, -2.1f, -5.4f, -5.3f);
                mPath.rCubicTo(-1.3f, -2.4f, -0.5f, -4.3f, -2.3f, -6.7f);
                mPath.rCubicTo(-0.9f, -1.2f, -4.3f, -4.5f, -5.6f, -5.5f);
                mPath.rCubicTo(-0.9f, -0.6f, -2.4f, -1.3f, -3.1f, -2.0f);
                mPath.rCubicTo(-1.2f, -1.4f, -0.7f, -3.2f, -2.0f, -4.7f);
                mPath.rCubicTo(-0.6f, -0.8f, -2.2f, -1.8f, -3.1f, -2.4f);
                mPath.rCubicTo(-1.3f, -0.9f, -3.5f, -2.7f, -4.8f, -3.2f);
                mPath.rLineTo(-7.2f, -1.4f);
                mPath.rCubicTo(-0.6f, 0.9f, -1.6f, 2.8f, -2.7f, 3.1f);
                mPath.rCubicTo(-0.8f, 0.3f, -4.4f, -1.1f, -5.4f, -1.4f);
                mPath.rLineTo(-14.9f, -5.0f);
                mPath.rCubicTo(-1.2f, -0.2f, -1.8f, 0.1f, -2.9f, 0.3f);
                mPath.cubicTo(939.19995f, 59.700005f, 942.0f, 59.600002f, 937.1f, 61.300003f);
                mPath.lineTo(937.1f, 61.300003f);
                mPath.close();
                mPath.moveTo(937.1f, 61.300003f);
                break;
            case 11:
                mPath.moveTo(838.8f, 510.8f);
                mPath.rCubicTo(-1.3f, -0.4f, -4.7f, -0.2f, -6.2f, -0.2f);
                mPath.rCubicTo(0.0f, 5.8f, 0.7f, 14.3f, -2.7f, 19.2f);
                mPath.rCubicTo(-0.8f, 1.2f, -4.6f, 4.6f, -5.9f, 5.7f);
                mPath.rCubicTo(-1.5f, 1.4f, -3.9f, 3.2f, -5.8f, 4.0f);
                mPath.rCubicTo(-5.1f, 2.2f, -10.2f, 0.7f, -13.4f, 2.7f);
                mPath.rCubicTo(-1.4f, 0.9f, -2.0f, 2.4f, -3.5f, 3.2f);
                mPath.rCubicTo(-1.4f, 0.8f, -2.8f, 0.5f, -4.7f, 1.8f);
                mPath.rCubicTo(-2.2f, 1.5f, -3.5f, 3.8f, -7.2f, 5.7f);
                mPath.rCubicTo(-2.9f, 1.4f, -4.0f, 0.3f, -6.2f, 1.3f);
                mPath.rLineTo(-4.8f, 3.0f);
                mPath.rCubicTo(-2.8f, 1.5f, -6.0f, 2.3f, -9.1f, 2.8f);
                mPath.rCubicTo(0.0f, 2.1f, 0.1f, 6.9f, 1.2f, 8.6f);
                mPath.rCubicTo(0.9f, 1.3f, 2.6f, 2.2f, 3.6f, 3.9f);
                mPath.rCubicTo(1.3f, 2.1f, 0.5f, 4.0f, 2.0f, 6.7f);
                mPath.rCubicTo(1.9f, 3.5f, 4.8f, 5.0f, 5.8f, 6.4f);
                mPath.rCubicTo(1.9f, 2.6f, -0.7f, 5.5f, 2.3f, 9.5f);
                mPath.rLineTo(7.0f, 7.7f);
                mPath.rCubicTo(1.1f, 1.3f, 2.6f, 4.1f, 3.6f, 4.8f);
                mPath.rLineTo(6.1f, 1.9f);
                mPath.rLineTo(7.2f, 3.5f);
                mPath.rCubicTo(1.8f, 0.5f, 6.0f, 0.2f, 8.2f, 0.3f);
                mPath.rLineTo(4.8f, 0.6f);
                mPath.rCubicTo(2.4f, -0.2f, 5.5f, -2.9f, 8.6f, -3.0f);
                mPath.rCubicTo(2.2f, -0.1f, 3.3f, 2.3f, 5.4f, 2.7f);
                mPath.rCubicTo(1.7f, 0.4f, 5.2f, -1.5f, 6.7f, -2.3f);
                mPath.rLineTo(0.0f, 4.3f);
                mPath.rCubicTo(0.1f, 3.1f, 2.2f, 7.8f, 5.3f, 9.1f);
                mPath.rCubicTo(1.4f, 0.5f, 2.5f, -0.3f, 4.3f, 0.0f);
                mPath.rLineTo(3.8f, 1.3f);
                mPath.rCubicTo(1.3f, 0.2f, 4.7f, -0.5f, 6.2f, -0.7f);
                mPath.rLineTo(0.0f, 5.8f);
                mPath.rLineTo(6.2f, 0.3f);
                mPath.rLineTo(6.7f, -0.9f);
                mPath.rLineTo(3.8f, 2.1f);
                mPath.rCubicTo(1.1f, -3.5f, 1.7f, -6.0f, 4.8f, -8.4f);
                mPath.rCubicTo(1.8f, -1.4f, 3.3f, -0.9f, 4.3f, -2.3f);
                mPath.rCubicTo(1.6f, -2.4f, 0.6f, -8.6f, 0.0f, -11.4f);
                mPath.rCubicTo(-0.1f, -1.0f, -0.4f, -2.9f, -1.0f, -3.6f);
                mPath.rCubicTo(-1.8f, -2.5f, -7.7f, -2.1f, -10.6f, -2.6f);
                mPath.rCubicTo(-1.3f, -0.2f, -3.0f, -0.4f, -3.8f, -1.6f);
                mPath.rCubicTo(-0.6f, -1.0f, -0.9f, -4.4f, -1.0f, -5.6f);
                mPath.rCubicTo(-5.7f, -1.3f, -5.2f, -2.0f, -7.7f, -6.7f);
                mPath.rCubicTo(3.1f, 0.0f, 8.0f, 0.0f, 9.0f, -3.9f);
                mPath.rCubicTo(0.3f, -1.7f, -0.7f, -3.2f, 0.0f, -5.2f);
                mPath.rCubicTo(1.1f, -2.6f, 2.9f, -2.7f, 3.0f, -10.1f);
                mPath.rCubicTo(0.0f, -1.2f, -0.1f, -3.1f, 0.5f, -4.1f);
                mPath.rCubicTo(1.6f, -2.5f, 5.0f, -2.5f, 7.1f, -0.9f);
                mPath.rLineTo(6.3f, 6.0f);
                mPath.rLineTo(8.2f, -5.3f);
                mPath.rLineTo(-2.7f, -6.4f);
                mPath.rLineTo(-6.2f, -4.4f);
                mPath.rLineTo(-3.1f, -4.9f);
                mPath.rLineTo(-7.1f, 0.7f);
                mPath.rLineTo(-6.7f, 0.0f);
                mPath.rCubicTo(-0.6f, -3.7f, -2.1f, -7.5f, -6.2f, -8.8f);
                mPath.rCubicTo(-1.3f, -0.4f, -6.5f, -0.2f, -8.2f, -0.2f);
                mPath.rCubicTo(0.7f, -2.0f, 2.5f, -8.1f, 3.7f, -9.5f);
                mPath.rCubicTo(1.6f, -1.9f, 3.1f, -0.8f, 5.4f, -4.0f);
                mPath.rCubicTo(2.1f, -2.9f, 1.8f, -5.2f, 3.5f, -7.0f);
                mPath.rCubicTo(2.4f, -2.5f, 6.2f, -2.1f, 8.0f, -7.9f);
                mPath.rCubicTo(-5.0f, 1.1f, -5.0f, 3.0f, -7.7f, 3.1f);
                mPath.rCubicTo(-1.3f, 0.0f, -3.0f, -0.4f, -3.4f, -1.7f);
                mPath.rLineTo(0.0f, -3.3f);
                mPath.rLineTo(-1.9f, 1.9f);
                mPath.rLineTo(-3.8f, -2.9f);
                mPath.rCubicTo(-2.3f, 4.9f, -3.4f, 2.7f, -7.7f, 3.0f);
                mPath.rCubicTo(-4.9f, 0.3f, -3.0f, -0.6f, -6.7f, -1.7f);
                mPath.rLineTo(-3.8f, -0.4f);
                mPath.cubicTo(841.0f, 512.0f, 840.2f, 511.2f, 838.8f, 510.8f);
                mPath.lineTo(838.8f, 510.8f);
                mPath.close();
                mPath.moveTo(838.8f, 510.8f);
                break;
            case 12:
                mPath.moveTo(875.19995f, 857.6f);
                mPath.rLineTo(2.4f, 5.8f);
                mPath.rCubicTo(-4.3f, -0.6f, -4.6f, -0.6f, -6.7f, -4.3f);
                mPath.rCubicTo(-1.3f, 0.6f, -3.1f, 1.3f, -3.8f, 2.6f);
                mPath.rCubicTo(-1.4f, 2.4f, -0.2f, 5.1f, 2.4f, 5.8f);
                mPath.rLineTo(12.5f, -0.6f);
                mPath.rCubicTo(0.0f, -2.6f, 0.0f, -8.1f, -3.1f, -9.2f);
                mPath.cubicTo(878.19995f, 857.2f, 876.1f, 857.6f, 875.19995f, 857.6f);
                mPath.close();
                mPath.moveTo(875.19995f, 857.6f);
                break;
            case 13:
                mPath.moveTo(791.1f, 602.7f);
                mPath.rCubicTo(-1.3f, -1.6f, -7.3f, -8.0f, -8.9f, -9.1f);
                mPath.rCubicTo(-1.3f, 1.1f, -3.9f, 4.0f, -5.8f, 3.4f);
                mPath.rCubicTo(-1.0f, -0.4f, -2.0f, -1.7f, -3.4f, -1.9f);
                mPath.rCubicTo(-1.3f, -0.2f, -2.2f, 0.8f, -4.3f, 0.8f);
                mPath.rLineTo(-3.8f, -0.4f);
                mPath.rLineTo(-5.3f, 0.0f);
                mPath.rCubicTo(-1.3f, -0.3f, -4.0f, -1.0f, -5.2f, -0.6f);
                mPath.rCubicTo(-1.4f, 0.5f, -2.2f, 1.9f, -2.9f, 3.1f);
                mPath.rCubicTo(1.8f, 0.1f, 4.1f, 0.2f, 5.5f, 1.6f);
                mPath.rCubicTo(1.0f, 1.0f, 1.5f, 3.0f, 2.5f, 3.9f);
                mPath.rCubicTo(1.2f, 1.1f, 2.5f, 0.5f, 3.8f, 1.5f);
                mPath.rCubicTo(1.0f, 0.8f, 3.0f, 4.5f, 4.0f, 6.0f);
                mPath.rCubicTo(-1.2f, 0.5f, -3.1f, 1.5f, -4.3f, 1.6f);
                mPath.rCubicTo(-2.1f, 0.2f, -3.9f, -1.4f, -7.2f, 1.5f);
                mPath.rCubicTo(-4.2f, 3.8f, -0.4f, 5.2f, 0.0f, 8.5f);
                mPath.rCubicTo(0.1f, 1.3f, -1.2f, 8.4f, 0.8f, 11.5f);
                mPath.rCubicTo(2.3f, 3.4f, 5.7f, 3.1f, 10.2f, 8.7f);
                mPath.rCubicTo(0.7f, 0.9f, 1.5f, 1.8f, 2.0f, 2.9f);
                mPath.rCubicTo(1.4f, 3.6f, -1.0f, 7.9f, -1.5f, 11.5f);
                mPath.rLineTo(-3.8f, -1.3f);
                mPath.rLineTo(-3.8f, 2.1f);
                mPath.rLineTo(-8.2f, 5.7f);
                mPath.rLineTo(-4.0f, 0.6f);
                mPath.rLineTo(-3.1f, -0.9f);
                mPath.rLineTo(-3.9f, 2.5f);
                mPath.rLineTo(-3.8f, 0.0f);
                mPath.rLineTo(-4.3f, 2.3f);
                mPath.rCubicTo(0.9f, 1.3f, 2.7f, 3.5f, 3.1f, 4.8f);
                mPath.rCubicTo(0.7f, 2.4f, -1.3f, 8.3f, -1.6f, 11.0f);
                mPath.rLineTo(2.9f, -2.4f);
                mPath.rLineTo(2.6f, 5.0f);
                mPath.rLineTo(4.6f, 3.3f);
                mPath.rLineTo(0.5f, 5.7f);
                mPath.rCubicTo(4.2f, -1.1f, 4.6f, -0.7f, 6.7f, 4.3f);
                mPath.rCubicTo(2.9f, -3.7f, 2.4f, -7.6f, 4.5f, -9.9f);
                mPath.rCubicTo(2.4f, -2.8f, 9.4f, -7.1f, 13.2f, -7.0f);
                mPath.rCubicTo(2.1f, 0.0f, 3.0f, 1.2f, 4.8f, 1.3f);
                mPath.rCubicTo(1.5f, 0.1f, 5.2f, -1.0f, 6.7f, -1.6f);
                mPath.rCubicTo(-0.5f, -1.1f, -1.7f, -3.2f, -1.7f, -4.3f);
                mPath.rCubicTo(0.4f, -5.5f, 9.5f, -5.0f, 13.2f, -4.2f);
                mPath.rCubicTo(2.9f, 0.6f, 2.9f, 2.6f, 4.9f, 3.4f);
                mPath.rCubicTo(1.1f, 0.5f, 5.6f, 0.3f, 7.1f, 0.3f);
                mPath.rCubicTo(5.6f, 0.0f, 4.8f, 2.7f, 9.1f, 5.1f);
                mPath.rCubicTo(1.0f, 0.5f, 2.8f, 1.3f, 3.8f, 1.4f);
                mPath.rCubicTo(2.2f, 0.2f, 7.8f, -1.1f, 9.5f, -2.5f);
                mPath.rCubicTo(1.1f, -0.9f, 1.8f, -2.3f, 2.5f, -3.5f);
                mPath.rCubicTo(0.4f, 1.5f, 1.2f, 6.8f, 2.6f, 7.4f);
                mPath.rCubicTo(0.8f, 0.3f, 2.8f, -0.3f, 3.6f, -0.6f);
                mPath.rCubicTo(0.9f, -0.3f, 1.5f, -0.5f, 2.2f, -1.2f);
                mPath.rCubicTo(1.5f, -1.3f, 2.5f, -4.1f, 4.2f, -4.5f);
                mPath.rCubicTo(3.6f, -0.8f, 6.4f, 4.4f, 6.4f, 6.4f);
                mPath.rCubicTo(0.0f, 0.9f, -1.8f, 4.4f, -2.3f, 5.5f);
                mPath.rLineTo(8.2f, 4.3f);
                mPath.rCubicTo(2.0f, -4.6f, 2.0f, -3.3f, 5.8f, -5.4f);
                mPath.rCubicTo(2.0f, -1.1f, 2.6f, -2.4f, 4.8f, -3.4f);
                mPath.rLineTo(7.7f, -2.9f);
                mPath.rCubicTo(1.9f, -1.1f, 2.5f, -2.6f, 4.3f, -3.9f);
                mPath.rCubicTo(1.8f, -1.2f, 3.6f, -1.2f, 5.2f, -2.5f);
                mPath.rCubicTo(1.5f, -1.2f, 3.0f, -3.7f, 4.5f, -4.5f);
                mPath.rCubicTo(2.0f, -1.2f, 5.4f, -0.2f, 7.6f, 0.0f);
                mPath.rCubicTo(7.7f, 0.8f, 3.2f, -8.9f, 1.1f, -12.0f);
                mPath.rCubicTo(-0.7f, -1.1f, -1.2f, -1.7f, -1.7f, -2.9f);
                mPath.rCubicTo(-1.5f, -3.8f, -1.2f, -5.8f, -4.7f, -9.1f);
                mPath.rCubicTo(3.0f, -3.8f, 2.9f, -3.9f, 2.9f, -8.6f);
                mPath.rCubicTo(-2.0f, -0.5f, -7.0f, -2.4f, -8.6f, -3.6f);
                mPath.rCubicTo(-2.3f, -1.6f, -4.9f, -5.0f, -7.7f, -5.8f);
                mPath.rCubicTo(-2.1f, -0.6f, -6.3f, 0.9f, -8.6f, 1.1f);
                mPath.rLineTo(-5.3f, -0.4f);
                mPath.lineTo(861.0f, 625.8f);
                mPath.rCubicTo(-1.6f, 0.2f, -4.4f, 0.8f, -5.8f, 0.6f);
                mPath.rLineTo(-3.8f, -1.2f);
                mPath.rCubicTo(-1.5f, -0.2f, -2.9f, 0.4f, -4.3f, -0.2f);
                mPath.rCubicTo(-2.1f, -1.1f, -5.2f, -5.4f, -5.7f, -7.7f);
                mPath.rLineTo(0.0f, -4.8f);
                mPath.rCubicTo(-1.5f, 0.4f, -5.1f, 2.0f, -6.1f, 1.8f);
                mPath.rCubicTo(-1.9f, -0.4f, -2.9f, -3.0f, -6.0f, -2.7f);
                mPath.rCubicTo(-3.2f, 0.3f, -6.1f, 2.6f, -8.2f, 2.8f);
                mPath.rLineTo(-5.3f, -0.4f);
                mPath.rCubicTo(-1.8f, 0.0f, -5.6f, 0.2f, -7.2f, -0.3f);
                mPath.rLineTo(-7.2f, -3.5f);
                mPath.rCubicTo(-1.8f, -0.7f, -5.5f, -1.4f, -6.6f, -2.2f);
                mPath.cubicTo(793.4f, 606.8f, 792.2f, 604.2f, 791.1f, 602.7f);
                mPath.lineTo(791.1f, 602.7f);
                mPath.close();
                mPath.moveTo(791.1f, 602.7f);
                break;
            case 14:
                mPath.moveTo(778.8f, 678.6f);
                mPath.rCubicTo(0.2f, 1.3f, 1.6f, 3.3f, 2.4f, 4.3f);
                mPath.rLineTo(-7.2f, 1.4f);
                mPath.rCubicTo(-1.7f, 0.0f, -2.4f, -0.8f, -3.8f, -1.1f);
                mPath.rCubicTo(-1.4f, -0.3f, -3.9f, 0.1f, -5.3f, 0.5f);
                mPath.rCubicTo(-1.8f, 0.6f, -3.3f, 1.6f, -4.8f, 2.7f);
                mPath.rCubicTo(-1.3f, 0.9f, -3.5f, 2.3f, -4.5f, 3.4f);
                mPath.rCubicTo(-1.1f, 1.3f, -1.5f, 3.8f, -2.1f, 5.5f);
                mPath.rCubicTo(-1.5f, 4.3f, -2.1f, 3.1f, -2.1f, 8.2f);
                mPath.rCubicTo(0.0f, 8.3f, 1.0f, 12.2f, 2.5f, 20.2f);
                mPath.rLineTo(0.5f, 5.8f);
                mPath.rCubicTo(0.4f, 2.6f, 2.4f, 4.7f, 2.3f, 6.9f);
                mPath.rCubicTo(-0.2f, 3.8f, -2.4f, 4.2f, -4.5f, 6.7f);
                mPath.rCubicTo(-1.8f, 2.1f, -4.3f, 6.9f, -5.1f, 9.5f);
                mPath.rLineTo(5.8f, -1.2f);
                mPath.rCubicTo(0.9f, -0.3f, 2.7f, -1.2f, 3.6f, -0.9f);
                mPath.rCubicTo(2.2f, 0.6f, 5.5f, 5.7f, 2.8f, 9.2f);
                mPath.rCubicTo(-0.8f, 1.1f, -2.8f, 1.8f, -4.0f, 2.5f);
                mPath.rCubicTo(2.2f, 5.1f, 1.4f, 3.0f, 0.0f, 8.2f);
                mPath.rLineTo(4.3f, 0.5f);
                mPath.rCubicTo(0.0f, 3.2f, -0.7f, 6.1f, 1.9f, 8.3f);
                mPath.rCubicTo(1.0f, 0.9f, 2.0f, 1.6f, 3.3f, 0.9f);
                mPath.rCubicTo(1.9f, -0.9f, 4.2f, -4.9f, 5.8f, -5.1f);
                mPath.rCubicTo(2.0f, -0.3f, 2.9f, 2.8f, 6.2f, 1.9f);
                mPath.rCubicTo(4.3f, -1.2f, 5.2f, -4.8f, 7.7f, -6.1f);
                mPath.rCubicTo(1.6f, -0.6f, 2.7f, 0.2f, 4.8f, 0.0f);
                mPath.rCubicTo(3.7f, -0.7f, 2.1f, -1.8f, 9.1f, -1.9f);
                mPath.rCubicTo(0.2f, 2.2f, 0.9f, 9.8f, 3.1f, 10.7f);
                mPath.rCubicTo(0.8f, 0.4f, 3.1f, 0.0f, 4.1f, 0.0f);
                mPath.rLineTo(-3.2f, 4.7f);
                mPath.rLineTo(-0.8f, 5.3f);
                mPath.rLineTo(-5.8f, 8.2f);
                mPath.rLineTo(-0.4f, 6.2f);
                mPath.rCubicTo(6.0f, -3.8f, 2.6f, -2.8f, 10.1f, -5.3f);
                mPath.rLineTo(1.0f, 11.0f);
                mPath.rCubicTo(1.6f, -0.3f, 3.4f, -0.6f, 4.8f, -1.3f);
                mPath.rCubicTo(1.1f, -0.6f, 2.6f, -1.8f, 3.6f, -2.0f);
                mPath.rCubicTo(1.6f, -0.4f, 3.1f, 0.9f, 4.6f, -0.4f);
                mPath.rCubicTo(2.8f, -2.4f, 2.3f, -7.0f, 2.3f, -10.3f);
                mPath.rCubicTo(1.8f, 0.0f, 9.3f, -0.2f, 10.5f, 0.3f);
                mPath.rCubicTo(1.7f, 0.7f, 1.7f, 2.7f, 2.8f, 3.7f);
                mPath.rCubicTo(1.2f, 1.1f, 4.3f, 0.8f, 5.9f, 0.8f);
                mPath.rCubicTo(-0.7f, -5.3f, -1.4f, -5.8f, -4.3f, -10.1f);
                mPath.rCubicTo(1.6f, -0.4f, 4.4f, -0.7f, 5.8f, -1.4f);
                mPath.rCubicTo(1.7f, -0.9f, 2.7f, -2.7f, 4.0f, -2.6f);
                mPath.rCubicTo(0.7f, 0.0f, 2.4f, 1.2f, 3.2f, 1.6f);
                mPath.rCubicTo(2.5f, 1.2f, 7.7f, 2.5f, 9.9f, 0.4f);
                mPath.rCubicTo(2.8f, -2.6f, 0.9f, -5.8f, 1.2f, -9.0f);
                mPath.rCubicTo(0.4f, -3.5f, 2.8f, -7.8f, 4.2f, -11.0f);
                mPath.rCubicTo(-5.4f, -0.9f, -3.2f, -3.6f, -4.1f, -7.7f);
                mPath.rCubicTo(-1.0f, -4.9f, -3.2f, -5.8f, -3.7f, -7.7f);
                mPath.rCubicTo(-0.4f, -1.8f, 0.9f, -3.3f, 0.0f, -6.2f);
                mPath.rCubicTo(-0.5f, -1.3f, -1.6f, -4.0f, -2.5f, -5.0f);
                mPath.rCubicTo(-2.4f, -2.5f, -5.7f, -2.8f, -5.7f, -7.5f);
                mPath.rCubicTo(0.0f, -1.3f, 0.8f, -3.0f, 1.3f, -4.3f);
                mPath.rCubicTo(0.6f, -1.9f, 1.3f, -5.2f, 2.5f, -6.5f);
                mPath.rLineTo(3.0f, -2.3f);
                mPath.rCubicTo(0.8f, -0.7f, 4.4f, -6.0f, 4.8f, -7.0f);
                mPath.rCubicTo(0.8f, -2.2f, -1.0f, -3.6f, -1.6f, -5.8f);
                mPath.rCubicTo(-0.5f, -1.7f, 0.0f, -3.1f, -0.6f, -4.8f);
                mPath.rCubicTo(-0.4f, -1.0f, -1.4f, -2.4f, -2.0f, -3.4f);
                mPath.rCubicTo(-3.7f, -5.5f, -5.6f, -6.3f, -11.5f, -9.1f);
                mPath.rCubicTo(2.0f, -3.5f, 3.4f, -4.8f, 1.3f, -8.6f);
                mPath.rCubicTo(-0.5f, -0.9f, -0.9f, -1.7f, -1.9f, -2.3f);
                mPath.rCubicTo(-0.8f, -0.5f, -2.8f, -0.9f, -3.7f, -1.1f);
                mPath.rCubicTo(-3.3f, 4.9f, -4.4f, 6.6f, -10.6f, 7.2f);
                mPath.rLineTo(-1.4f, -7.2f);
                mPath.rCubicTo(-0.8f, 1.0f, -1.5f, 2.1f, -2.5f, 2.9f);
                mPath.rCubicTo(-3.4f, 2.4f, -9.2f, 3.3f, -12.9f, 1.2f);
                mPath.rCubicTo(-4.7f, -2.6f, -3.2f, -5.1f, -9.6f, -5.1f);
                mPath.rCubicTo(-1.7f, 0.0f, -5.8f, 0.3f, -7.2f, -0.5f);
                mPath.rCubicTo(-1.9f, -1.0f, -2.0f, -2.7f, -4.8f, -3.1f);
                mPath.rCubicTo(-2.8f, -0.7f, -7.4f, -1.0f, -10.1f, 0.0f);
                mPath.cubicTo(780.2f, 675.3f, 778.5f, 676.8f, 778.8f, 678.6f);
                mPath.lineTo(778.8f, 678.6f);
                mPath.close();
                mPath.moveTo(778.8f, 678.6f);
                break;
            case 15:
                mPath.moveTo(932.6f, 543.5f);
                mPath.rCubicTo(-1.1f, 1.3f, -1.2f, 3.8f, -1.2f, 5.5f);
                mPath.rLineTo(-8.6f, -3.8f);
                mPath.rLineTo(-7.2f, 4.4f);
                mPath.rLineTo(-5.3f, -1.6f);
                mPath.rLineTo(-4.8f, 1.1f);
                mPath.rCubicTo(-0.9f, -2.3f, -3.5f, -7.2f, -5.8f, -8.1f);
                mPath.rCubicTo(-3.9f, -1.5f, -9.7f, 1.0f, -9.0f, 5.7f);
                mPath.rCubicTo(0.1f, 0.7f, 0.2f, 1.1f, 0.7f, 1.6f);
                mPath.rLineTo(9.3f, 5.5f);
                mPath.rCubicTo(4.9f, 3.2f, 2.4f, 4.5f, 7.2f, 6.6f);
                mPath.rCubicTo(5.1f, 2.2f, 7.4f, 0.1f, 10.1f, 1.5f);
                mPath.rCubicTo(2.3f, 1.1f, 4.5f, 4.1f, 6.2f, 4.9f);
                mPath.rCubicTo(1.3f, 0.7f, 3.8f, 0.5f, 5.3f, 0.5f);
                mPath.rCubicTo(0.0f, 1.7f, 0.1f, 4.6f, -0.3f, 6.2f);
                mPath.rCubicTo(-0.5f, 2.2f, -1.9f, 3.9f, -1.2f, 6.2f);
                mPath.rCubicTo(0.9f, 2.9f, 2.9f, 2.7f, 4.5f, 4.5f);
                mPath.rCubicTo(1.5f, 1.6f, 1.8f, 4.1f, 3.8f, 5.6f);
                mPath.rCubicTo(0.7f, 0.6f, 1.8f, 1.1f, 2.8f, 1.0f);
                mPath.rCubicTo(2.5f, -0.2f, 7.1f, -4.1f, 8.2f, -6.3f);
                mPath.rCubicTo(1.7f, 0.8f, 4.8f, 1.7f, 5.8f, 3.0f);
                mPath.rCubicTo(1.9f, 2.4f, 1.8f, 4.9f, -0.6f, 6.8f);
                mPath.rCubicTo(-0.7f, 0.6f, -1.5f, 1.2f, -2.4f, 1.3f);
                mPath.rCubicTo(-1.1f, 0.2f, -3.2f, -0.7f, -4.3f, -1.0f);
                mPath.rLineTo(-1.3f, 7.7f);
                mPath.rCubicTo(-1.1f, 3.1f, -3.2f, 2.6f, -3.0f, 8.2f);
                mPath.rCubicTo(0.2f, 4.3f, 5.1f, 4.7f, 8.0f, 7.5f);
                mPath.rCubicTo(3.0f, 2.8f, 2.5f, 6.3f, 2.0f, 9.8f);
                mPath.rLineTo(8.2f, -2.0f);
                mPath.rLineTo(9.1f, 2.2f);
                mPath.rLineTo(6.2f, -1.0f);
                mPath.rLineTo(4.8f, 3.7f);
                mPath.rLineTo(9.1f, 2.9f);
                mPath.rCubicTo(0.8f, -1.2f, 1.9f, -3.2f, 3.0f, -4.1f);
                mPath.rCubicTo(1.4f, -1.2f, 3.1f, -1.2f, 4.1f, -2.8f);
                mPath.rCubicTo(2.2f, -3.5f, 0.6f, -8.8f, 6.4f, -12.8f);
                mPath.rCubicTo(-2.6f, -3.7f, -4.5f, -4.5f, -8.2f, -6.7f);
                mPath.rCubicTo(2.4f, -1.1f, 5.4f, -2.9f, 8.2f, -2.7f);
                mPath.rCubicTo(4.8f, 0.4f, 5.1f, 3.4f, 11.0f, 1.7f);
                mPath.rCubicTo(-0.9f, -2.1f, -2.2f, -5.0f, -4.0f, -6.5f);
                mPath.rCubicTo(-1.5f, -1.3f, -2.4f, -0.8f, -4.7f, -2.7f);
                mPath.rLineTo(-6.7f, -6.4f);
                mPath.rCubicTo(-2.4f, -1.7f, -5.5f, -1.5f, -7.9f, -4.6f);
                mPath.rCubicTo(-1.4f, -1.8f, -0.8f, -3.3f, -2.4f, -6.2f);
                mPath.rLineTo(-6.0f, -9.1f);
                mPath.rLineTo(-2.6f, -6.2f);
                mPath.rLineTo(-3.5f, -5.8f);
                mPath.rCubicTo(-1.9f, -3.7f, -3.5f, -9.3f, -6.7f, -12.3f);
                mPath.rCubicTo(-1.4f, -1.3f, -4.1f, -1.7f, -6.0f, -2.3f);
                mPath.rCubicTo(-4.3f, -1.4f, -10.0f, -2.9f, -13.4f, -5.9f);
                mPath.rCubicTo(-1.1f, -0.9f, -3.7f, -3.8f, -3.8f, -5.2f);
                mPath.rCubicTo(0.0f, -0.7f, 1.0f, -3.3f, 1.3f, -4.1f);
                mPath.rCubicTo(-3.2f, 0.9f, -6.8f, 2.1f, -8.2f, 5.3f);
                mPath.rCubicTo(-1.2f, 2.6f, -0.8f, 4.6f, -1.8f, 6.1f);
                mPath.cubicTo(936.0f, 541.9f, 933.80005f, 542.3f, 932.6f, 543.5f);
                mPath.lineTo(932.6f, 543.5f);
                mPath.close();
                mPath.moveTo(932.6f, 543.5f);
                break;
            case 16:
                mPath.moveTo(860.4f, 757.8f);
                mPath.rCubicTo(1.6f, 3.4f, 1.3f, 6.0f, 1.3f, 9.6f);
                mPath.rLineTo(3.8f, 1.0f);
                mPath.rCubicTo(-2.7f, 4.7f, -5.0f, 9.3f, -4.0f, 14.9f);
                mPath.rCubicTo(0.4f, 2.6f, 1.9f, 4.3f, 4.5f, 4.9f);
                mPath.rCubicTo(3.8f, 0.8f, 6.5f, -3.3f, 11.0f, -1.3f);
                mPath.rCubicTo(1.0f, 0.4f, 1.7f, 0.9f, 2.3f, 1.8f);
                mPath.rCubicTo(2.0f, 3.5f, -1.0f, 4.6f, -3.2f, 6.4f);
                mPath.rCubicTo(-2.3f, 1.9f, -5.5f, 7.2f, -4.5f, 10.3f);
                mPath.rCubicTo(0.2f, 0.7f, 0.7f, 1.3f, 1.2f, 1.8f);
                mPath.rCubicTo(2.3f, 2.3f, 4.2f, 0.3f, 6.6f, -0.7f);
                mPath.rCubicTo(2.5f, -1.0f, 3.7f, -0.3f, 5.2f, -1.1f);
                mPath.rCubicTo(1.3f, -0.7f, 1.9f, -2.0f, 3.4f, -2.9f);
                mPath.rLineTo(8.6f, -2.4f);
                mPath.rCubicTo(1.9f, -0.2f, 3.2f, 1.1f, 4.8f, 1.8f);
                mPath.rCubicTo(1.5f, 0.7f, 3.1f, 0.9f, 4.8f, 1.1f);
                mPath.rCubicTo(-0.3f, -1.3f, -1.2f, -3.7f, -1.1f, -4.8f);
                mPath.rCubicTo(0.1f, -1.7f, 1.2f, -2.6f, 1.5f, -5.3f);
                mPath.rCubicTo(0.5f, -4.0f, 1.7f, -15.0f, 2.9f, -18.2f);
                mPath.rCubicTo(1.4f, -3.9f, 4.6f, -7.7f, 5.0f, -9.1f);
                mPath.rCubicTo(0.6f, -1.8f, -0.1f, -4.3f, 0.6f, -6.2f);
                mPath.rCubicTo(0.7f, -2.1f, 2.7f, -3.9f, 2.8f, -5.8f);
                mPath.rCubicTo(0.1f, -2.4f, -2.3f, -3.9f, -1.6f, -6.7f);
                mPath.rCubicTo(1.5f, -6.2f, 7.5f, -6.6f, 9.6f, -10.6f);
                mPath.rCubicTo(0.8f, -1.6f, 1.9f, -6.0f, 1.3f, -7.7f);
                mPath.rCubicTo(-0.5f, -1.5f, -2.3f, -2.8f, -2.0f, -4.3f);
                mPath.rCubicTo(0.2f, -1.1f, 1.8f, -2.2f, 2.5f, -3.0f);
                mPath.rLineTo(2.7f, -3.1f);
                mPath.rCubicTo(1.8f, -1.9f, 2.8f, -2.2f, 4.6f, -4.5f);
                mPath.rLineTo(5.3f, 3.4f);
                mPath.rCubicTo(0.8f, -1.4f, 1.5f, -3.0f, 2.9f, -3.9f);
                mPath.rCubicTo(1.3f, -0.8f, 2.7f, -0.7f, 4.3f, -1.7f);
                mPath.rCubicTo(2.5f, -1.7f, 5.1f, -6.8f, 4.8f, -9.8f);
                mPath.rCubicTo(-0.3f, -3.5f, -1.5f, -9.7f, -3.8f, -12.4f);
                mPath.rCubicTo(-1.8f, -2.1f, -4.4f, -2.3f, -5.4f, -4.0f);
                mPath.rCubicTo(-1.1f, -2.1f, 1.5f, -7.0f, 0.4f, -8.7f);
                mPath.rCubicTo(-0.7f, -1.0f, -4.5f, -2.2f, -5.7f, -2.6f);
                mPath.rLineTo(-8.6f, -2.0f);
                mPath.rCubicTo(-2.3f, -1.0f, -2.8f, -2.6f, -4.4f, -3.4f);
                mPath.rCubicTo(-1.3f, -0.7f, -3.8f, -0.5f, -5.2f, -0.5f);
                mPath.rCubicTo(-0.5f, 3.4f, -0.7f, 4.5f, -3.8f, 6.3f);
                mPath.rCubicTo(-0.7f, 0.4f, -1.3f, 0.8f, -2.1f, 0.8f);
                mPath.rLineTo(-3.2f, -0.4f);
                mPath.rCubicTo(1.8f, -5.7f, 2.4f, -1.9f, 2.4f, -10.1f);
                mPath.rCubicTo(-1.7f, 0.0f, -4.2f, -0.3f, -5.6f, 0.8f);
                mPath.rCubicTo(-1.6f, 1.2f, -2.1f, 3.6f, -4.5f, 4.6f);
                mPath.rLineTo(-4.3f, 1.1f);
                mPath.rCubicTo(-1.7f, 0.7f, -2.7f, 1.9f, -4.3f, 2.1f);
                mPath.rCubicTo(-1.1f, 0.2f, -6.5f, -0.9f, -8.5f, 0.0f);
                mPath.rCubicTo(-1.6f, 0.6f, -3.1f, 3.1f, -4.5f, 4.3f);
                mPath.rCubicTo(-2.0f, 1.7f, -3.8f, 1.5f, -5.7f, 2.9f);
                mPath.rCubicTo(-1.9f, 1.3f, -2.1f, 2.7f, -4.8f, 4.1f);
                mPath.rLineTo(-7.7f, 2.9f);
                mPath.rLineTo(-3.8f, 2.8f);
                mPath.rCubicTo(-2.0f, 1.3f, -4.2f, 1.5f, -5.0f, 4.2f);
                mPath.rCubicTo(-0.7f, 2.2f, 1.8f, 4.9f, 3.0f, 6.7f);
                mPath.rCubicTo(3.5f, 5.3f, 1.2f, 4.6f, 2.5f, 8.2f);
                mPath.rCubicTo(0.5f, 1.4f, 1.8f, 2.7f, 1.3f, 4.3f);
                mPath.rCubicTo(-0.3f, 1.0f, -4.4f, 7.1f, -5.2f, 7.9f);
                mPath.rLineTo(-2.8f, 2.0f);
                mPath.rCubicTo(-0.8f, 0.9f, -1.2f, 2.8f, -1.5f, 4.0f);
                mPath.rCubicTo(-0.6f, 2.0f, -2.2f, 5.3f, -2.0f, 7.2f);
                mPath.rCubicTo(0.5f, 5.0f, 4.7f, 4.9f, 6.7f, 8.6f);
                mPath.rCubicTo(0.7f, 1.3f, 1.8f, 3.8f, 1.9f, 5.3f);
                mPath.rCubicTo(0.1f, 1.6f, -0.6f, 3.5f, -0.2f, 4.8f);
                mPath.cubicTo(858.19995f, 754.89996f, 859.5f, 755.8f, 860.4f, 757.8f);
                mPath.lineTo(860.4f, 757.8f);
                mPath.close();
                mPath.moveTo(860.4f, 757.8f);
                break;
            case 17:
                mPath.moveTo(971.5f, 240.70001f);
                mPath.rCubicTo(-1.0f, 1.1f, -2.4f, 1.8f, -3.7f, 2.5f);
                mPath.rCubicTo(1.3f, 4.8f, 0.7f, 3.8f, -0.5f, 8.2f);
                mPath.rCubicTo(-4.6f, -1.7f, -5.3f, -4.9f, -8.6f, -0.5f);
                mPath.rCubicTo(-0.8f, -0.6f, -1.5f, -1.2f, -2.4f, -1.5f);
                mPath.rCubicTo(-3.0f, -0.9f, -6.0f, 2.0f, -7.2f, 4.4f);
                mPath.rCubicTo(5.1f, 0.1f, 4.0f, 1.5f, 6.9f, 4.8f);
                mPath.rCubicTo(1.7f, 1.9f, 4.0f, 3.2f, 4.9f, 5.8f);
                mPath.rCubicTo(0.8f, 2.5f, -1.1f, 4.4f, -0.9f, 6.7f);
                mPath.rCubicTo(0.1f, 1.4f, 1.6f, 4.2f, 2.2f, 5.8f);
                mPath.rCubicTo(0.7f, 2.0f, 0.3f, 3.1f, 0.6f, 4.3f);
                mPath.rCubicTo(0.5f, 1.8f, 1.9f, 2.2f, 2.7f, 3.5f);
                mPath.rCubicTo(0.6f, 1.1f, 0.5f, 2.9f, 0.5f, 4.2f);
                mPath.rCubicTo(2.4f, 0.0f, 4.6f, 0.3f, 6.7f, -1.2f);
                mPath.rCubicTo(2.2f, -1.7f, 3.3f, -4.9f, 6.8f, -4.6f);
                mPath.rCubicTo(4.6f, 0.4f, 5.9f, 7.3f, 7.8f, 10.2f);
                mPath.rCubicTo(1.3f, 2.0f, 3.2f, 3.7f, 3.3f, 6.2f);
                mPath.rCubicTo(0.1f, 1.8f, -1.3f, 3.2f, -2.0f, 4.8f);
                mPath.rCubicTo(4.9f, 2.6f, 5.6f, 3.8f, 10.1f, -0.5f);
                mPath.rCubicTo(0.7f, 1.5f, 1.7f, 3.4f, 3.4f, 4.0f);
                mPath.rCubicTo(1.3f, 0.5f, 2.4f, -0.2f, 3.6f, 0.6f);
                mPath.rCubicTo(1.1f, 0.8f, 2.2f, 3.3f, 3.0f, 4.5f);
                mPath.rCubicTo(1.2f, 1.8f, 2.5f, 2.7f, 4.3f, 3.8f);
                mPath.rLineTo(1.4f, -5.3f);
                mPath.rCubicTo(5.3f, 1.5f, 4.6f, 3.6f, 7.8f, 7.2f);
                mPath.rCubicTo(4.7f, 5.4f, 3.2f, 4.4f, 6.6f, 9.1f);
                mPath.rCubicTo(1.0f, 1.4f, 3.5f, 4.4f, 4.0f, 5.8f);
                mPath.rCubicTo(0.7f, 2.1f, -0.4f, 3.9f, 0.0f, 5.8f);
                mPath.rCubicTo(0.4f, 1.6f, 1.8f, 2.8f, 2.6f, 4.3f);
                mPath.rLineTo(1.3f, 2.8f);
                mPath.rCubicTo(1.0f, 1.8f, 2.9f, 2.8f, 4.3f, 4.4f);
                mPath.rCubicTo(3.4f, 4.0f, 4.0f, 6.8f, 4.1f, 12.0f);
                mPath.rCubicTo(6.1f, -2.7f, 5.8f, -5.0f, 7.9f, -10.6f);
                mPath.rLineTo(4.1f, -11.0f);
                mPath.rLineTo(3.4f, -6.2f);
                mPath.rCubicTo(6.8f, 2.0f, 5.0f, 3.4f, 8.6f, 4.9f);
                mPath.rCubicTo(2.3f, 0.9f, 8.2f, 1.3f, 10.6f, 0.6f);
                mPath.rLineTo(3.4f, -1.4f);
                mPath.rLineTo(4.3f, -1.2f);
                mPath.rCubicTo(-0.5f, -1.5f, -1.3f, -4.5f, -2.0f, -5.8f);
                mPath.rCubicTo(-1.4f, -2.4f, -3.9f, -4.4f, -2.6f, -7.6f);
                mPath.rCubicTo(0.9f, -2.0f, 4.1f, -1.9f, 6.0f, -2.2f);
                mPath.rCubicTo(2.9f, -0.6f, 6.4f, -2.3f, 8.6f, -4.3f);
                mPath.rCubicTo(3.2f, -2.9f, 1.0f, -4.5f, 2.7f, -7.0f);
                mPath.rCubicTo(2.3f, -3.4f, 4.7f, -1.5f, 6.3f, -3.5f);
                mPath.rCubicTo(1.5f, -2.0f, 1.1f, -6.0f, 1.1f, -8.5f);
                mPath.rCubicTo(0.0f, -4.3f, 0.4f, -4.3f, 1.0f, -8.2f);
                mPath.rCubicTo(1.6f, 0.7f, 3.8f, 1.5f, 5.1f, 2.6f);
                mPath.rCubicTo(2.9f, 2.6f, 3.3f, 6.2f, 7.9f, 4.6f);
                mPath.rLineTo(0.0f, -1.0f);
                mPath.rLineTo(-2.9f, -1.0f);
                mPath.rCubicTo(1.6f, -1.6f, 3.3f, -3.4f, 5.3f, -4.5f);
                mPath.rCubicTo(1.7f, -1.0f, 3.5f, -1.0f, 4.8f, -2.7f);
                mPath.rCubicTo(1.7f, -2.7f, 0.4f, -6.5f, 0.0f, -9.5f);
                mPath.rLineTo(0.0f, -5.3f);
                mPath.rLineTo(-8.1f, 1.0f);
                mPath.rLineTo(-9.1f, -5.1f);
                mPath.rLineTo(-4.2f, -1.7f);
                mPath.rLineTo(-2.5f, 2.0f);
                mPath.rLineTo(-1.9f, -3.4f);
                mPath.rLineTo(-1.0f, 0.0f);
                mPath.rCubicTo(-2.6f, 4.3f, -5.0f, 4.4f, -7.5f, 6.9f);
                mPath.rCubicTo(-2.2f, 2.2f, -3.3f, 5.4f, -3.5f, 8.5f);
                mPath.rLineTo(-5.3f, 1.0f);
                mPath.rCubicTo(-2.4f, -6.6f, -8.3f, -11.1f, -9.7f, -13.4f);
                mPath.rCubicTo(-0.8f, -1.4f, -1.1f, -3.7f, -1.4f, -5.3f);
                mPath.rLineTo(-4.3f, -0.5f);
                mPath.rLineTo(-0.6f, 4.3f);
                mPath.rCubicTo(-0.2f, 1.1f, -0.5f, 1.8f, -1.0f, 2.9f);
                mPath.rCubicTo(-3.3f, 6.4f, -8.2f, 0.0f, -9.9f, -3.8f);
                mPath.rCubicTo(-0.4f, -0.9f, -1.1f, -2.8f, -1.8f, -3.4f);
                mPath.rCubicTo(-1.7f, -1.3f, -6.5f, 0.7f, -9.0f, -2.0f);
                mPath.rCubicTo(-2.9f, -3.3f, -1.6f, -9.1f, -8.0f, -10.7f);
                mPath.rCubicTo(-1.0f, -0.1f, -1.9f, -0.2f, -2.9f, 0.0f);
                mPath.rCubicTo(-3.9f, 0.2f, -4.2f, 2.6f, -7.7f, 3.0f);
                mPath.rCubicTo(-2.0f, 0.2f, -6.0f, -0.8f, -7.3f, -2.4f);
                mPath.rCubicTo(-0.6f, -0.7f, -1.4f, -2.8f, -1.8f, -3.7f);
                mPath.rCubicTo(-1.4f, 0.3f, -2.6f, 0.5f, -3.8f, 1.3f);
                mPath.rCubicTo(-1.7f, 1.1f, -3.5f, 3.2f, -5.8f, 2.6f);
                mPath.rCubicTo(-1.4f, -0.4f, -2.8f, -2.0f, -3.8f, -3.0f);
                mPath.rCubicTo(-1.4f, 1.2f, -2.8f, 3.3f, -4.4f, 3.8f);
                mPath.rCubicTo(-2.3f, 0.8f, -3.9f, -0.7f, -5.7f, -1.9f);
                mPath.rCubicTo(-2.2f, -1.5f, -4.5f, -2.4f, -5.7f, -4.8f);
                mPath.rCubicTo(-1.4f, -2.8f, -2.8f, -10.3f, -5.8f, -11.3f);
                mPath.rCubicTo(-1.2f, -0.4f, -3.5f, 0.8f, -4.8f, 1.2f);
                mPath.rCubicTo(-1.5f, 0.5f, -5.4f, 1.2f, -6.5f, 2.0f);
                mPath.cubicTo(972.80005f, 238.5f, 972.4f, 239.8f, 971.5f, 240.70001f);
                mPath.lineTo(971.5f, 240.70001f);
                mPath.close();
                mPath.moveTo(971.5f, 240.70001f);
                break;
            case 18:
                mPath.moveTo(1004.80005f, 307.5f);
                mPath.rCubicTo(-4.5f, 1.2f, -3.3f, -0.3f, -7.2f, -3.4f);
                mPath.rCubicTo(-3.6f, 4.8f, -0.7f, 5.4f, -2.8f, 10.1f);
                mPath.rCubicTo(-1.5f, 3.5f, -3.0f, 2.7f, -4.8f, 4.2f);
                mPath.rCubicTo(-1.7f, 1.5f, -1.5f, 3.5f, -3.6f, 5.1f);
                mPath.rCubicTo(-2.8f, 2.2f, -8.5f, 0.3f, -11.9f, 0.3f);
                mPath.rCubicTo(-0.2f, 1.7f, -0.4f, 3.7f, -2.0f, 4.7f);
                mPath.rCubicTo(-1.1f, 0.7f, -2.3f, 0.4f, -3.7f, 1.3f);
                mPath.rCubicTo(-1.5f, 1.1f, -3.0f, 3.7f, -4.4f, 4.7f);
                mPath.rCubicTo(-1.7f, 1.2f, -2.8f, 0.3f, -4.7f, 1.5f);
                mPath.rLineTo(-4.8f, 4.2f);
                mPath.rCubicTo(-3.7f, 2.8f, -8.1f, 4.7f, -11.4f, 8.1f);
                mPath.rCubicTo(-1.6f, 1.6f, -4.8f, 7.3f, -5.8f, 9.5f);
                mPath.rCubicTo(-0.9f, -0.9f, -2.4f, -2.4f, -3.1f, -3.4f);
                mPath.rCubicTo(-0.9f, -1.4f, -0.6f, -2.3f, -1.9f, -3.8f);
                mPath.rCubicTo(-0.8f, -1.0f, -2.1f, -2.0f, -3.2f, -2.7f);
                mPath.rLineTo(-2.4f, -1.5f);
                mPath.rCubicTo(-2.1f, -1.1f, -4.8f, -0.2f, -5.0f, 2.3f);
                mPath.rCubicTo(-0.1f, 1.3f, 1.1f, 2.9f, 1.2f, 7.7f);
                mPath.rCubicTo(-0.1f, 1.4f, -0.2f, 5.1f, 0.0f, 6.2f);
                mPath.rCubicTo(0.6f, 2.1f, 2.3f, 3.1f, 2.1f, 4.8f);
                mPath.rCubicTo(-0.1f, 1.1f, -1.7f, 3.2f, -2.2f, 4.3f);
                mPath.rLineTo(-3.0f, 7.7f);
                mPath.rCubicTo(-0.8f, 1.7f, -2.0f, 3.4f, -1.4f, 5.3f);
                mPath.rCubicTo(0.9f, 3.3f, 2.8f, 3.8f, 5.4f, 5.0f);
                mPath.rCubicTo(1.1f, 0.5f, 1.7f, 0.9f, 2.9f, 1.3f);
                mPath.rCubicTo(1.2f, 0.4f, 2.6f, 0.4f, 3.7f, 1.2f);
                mPath.rCubicTo(1.2f, 0.9f, 1.4f, 2.3f, 2.7f, 3.9f);
                mPath.rLineTo(3.0f, 3.0f);
                mPath.rLineTo(4.0f, 4.8f);
                mPath.rCubicTo(3.5f, -2.2f, 8.5f, -5.9f, 10.4f, -9.6f);
                mPath.rLineTo(1.8f, -4.8f);
                mPath.rCubicTo(1.0f, -1.9f, 2.2f, -2.6f, 3.1f, -4.8f);
                mPath.rCubicTo(1.0f, -2.5f, 1.1f, -4.5f, 3.5f, -6.4f);
                mPath.rCubicTo(1.1f, -0.9f, 3.6f, -2.1f, 5.0f, -2.3f);
                mPath.rCubicTo(1.8f, -0.1f, 3.0f, 0.6f, 5.1f, 0.0f);
                mPath.rCubicTo(1.2f, -0.5f, 3.6f, -2.2f, 4.6f, -1.9f);
                mPath.rCubicTo(1.0f, 0.2f, 2.3f, 2.2f, 2.9f, 3.0f);
                mPath.rCubicTo(2.2f, 3.0f, 5.1f, 5.7f, 5.0f, 9.6f);
                mPath.rCubicTo(-0.1f, 2.5f, -4.2f, 10.5f, -5.9f, 12.4f);
                mPath.rCubicTo(-1.3f, 1.5f, -2.7f, 2.0f, -3.7f, 4.0f);
                mPath.rCubicTo(-1.4f, 2.6f, -0.4f, 3.8f, -0.5f, 6.2f);
                mPath.rCubicTo(-0.1f, 1.8f, -0.9f, 3.5f, -1.4f, 5.3f);
                mPath.rLineTo(8.6f, -1.0f);
                mPath.rCubicTo(-0.9f, 1.2f, -2.0f, 2.4f, -2.5f, 3.8f);
                mPath.rCubicTo(-1.2f, 3.3f, 0.1f, 5.1f, -4.7f, 5.3f);
                mPath.rLineTo(-1.0f, 6.7f);
                mPath.rLineTo(3.7f, -0.5f);
                mPath.rLineTo(3.6f, -3.8f);
                mPath.rLineTo(5.9f, -4.4f);
                mPath.rLineTo(3.1f, -6.6f);
                mPath.rLineTo(5.4f, -4.9f);
                mPath.rLineTo(3.0f, -3.2f);
                mPath.rLineTo(7.7f, -3.7f);
                mPath.rLineTo(1.4f, -4.6f);
                mPath.rCubicTo(3.6f, 0.0f, 12.8f, -1.7f, 15.8f, -3.4f);
                mPath.rCubicTo(1.2f, -0.7f, 2.4f, -2.1f, 3.1f, -3.3f);
                mPath.rCubicTo(2.3f, -3.5f, 2.0f, -8.7f, 6.2f, -12.8f);
                mPath.rCubicTo(1.3f, -1.3f, 2.6f, -1.4f, 3.8f, -2.7f);
                mPath.rCubicTo(1.2f, -1.3f, 1.7f, -3.2f, 3.0f, -4.4f);
                mPath.rCubicTo(1.2f, -1.1f, 2.9f, -1.4f, 4.0f, -2.2f);
                mPath.rCubicTo(1.6f, -1.2f, 4.4f, -6.5f, 4.4f, -8.6f);
                mPath.rCubicTo(0.0f, -3.1f, -2.0f, -8.1f, -4.0f, -10.4f);
                mPath.rLineTo(-3.0f, -2.6f);
                mPath.rCubicTo(-1.2f, -1.2f, -4.2f, -5.5f, -4.7f, -7.1f);
                mPath.rCubicTo(-0.8f, -2.0f, 0.3f, -4.9f, -0.4f, -7.2f);
                mPath.rCubicTo(-0.5f, -1.5f, -3.0f, -4.8f, -4.1f, -6.2f);
                mPath.rLineTo(-6.7f, -9.1f);
                mPath.rCubicTo(-0.9f, -1.1f, -2.5f, -3.6f, -3.6f, -4.4f);
                mPath.rCubicTo(-1.1f, -0.8f, -2.4f, -1.1f, -3.7f, -1.4f);
                mPath.rLineTo(-2.4f, 4.8f);
                mPath.lineTo(1004.80005f, 307.5f);
                mPath.lineTo(1004.80005f, 307.5f);
                mPath.close();
                mPath.moveTo(1004.80005f, 307.5f);
                break;
            case 19:
                mPath.moveTo(856.0f, 875.39996f);
                mPath.rLineTo(2.4f, 1.2f);
                mPath.rCubicTo(5.0f, 1.5f, 2.8f, -5.2f, 2.4f, -7.5f);
                mPath.cubicTo(857.4f, 869.5f, 856.69995f, 872.5f, 856.0f, 875.39996f);
                mPath.close();
                mPath.moveTo(856.0f, 875.39996f);
                break;
        }
    }

    private void renderByProvince3(int index) {
        switch (index) {
            case 20:
                mPath.moveTo(899.80005f, 81.4f);
                mPath.rCubicTo(-2.8f, 4.9f, -3.8f, 2.2f, -3.0f, 8.2f);
                mPath.rCubicTo(2.4f, -0.3f, 7.9f, -1.2f, 9.8f, 0.8f);
                mPath.rCubicTo(1.2f, 1.2f, 0.7f, 4.8f, 0.8f, 6.4f);
                mPath.rLineTo(0.4f, 3.4f);
                mPath.rCubicTo(0.3f, 5.1f, -1.3f, 5.6f, -4.0f, 9.1f);
                mPath.rLineTo(-3.0f, 4.8f);
                mPath.rCubicTo(-2.0f, 3.5f, -2.4f, 7.3f, -3.6f, 11.0f);
                mPath.rCubicTo(-1.1f, 3.5f, -1.7f, 2.8f, -2.9f, 8.2f);
                mPath.rCubicTo(-0.4f, 1.6f, -0.6f, 3.3f, -1.2f, 4.8f);
                mPath.rCubicTo(-1.5f, 3.6f, -5.0f, 7.1f, 0.5f, 9.1f);
                mPath.rLineTo(-1.7f, 6.6f);
                mPath.rLineTo(-8.8f, 4.7f);
                mPath.rLineTo(-3.5f, 4.1f);
                mPath.rLineTo(-9.0f, 7.2f);
                mPath.rLineTo(-5.3f, -0.8f);
                mPath.rLineTo(-3.8f, -0.3f);
                mPath.rLineTo(-9.6f, -3.7f);
                mPath.rLineTo(-7.0f, 25.4f);
                mPath.rLineTo(-4.2f, 7.7f);
                mPath.rLineTo(0.8f, 7.2f);
                mPath.rLineTo(-3.1f, 9.6f);
                mPath.rCubicTo(1.4f, 0.8f, 5.4f, 3.5f, 6.7f, 3.4f);
                mPath.rCubicTo(1.5f, -0.2f, 2.9f, -2.2f, 4.3f, -3.1f);
                mPath.rCubicTo(1.6f, -1.0f, 2.6f, -0.6f, 4.3f, -1.1f);
                mPath.rCubicTo(1.9f, -0.6f, 2.4f, -1.5f, 4.8f, -1.6f);
                mPath.rCubicTo(5.5f, -0.1f, 6.7f, 3.3f, 11.0f, 5.2f);
                mPath.rCubicTo(1.0f, -2.3f, 4.2f, -8.4f, 5.9f, -9.9f);
                mPath.rCubicTo(1.3f, -1.2f, 2.1f, -1.0f, 3.7f, -1.3f);
                mPath.rCubicTo(3.2f, -0.6f, 5.4f, -1.3f, 8.6f, 0.4f);
                mPath.rCubicTo(2.4f, 1.2f, 2.6f, 3.4f, 6.3f, 5.7f);
                mPath.rLineTo(6.2f, 3.6f);
                mPath.rLineTo(4.8f, 3.8f);
                mPath.rCubicTo(2.5f, 1.7f, 3.2f, 1.2f, 5.4f, 4.0f);
                mPath.rCubicTo(3.1f, 3.8f, 3.7f, 7.5f, 5.1f, 12.0f);
                mPath.rCubicTo(-4.0f, 1.2f, -5.2f, 2.8f, -10.1f, 2.9f);
                mPath.rCubicTo(-4.4f, 0.1f, -5.1f, -0.7f, -7.7f, -0.9f);
                mPath.rLineTo(-8.2f, 1.0f);
                mPath.rCubicTo(-4.1f, 0.6f, -7.9f, 4.7f, -9.1f, 5.2f);
                mPath.rCubicTo(-1.5f, 0.6f, -2.4f, -0.3f, -3.8f, -0.5f);
                mPath.rCubicTo(-1.2f, -0.2f, -2.7f, 0.3f, -3.8f, 0.5f);
                mPath.rLineTo(0.0f, 5.8f);
                mPath.rCubicTo(-2.0f, 0.2f, -9.6f, 1.1f, -11.0f, 2.0f);
                mPath.rCubicTo(-2.0f, 1.4f, -5.3f, 7.7f, -6.0f, 10.0f);
                mPath.rCubicTo(-0.5f, 1.9f, 0.0f, 3.3f, -0.8f, 4.8f);
                mPath.rCubicTo(-1.1f, 2.2f, -3.9f, 3.9f, -5.8f, 5.4f);
                mPath.rCubicTo(-1.7f, 1.4f, -4.1f, 4.2f, -5.8f, 5.2f);
                mPath.rCubicTo(-1.1f, 0.6f, -7.1f, 1.5f, -8.6f, 1.7f);
                mPath.rCubicTo(-2.4f, 0.2f, -3.5f, -1.0f, -5.3f, 0.0f);
                mPath.rCubicTo(-2.1f, 1.3f, -3.8f, 5.3f, -5.4f, 7.4f);
                mPath.rCubicTo(-4.2f, 5.6f, -4.7f, 4.0f, -8.0f, 6.8f);
                mPath.rCubicTo(-1.2f, 1.0f, -3.0f, 3.1f, -4.3f, 3.7f);
                mPath.rCubicTo(-1.0f, 0.3f, -3.6f, 0.0f, -4.8f, 0.0f);
                mPath.rCubicTo(-2.0f, 0.0f, -9.5f, -0.7f, -11.0f, -1.4f);
                mPath.rCubicTo(-2.6f, -1.3f, -4.0f, -4.2f, -9.6f, -4.3f);
                mPath.rCubicTo(-1.8f, 0.0f, -3.7f, -0.2f, -5.2f, 0.9f);
                mPath.rCubicTo(-1.5f, 1.0f, -2.2f, 2.8f, -3.0f, 4.4f);
                mPath.rCubicTo(-2.0f, 4.0f, -4.9f, 13.2f, -2.6f, 17.3f);
                mPath.rCubicTo(2.0f, 3.5f, 5.5f, 5.3f, 6.8f, 6.9f);
                mPath.rCubicTo(1.1f, 1.6f, 1.4f, 4.4f, 0.0f, 6.0f);
                mPath.rLineTo(-5.0f, 5.0f);
                mPath.rCubicTo(-2.8f, 1.8f, -6.2f, 2.5f, -9.0f, 5.3f);
                mPath.rCubicTo(-3.3f, 3.4f, -5.4f, 8.1f, -7.4f, 10.5f);
                mPath.rCubicTo(-1.4f, 1.6f, -6.3f, 6.6f, -8.1f, 7.5f);
                mPath.rCubicTo(-2.0f, 1.0f, -3.0f, 0.2f, -5.3f, 1.4f);
                mPath.rCubicTo(-2.8f, 1.4f, -5.1f, 3.8f, -8.2f, 4.7f);
                mPath.rCubicTo(-1.6f, 0.5f, -4.9f, 0.3f, -6.7f, 0.3f);
                mPath.rLineTo(-6.2f, 0.7f);
                mPath.rLineTo(-4.3f, -0.5f);
                mPath.rLineTo(-11.0f, 1.7f);
                mPath.rCubicTo(-3.0f, 0.2f, -4.9f, -0.9f, -6.7f, -0.6f);
                mPath.rLineTo(-8.2f, 3.1f);
                mPath.rCubicTo(-2.3f, 0.7f, -3.6f, 0.2f, -5.3f, 0.7f);
                mPath.rLineTo(-8.6f, 4.4f);
                mPath.rLineTo(-14.9f, 7.4f);
                mPath.rCubicTo(-4.1f, 2.0f, -7.8f, 4.1f, -12.5f, 4.2f);
                mPath.rLineTo(-5.3f, 0.0f);
                mPath.rLineTo(0.0f, -5.3f);
                mPath.rLineTo(-6.7f, 1.3f);
                mPath.rCubicTo(-3.9f, 0.6f, -10.3f, -0.1f, -13.9f, -1.6f);
                mPath.rLineTo(-12.0f, -7.0f);
                mPath.rCubicTo(-2.4f, -0.8f, -7.0f, 0.0f, -11.0f, -2.0f);
                mPath.rCubicTo(-2.9f, -1.5f, -2.5f, -4.4f, -5.3f, -6.4f);
                mPath.rCubicTo(-2.2f, -1.5f, -5.6f, -1.8f, -8.1f, -2.7f);
                mPath.rCubicTo(-3.3f, -1.2f, -4.4f, -2.4f, -8.6f, -3.3f);
                mPath.rCubicTo(-2.2f, -0.5f, -6.3f, -0.3f, -8.6f, -0.3f);
                mPath.rLineTo(-4.3f, 0.3f);
                mPath.rCubicTo(-1.6f, 0.1f, -2.4f, -0.3f, -4.3f, 0.0f);
                mPath.rCubicTo(-3.5f, 0.3f, -4.5f, 1.5f, -9.1f, 1.1f);
                mPath.rLineTo(-4.3f, -0.8f);
                mPath.rLineTo(-9.6f, -0.8f);
                mPath.rLineTo(-5.8f, -1.5f);
                mPath.rLineTo(-5.8f, -0.6f);
                mPath.rLineTo(-15.4f, -3.9f);
                mPath.rLineTo(6.6f, 19.2f);
                mPath.rLineTo(2.7f, 8.6f);
                mPath.rLineTo(-2.5f, 8.6f);
                mPath.rLineTo(2.8f, 3.8f);
                mPath.rLineTo(5.6f, 6.7f);
                mPath.rLineTo(2.4f, 3.4f);
                mPath.rLineTo(-1.7f, 7.7f);
                mPath.rLineTo(3.4f, 0.0f);
                mPath.rCubicTo(5.2f, 0.0f, 4.3f, -1.8f, 7.7f, -4.7f);
                mPath.rCubicTo(2.2f, -1.9f, 12.0f, -4.4f, 14.9f, -4.2f);
                mPath.rCubicTo(1.2f, 0.1f, 3.1f, 0.8f, 4.3f, 1.2f);
                mPath.rCubicTo(1.2f, 0.4f, 2.8f, 0.8f, 3.7f, 1.7f);
                mPath.rCubicTo(2.0f, 1.8f, 2.5f, 5.7f, 1.2f, 7.9f);
                mPath.rLineTo(-4.0f, 6.2f);
                mPath.rCubicTo(-3.3f, 5.2f, -6.7f, 2.6f, -9.6f, 9.1f);
                mPath.rCubicTo(1.5f, 0.0f, 3.5f, -0.2f, 4.8f, 0.5f);
                mPath.rCubicTo(1.6f, 0.8f, 3.0f, 2.8f, 4.8f, 3.9f);
                mPath.rCubicTo(1.3f, 0.8f, 2.9f, 0.9f, 4.0f, 2.1f);
                mPath.rCubicTo(1.4f, 1.5f, 0.9f, 3.0f, 3.7f, 5.2f);
                mPath.rLineTo(7.8f, 4.5f);
                mPath.rCubicTo(1.3f, 1.6f, -0.7f, 3.9f, 0.6f, 6.4f);
                mPath.rCubicTo(1.3f, 2.7f, 6.3f, 5.4f, 8.9f, 7.2f);
                mPath.rCubicTo(3.9f, 2.7f, 8.3f, 4.4f, 12.0f, 0.4f);
                mPath.rCubicTo(0.8f, -0.9f, 1.5f, -1.6f, 1.6f, -2.9f);
                mPath.rCubicTo(0.0f, -1.2f, -1.0f, -3.7f, -1.5f, -4.8f);
                mPath.rLineTo(3.8f, -1.7f);
                mPath.rCubicTo(1.5f, -0.4f, 7.1f, -0.4f, 8.6f, 0.0f);
                mPath.rCubicTo(2.0f, 0.3f, 5.4f, 2.2f, 7.2f, 1.9f);
                mPath.rCubicTo(2.7f, -0.4f, 5.4f, -4.2f, 7.7f, -5.6f);
                mPath.rLineTo(11.0f, -3.3f);
                mPath.rCubicTo(0.5f, 2.0f, 1.2f, 3.9f, 2.2f, 5.8f);
                mPath.rCubicTo(0.7f, 1.3f, 1.9f, 2.7f, 1.5f, 4.3f);
                mPath.rCubicTo(-0.2f, 1.0f, -1.8f, 3.2f, -2.5f, 4.3f);
                mPath.rCubicTo(-1.3f, 2.4f, -1.9f, 5.0f, -3.7f, 7.2f);
                mPath.rCubicTo(-1.6f, 2.0f, -6.0f, 5.4f, -6.4f, 7.7f);
                mPath.rCubicTo(-0.2f, 1.3f, 0.4f, 3.1f, 0.8f, 4.3f);
                mPath.rCubicTo(-3.3f, 1.4f, -4.0f, 1.6f, -3.4f, 5.3f);
                mPath.rCubicTo(0.1f, 0.9f, 0.2f, 1.8f, 0.9f, 2.5f);
                mPath.rCubicTo(1.0f, 0.9f, 2.5f, 0.5f, 4.3f, 2.0f);
                mPath.rCubicTo(1.5f, 1.3f, 2.7f, 3.5f, 4.5f, 4.7f);
                mPath.rCubicTo(1.3f, 0.9f, 6.6f, 3.4f, 8.1f, 3.3f);
                mPath.rCubicTo(1.4f, -0.1f, 2.4f, -1.1f, 4.8f, -1.4f);
                mPath.rCubicTo(2.7f, -0.3f, 5.5f, -0.2f, 8.2f, -1.2f);
                mPath.rLineTo(5.3f, -2.7f);
                mPath.rCubicTo(3.9f, -1.5f, 8.3f, -0.2f, 9.8f, -3.9f);
                mPath.rCubicTo(0.4f, -1.0f, 0.3f, -3.1f, 0.3f, -4.3f);
                mPath.rCubicTo(0.1f, -5.3f, 1.9f, -4.0f, 1.9f, -10.6f);
                mPath.rCubicTo(0.0f, -6.6f, 1.2f, -13.6f, 5.9f, -18.7f);
                mPath.rCubicTo(3.6f, -3.9f, 9.8f, -8.6f, 13.2f, -2.0f);
                mPath.rCubicTo(0.4f, 0.7f, 0.8f, 1.7f, 1.0f, 2.4f);
                mPath.rCubicTo(0.3f, 1.6f, -0.9f, 4.2f, -1.5f, 5.8f);
                mPath.rCubicTo(-2.5f, 6.7f, -2.0f, 3.5f, -3.4f, 11.0f);
                mPath.rCubicTo(-0.2f, 1.2f, -0.9f, 3.5f, -0.4f, 4.6f);
                mPath.rCubicTo(1.5f, 3.4f, 7.5f, 2.0f, 10.8f, 3.4f);
                mPath.rCubicTo(2.4f, 1.1f, 3.3f, 2.9f, 5.8f, 4.2f);
                mPath.rLineTo(9.1f, 3.3f);
                mPath.rCubicTo(2.4f, 1.2f, 2.7f, 3.3f, 4.0f, 4.1f);
                mPath.rCubicTo(1.3f, 0.7f, 4.4f, -0.3f, 6.1f, -0.5f);
                mPath.rLineTo(3.7f, 0.0f);
                mPath.rCubicTo(2.0f, -0.7f, 1.9f, -4.0f, 2.7f, -5.7f);
                mPath.rCubicTo(1.0f, -1.9f, 2.7f, -2.4f, 4.6f, -2.9f);
                mPath.rCubicTo(-0.4f, -1.9f, -1.4f, -3.8f, -1.3f, -5.8f);
                mPath.rCubicTo(0.2f, -3.7f, 2.8f, -6.6f, 4.6f, -9.6f);
                mPath.rCubicTo(1.2f, -2.0f, 2.4f, -4.6f, 4.0f, -6.1f);
                mPath.rCubicTo(1.6f, -1.6f, 3.0f, -1.8f, 5.1f, -4.0f);
                mPath.rLineTo(6.0f, -6.7f);
                mPath.rCubicTo(0.9f, -1.3f, 1.5f, -3.0f, 2.8f, -3.9f);
                mPath.rCubicTo(1.0f, -0.6f, 3.8f, -1.0f, 5.2f, -1.4f);
                mPath.rLineTo(2.4f, 3.8f);
                mPath.rLineTo(8.6f, -8.2f);
                mPath.rLineTo(1.4f, 4.3f);
                mPath.rCubicTo(1.4f, -0.4f, 2.9f, -0.9f, 3.8f, -2.1f);
                mPath.rCubicTo(0.8f, -1.1f, 1.1f, -2.8f, 2.2f, -3.7f);
                mPath.rCubicTo(1.8f, -1.5f, 6.6f, -1.4f, 8.9f, -1.4f);
                mPath.rCubicTo(0.6f, -4.2f, 1.9f, -7.2f, 3.6f, -11.0f);
                mPath.rCubicTo(1.0f, -2.4f, 1.6f, -4.2f, 4.1f, -5.4f);
                mPath.rCubicTo(3.4f, -1.5f, 4.3f, 0.7f, 6.2f, 0.0f);
                mPath.rCubicTo(1.0f, -0.4f, 2.1f, -1.9f, 3.0f, -2.6f);
                mPath.rCubicTo(1.0f, -0.8f, 3.9f, -2.2f, 5.2f, -2.5f);
                mPath.rCubicTo(2.7f, -0.7f, 4.4f, 1.1f, 6.2f, 0.8f);
                mPath.rCubicTo(1.3f, -0.2f, 2.3f, -1.4f, 3.4f, -2.2f);
                mPath.rCubicTo(2.4f, -1.8f, 5.7f, -2.8f, 6.7f, -4.2f);
                mPath.rCubicTo(0.4f, -0.6f, 0.6f, -1.5f, 0.7f, -2.2f);
                mPath.rCubicTo(0.9f, -5.0f, -3.0f, -6.1f, -4.6f, -10.1f);
                mPath.rCubicTo(-0.7f, -1.8f, -0.4f, -9.2f, -0.4f, -11.5f);
                mPath.rLineTo(4.3f, -0.5f);
                mPath.rCubicTo(0.0f, -4.7f, 0.8f, -9.1f, 3.7f, -13.0f);
                mPath.rCubicTo(1.3f, -1.7f, 3.2f, -3.8f, 5.4f, -2.6f);
                mPath.rCubicTo(3.8f, 2.0f, 2.4f, 5.3f, 4.3f, 8.3f);
                mPath.rCubicTo(1.7f, 2.8f, 3.4f, 2.6f, 6.3f, 3.4f);
                mPath.rCubicTo(2.1f, -3.2f, 7.1f, -9.6f, 11.0f, -10.5f);
                mPath.rCubicTo(1.9f, -0.4f, 3.8f, 1.2f, 5.8f, 0.9f);
                mPath.rCubicTo(2.9f, -0.5f, 2.1f, -2.4f, 8.2f, -2.4f);
                mPath.rCubicTo(0.6f, -3.1f, 3.4f, -11.2f, 5.5f, -13.3f);
                mPath.rCubicTo(1.0f, -1.0f, 2.9f, -1.9f, 4.1f, -2.7f);
                mPath.rCubicTo(2.1f, -1.4f, 4.4f, -3.5f, 7.2f, -2.9f);
                mPath.rCubicTo(4.9f, 1.1f, 4.6f, 5.8f, 6.9f, 8.0f);
                mPath.rCubicTo(1.9f, 1.8f, 4.4f, 2.1f, 6.1f, 4.6f);
                mPath.rCubicTo(3.1f, 4.7f, 0.1f, 6.4f, 0.3f, 9.6f);
                mPath.rCubicTo(0.1f, 1.6f, 2.0f, 4.4f, 3.2f, 5.4f);
                mPath.rCubicTo(2.7f, 2.0f, 4.9f, 0.7f, 7.5f, 0.6f);
                mPath.rCubicTo(3.7f, -0.1f, 9.0f, 2.4f, 10.9f, -3.6f);
                mPath.rCubicTo(0.7f, -2.3f, -1.4f, -3.7f, -2.0f, -6.2f);
                mPath.rLineTo(-0.2f, -8.2f);
                mPath.rCubicTo(-0.2f, -2.1f, -1.0f, -4.3f, -1.9f, -6.2f);
                mPath.rLineTo(3.8f, -2.9f);
                mPath.rCubicTo(2.8f, 2.1f, 4.7f, 2.9f, 7.1f, 5.8f);
                mPath.rCubicTo(2.9f, 3.4f, 0.9f, 4.0f, 5.9f, 7.2f);
                mPath.rCubicTo(1.7f, -3.3f, 2.6f, -6.3f, 5.3f, -9.1f);
                mPath.rCubicTo(1.3f, -1.3f, 5.6f, -4.6f, 7.2f, -5.5f);
                mPath.rLineTo(4.2f, -2.1f);
                mPath.rCubicTo(3.5f, -2.7f, 3.8f, -6.6f, 9.3f, -5.4f);
                mPath.rLineTo(4.8f, -6.1f);
                mPath.rLineTo(4.1f, -1.6f);
                mPath.rLineTo(2.2f, -4.3f);
                mPath.rCubicTo(3.1f, 1.0f, 10.2f, 2.0f, 12.6f, -0.8f);
                mPath.rCubicTo(1.0f, -1.2f, 1.2f, -3.6f, 2.2f, -4.8f);
                mPath.rCubicTo(1.2f, -1.4f, 2.9f, -1.0f, 4.2f, -2.1f);
                mPath.rCubicTo(2.7f, -2.2f, 1.7f, -6.3f, 1.2f, -9.2f);
                mPath.rLineTo(-7.7f, -2.9f);
                mPath.rCubicTo(0.8f, -0.8f, 1.9f, -1.8f, 2.4f, -2.9f);
                mPath.rCubicTo(1.7f, -3.7f, -2.9f, -7.6f, -4.2f, -10.6f);
                mPath.rCubicTo(-1.2f, -2.7f, -2.3f, -6.9f, -5.8f, -7.4f);
                mPath.rCubicTo(-3.7f, -0.5f, -5.2f, 3.0f, -7.7f, 4.8f);
                mPath.rCubicTo(-2.2f, 1.6f, -4.2f, 1.2f, -6.7f, 1.2f);
                mPath.rCubicTo(0.0f, -1.4f, 0.2f, -3.5f, -0.5f, -4.8f);
                mPath.rCubicTo(-0.8f, -1.5f, -2.2f, -1.9f, -2.7f, -3.9f);
                mPath.rCubicTo(-0.3f, -1.2f, 0.1f, -2.2f, -0.6f, -4.3f);
                mPath.rCubicTo(-0.6f, -1.6f, -2.0f, -4.1f, -2.0f, -5.8f);
                mPath.rCubicTo(0.0f, -2.1f, 1.6f, -3.9f, 1.0f, -6.2f);
                mPath.rCubicTo(-0.7f, -2.6f, -2.5f, -3.5f, -4.2f, -5.1f);
                mPath.rCubicTo(-1.9f, -1.8f, -2.4f, -3.7f, -3.6f, -4.5f);
                mPath.rCubicTo(-1.1f, -0.7f, -3.4f, -0.5f, -4.6f, -0.5f);
                mPath.rCubicTo(2.8f, -3.5f, 5.5f, -7.1f, 10.1f, -3.8f);
                mPath.rLineTo(3.2f, -2.1f);
                mPath.rLineTo(5.5f, 2.6f);
                mPath.rCubicTo(0.7f, -1.3f, 1.3f, -2.2f, 1.2f, -3.8f);
                mPath.rCubicTo(0.1f, -1.1f, -0.5f, -2.6f, 0.0f, -3.6f);
                mPath.rCubicTo(0.6f, -1.5f, 4.4f, -2.4f, 4.5f, -5.5f);
                mPath.rCubicTo(0.1f, -2.4f, -3.4f, -4.7f, -3.1f, -6.7f);
                mPath.rCubicTo(0.2f, -1.2f, 2.6f, -2.9f, 3.5f, -3.9f);
                mPath.rCubicTo(2.1f, -2.1f, 2.7f, -3.4f, 3.4f, -6.2f);
                mPath.rLineTo(-3.4f, -1.0f);
                mPath.rLineTo(-1.1f, 2.3f);
                mPath.rCubicTo(-0.7f, 1.0f, -1.5f, 1.6f, -2.7f, 1.8f);
                mPath.rCubicTo(-3.5f, 0.7f, -3.2f, -2.3f, -6.7f, -5.6f);
                mPath.rCubicTo(-3.2f, -3.0f, -5.4f, -2.0f, -5.9f, -7.2f);
                mPath.rCubicTo(-0.5f, -6.3f, 4.3f, -7.2f, 7.7f, -11.1f);
                mPath.rCubicTo(1.9f, -2.1f, 1.8f, -3.5f, 3.0f, -5.2f);
                mPath.rCubicTo(1.3f, -2.0f, 2.8f, -2.5f, 4.3f, -4.4f);
                mPath.rLineTo(5.7f, -9.5f);
                mPath.rCubicTo(1.2f, -1.6f, 2.9f, -2.7f, 4.4f, -3.9f);
                mPath.rCubicTo(0.6f, 4.1f, 1.0f, 5.9f, 4.3f, 8.6f);
                mPath.lineTo(987.10046f, 171.6f);
                mPath.rLineTo(1.4f, -12.5f);
                mPath.rCubicTo(4.8f, 0.6f, 5.1f, -1.4f, 4.8f, -5.8f);
                mPath.rLineTo(-3.3f, -15.8f);
                mPath.rCubicTo(-0.4f, -3.3f, 0.6f, -3.5f, 2.1f, -6.2f);
                mPath.rLineTo(3.6f, -8.6f);
                mPath.rCubicTo(0.6f, -1.8f, -0.4f, -3.1f, 0.0f, -4.8f);
                mPath.rCubicTo(0.3f, -1.6f, 2.5f, -4.6f, 0.9f, -7.7f);
                mPath.rCubicTo(-0.8f, -1.6f, -6.9f, -6.6f, -8.6f, -8.0f);
                mPath.rCubicTo(-0.9f, -0.7f, -1.4f, -1.0f, -2.4f, -1.4f);
                mPath.rCubicTo(-6.9f, -2.8f, -5.9f, 2.8f, -11.5f, 6.3f);
                mPath.rCubicTo(-1.8f, 1.1f, -6.1f, 3.0f, -8.2f, 3.1f);
                mPath.rCubicTo(-2.1f, 0.3f, -3.1f, -0.5f, -4.8f, 0.0f);
                mPath.rCubicTo(-3.4f, 0.8f, -3.2f, 3.4f, -9.1f, 3.4f);
                mPath.rCubicTo(-0.9f, 0.0f, -2.0f, 0.0f, -2.9f, -0.3f);
                mPath.rCubicTo(-3.0f, -1.1f, -4.0f, -4.3f, -5.2f, -6.9f);
                mPath.rCubicTo(-1.2f, -2.7f, -4.6f, -8.8f, -4.5f, -11.5f);
                mPath.rCubicTo(0.0f, -1.1f, 0.7f, -2.4f, 1.1f, -3.4f);
                mPath.rCubicTo(-5.1f, 0.5f, -3.3f, -1.9f, -10.6f, -3.8f);
                mPath.rCubicTo(-1.0f, 2.2f, -2.1f, 5.8f, -5.3f, 5.1f);
                mPath.rCubicTo(-1.8f, -0.4f, -2.2f, -1.9f, -3.9f, -3.0f);
                mPath.rCubicTo(-1.9f, -1.2f, -4.5f, -1.8f, -6.6f, -2.1f);
                mPath.rCubicTo(3.6f, -3.7f, 6.5f, -6.5f, 6.2f, -12.0f);
                mPath.rCubicTo(-0.2f, -2.5f, -1.0f, -5.3f, -3.8f, -5.9f);
                mPath.rCubicTo(-1.4f, -0.3f, -2.5f, 0.5f, -3.8f, 0.8f);
                mPath.rCubicTo(-1.8f, 0.5f, -3.5f, 0.2f, -5.2f, 1.3f);
                mPath.cubicTo(904.6f, 73.0f, 901.1f, 79.200005f, 899.80005f, 81.4f);
                mPath.lineTo(899.80005f, 81.4f);
                mPath.close();
                mPath.moveTo(899.80005f, 81.4f);
                break;
            case 21:
                mPath.moveTo(654.9f, 488.0f);
                mPath.rCubicTo(-3.0f, 0.5f, -6.2f, 0.0f, -8.6f, 1.9f);
                mPath.rLineTo(7.2f, 1.0f);
                mPath.rLineTo(-2.4f, 3.8f);
                mPath.rCubicTo(5.0f, 0.4f, 4.2f, 1.6f, 7.3f, 4.6f);
                mPath.rCubicTo(2.6f, 2.5f, 5.4f, 4.8f, 6.0f, 8.7f);
                mPath.rCubicTo(0.4f, 1.7f, -0.6f, 3.5f, 0.0f, 5.5f);
                mPath.rCubicTo(0.7f, 3.2f, 2.5f, 2.9f, 2.9f, 9.1f);
                mPath.rCubicTo(0.2f, 3.6f, -1.8f, 5.3f, -0.9f, 7.7f);
                mPath.rCubicTo(1.0f, 2.8f, 8.3f, 7.4f, 11.1f, 8.3f);
                mPath.rCubicTo(1.2f, 0.4f, 2.6f, 0.3f, 3.8f, 0.3f);
                mPath.rLineTo(-2.9f, 1.9f);
                mPath.rLineTo(3.8f, 0.8f);
                mPath.rLineTo(4.3f, 3.1f);
                mPath.rCubicTo(2.3f, -5.2f, 1.2f, -5.5f, 1.0f, -10.6f);
                mPath.rCubicTo(1.4f, 0.0f, 3.5f, 0.1f, 4.8f, -0.4f);
                mPath.rCubicTo(1.0f, -0.4f, 2.1f, -1.2f, 2.8f, -1.9f);
                mPath.rCubicTo(0.9f, -0.9f, 1.3f, -1.4f, 1.6f, -2.6f);
                mPath.rCubicTo(0.9f, -2.8f, 0.2f, -5.8f, -2.2f, -7.7f);
                mPath.rCubicTo(-2.0f, -1.5f, -4.9f, -1.3f, -5.9f, -5.8f);
                mPath.rCubicTo(-0.3f, -1.4f, -0.3f, -4.0f, 0.3f, -5.2f);
                mPath.rCubicTo(0.6f, -1.1f, 1.4f, -1.6f, 1.8f, -3.0f);
                mPath.rLineTo(0.3f, -4.8f);
                mPath.rCubicTo(0.2f, -0.9f, 0.6f, -1.6f, 1.1f, -2.4f);
                mPath.rCubicTo(3.0f, -5.3f, 6.0f, -3.3f, 10.8f, -1.9f);
                mPath.lineTo(702.8998f, 493.8f);
                mPath.rLineTo(3.8f, -10.6f);
                mPath.rLineTo(3.3f, -5.3f);
                mPath.rCubicTo(-6.1f, -2.1f, -5.1f, -3.8f, -8.6f, -5.4f);
                mPath.rCubicTo(-3.2f, -1.4f, -5.3f, -0.4f, -7.7f, -1.2f);
                mPath.rCubicTo(-1.5f, -0.5f, -3.8f, -1.8f, -4.1f, -3.5f);
                mPath.rCubicTo(-0.1f, -0.9f, 0.4f, -3.3f, 0.6f, -4.3f);
                mPath.rCubicTo(1.0f, -5.8f, 2.0f, -6.7f, 4.0f, -12.0f);
                mPath.rCubicTo(1.1f, -3.1f, 1.6f, -3.6f, 0.0f, -6.7f);
                mPath.rCubicTo(-0.4f, -0.9f, -0.8f, -1.8f, -1.7f, -2.3f);
                mPath.rCubicTo(-3.5f, -2.4f, -8.9f, 1.8f, -11.2f, 4.3f);
                mPath.rCubicTo(-4.6f, 5.2f, -5.4f, 12.1f, -5.5f, 18.6f);
                mPath.rCubicTo(0.0f, 5.8f, -1.8f, 4.9f, -2.0f, 10.1f);
                mPath.rCubicTo(0.1f, 1.0f, 0.1f, 3.0f, 0.0f, 3.8f);
                mPath.rCubicTo(-1.3f, 5.0f, -7.3f, 3.9f, -11.0f, 5.3f);
                mPath.cubicTo(659.4f, 486.09998f, 659.9f, 487.2f, 654.9f, 488.0f);
                mPath.lineTo(654.9f, 488.0f);
                mPath.close();
                mPath.moveTo(654.9f, 488.0f);
                break;
            case 22:
                mPath.moveTo(381.90002f, 439.0f);
                mPath.rCubicTo(-2.1f, 0.4f, -2.9f, 2.5f, -8.2f, 3.9f);
                mPath.rLineTo(1.1f, 8.6f);
                mPath.rLineTo(1.3f, 4.2f);
                mPath.rCubicTo(0.2f, 1.9f, -1.7f, 3.4f, -0.6f, 5.3f);
                mPath.rCubicTo(0.7f, 1.1f, 3.3f, 2.7f, 4.4f, 3.7f);
                mPath.rCubicTo(1.3f, 1.2f, 6.0f, 8.2f, 7.1f, 9.9f);
                mPath.rCubicTo(0.5f, 0.9f, 1.6f, 2.8f, 1.5f, 3.8f);
                mPath.rCubicTo(-0.1f, 1.0f, -0.7f, 1.7f, -1.4f, 2.4f);
                mPath.rCubicTo(-3.2f, 3.5f, -8.1f, 2.5f, -9.2f, 6.7f);
                mPath.rCubicTo(-1.0f, 4.1f, 6.2f, 9.3f, 3.5f, 14.4f);
                mPath.rCubicTo(-0.5f, 0.9f, -1.6f, 1.8f, -2.4f, 2.5f);
                mPath.rCubicTo(-1.2f, 1.0f, -2.0f, 1.6f, -3.4f, 2.4f);
                mPath.rCubicTo(-1.9f, -4.3f, -3.1f, -3.2f, -6.7f, -4.4f);
                mPath.rLineTo(-4.8f, -2.2f);
                mPath.rCubicTo(-2.3f, -0.5f, -3.6f, 1.5f, -5.6f, 1.8f);
                mPath.rLineTo(-3.6f, -0.4f);
                mPath.rLineTo(-4.8f, 0.4f);
                mPath.rCubicTo(0.9f, 4.8f, 4.1f, 7.0f, 2.4f, 12.5f);
                mPath.rCubicTo(-0.4f, 1.2f, -0.8f, 2.3f, -1.6f, 3.3f);
                mPath.rCubicTo(-0.9f, 1.0f, -2.9f, 2.2f, -4.1f, 3.0f);
                mPath.rCubicTo(1.1f, 4.6f, -0.3f, 7.4f, 4.8f, 9.6f);
                mPath.rCubicTo(-0.5f, 1.6f, -1.7f, 6.2f, -1.8f, 7.7f);
                mPath.rCubicTo(0.0f, 2.3f, 1.8f, 7.2f, -0.9f, 10.4f);
                mPath.rCubicTo(-0.8f, 0.9f, -2.1f, 1.8f, -3.1f, 2.5f);
                mPath.rCubicTo(0.4f, 1.8f, 0.7f, 5.3f, 1.4f, 6.7f);
                mPath.rCubicTo(1.0f, 1.8f, 2.7f, 2.7f, 4.0f, 5.3f);
                mPath.rCubicTo(3.3f, 6.6f, 1.3f, 6.5f, 8.0f, 12.3f);
                mPath.rCubicTo(1.0f, 0.8f, 2.6f, 2.3f, 3.8f, 2.6f);
                mPath.rCubicTo(1.4f, 0.4f, 3.3f, -0.2f, 4.8f, -0.4f);
                mPath.rCubicTo(4.7f, -0.6f, 5.0f, 0.1f, 10.1f, -2.1f);
                mPath.rCubicTo(2.3f, 7.2f, 0.9f, 5.8f, 6.7f, 11.5f);
                mPath.rCubicTo(2.2f, 2.2f, 2.6f, 3.2f, 5.8f, 3.0f);
                mPath.rCubicTo(4.0f, -0.2f, 3.0f, 2.1f, 8.2f, 3.9f);
                mPath.rLineTo(8.6f, 2.5f);
                mPath.rLineTo(10.1f, 3.9f);
                mPath.rLineTo(4.8f, 0.3f);
                mPath.rCubicTo(3.0f, 0.6f, 5.2f, 3.8f, 9.1f, 4.3f);
                mPath.rCubicTo(3.5f, 0.5f, 8.0f, -3.4f, 10.6f, -2.7f);
                mPath.rCubicTo(3.6f, 1.0f, 5.5f, 6.1f, 7.8f, 8.7f);
                mPath.rCubicTo(2.2f, 2.5f, 3.6f, 0.8f, 5.5f, 2.0f);
                mPath.rCubicTo(0.8f, 0.5f, 1.3f, 1.6f, 1.7f, 2.4f);
                mPath.rCubicTo(2.2f, 4.3f, 1.8f, 4.9f, 1.8f, 9.6f);
                mPath.rLineTo(13.4f, 3.8f);
                mPath.rLineTo(0.5f, -5.3f);
                mPath.rCubicTo(7.9f, 2.3f, 5.4f, 5.0f, 12.5f, 6.2f);
                mPath.rCubicTo(0.8f, -3.7f, 1.3f, -4.7f, 4.3f, -7.1f);
                mPath.rCubicTo(1.1f, -0.8f, 2.0f, -1.6f, 3.4f, -1.9f);
                mPath.rCubicTo(0.8f, -0.1f, 2.5f, -0.1f, 3.4f, 0.0f);
                mPath.rCubicTo(0.1f, -2.8f, 1.7f, -9.7f, 4.4f, -10.8f);
                mPath.rCubicTo(1.0f, -0.4f, 4.4f, -0.3f, 5.7f, -0.3f);
                mPath.rCubicTo(-1.7f, -2.0f, -5.0f, -4.2f, -5.8f, -6.2f);
                mPath.rCubicTo(-1.4f, -3.4f, 0.5f, -4.6f, 2.2f, -7.2f);
                mPath.rLineTo(5.1f, -9.1f);
                mPath.rCubicTo(-0.8f, -0.4f, -2.1f, -1.2f, -2.7f, -1.7f);
                mPath.rCubicTo(-3.2f, -2.9f, -2.4f, -6.8f, 0.0f, -9.7f);
                mPath.rCubicTo(0.8f, -0.8f, 2.1f, -2.1f, 3.2f, -2.5f);
                mPath.rCubicTo(2.1f, -0.7f, 3.5f, 1.6f, 5.3f, 2.1f);
                mPath.rCubicTo(2.1f, 0.6f, 3.3f, -1.0f, 6.7f, 0.7f);
                mPath.rCubicTo(1.6f, 0.8f, 5.3f, 3.5f, 6.2f, 5.0f);
                mPath.rCubicTo(0.8f, 1.4f, 0.7f, 3.2f, 1.2f, 4.7f);
                mPath.rLineTo(3.0f, 5.8f);
                mPath.rCubicTo(0.6f, 1.3f, 1.6f, 4.1f, 2.5f, 5.1f);
                mPath.rCubicTo(0.9f, 1.1f, 2.7f, 1.9f, 3.9f, 2.6f);
                mPath.rCubicTo(2.5f, 1.5f, 7.5f, 6.0f, 10.1f, 5.8f);
                mPath.rCubicTo(1.3f, -0.1f, 2.6f, -0.5f, 3.7f, -1.3f);
                mPath.rCubicTo(0.9f, -0.7f, 1.7f, -1.9f, 3.0f, -1.6f);
                mPath.rCubicTo(2.3f, 0.6f, 3.9f, 4.5f, 5.6f, 5.9f);
                mPath.rCubicTo(1.2f, 1.0f, 3.5f, 0.8f, 5.0f, 0.8f);
                mPath.rLineTo(-0.5f, 6.7f);
                mPath.rCubicTo(3.9f, 0.0f, 4.5f, -0.1f, 5.8f, -4.8f);
                mPath.rCubicTo(2.4f, 0.6f, 7.4f, 1.8f, 9.1f, -0.6f);
                mPath.rCubicTo(2.0f, -2.8f, -0.4f, -6.5f, -0.4f, -7.9f);
                mPath.rCubicTo(0.1f, -3.0f, 4.3f, -5.2f, 7.1f, -4.7f);
                mPath.rCubicTo(1.1f, 0.2f, 2.7f, 1.2f, 3.8f, 1.7f);
                mPath.rCubicTo(0.0f, -2.1f, 0.3f, -4.3f, 0.9f, -6.2f);
                mPath.rCubicTo(0.5f, -1.6f, 1.6f, -3.2f, 0.7f, -4.8f);
                mPath.rCubicTo(-2.0f, -3.5f, -4.7f, -1.3f, -7.3f, -2.8f);
                mPath.rCubicTo(-3.3f, -1.9f, -8.0f, -6.9f, -9.3f, -10.6f);
                mPath.rCubicTo(-0.5f, -1.5f, -0.8f, -4.7f, -0.8f, -6.2f);
                mPath.rCubicTo(4.7f, 0.0f, 6.7f, 0.5f, 11.0f, 2.3f);
                mPath.rCubicTo(3.4f, 1.5f, 6.6f, 3.8f, 10.6f, 2.8f);
                mPath.rCubicTo(1.3f, -0.3f, 1.9f, -0.9f, 2.9f, -1.8f);
                mPath.rCubicTo(0.9f, -0.8f, 2.9f, -2.7f, 3.1f, -3.8f);
                mPath.rCubicTo(0.3f, -1.2f, -0.7f, -2.5f, -1.4f, -3.4f);
                mPath.rCubicTo(-2.5f, -3.1f, -4.0f, -4.2f, -7.9f, -4.8f);
                mPath.rLineTo(4.5f, -1.8f);
                mPath.rCubicTo(1.3f, -1.1f, 1.5f, -3.2f, 3.7f, -5.2f);
                mPath.rCubicTo(2.6f, -2.3f, 4.8f, -2.7f, 5.5f, -6.9f);
                mPath.rCubicTo(0.2f, -2.0f, -1.0f, -3.6f, 0.0f, -5.0f);
                mPath.rCubicTo(1.4f, -1.7f, 7.4f, -3.1f, 8.0f, -5.2f);
                mPath.rCubicTo(0.3f, -0.9f, -0.4f, -3.2f, -0.6f, -4.2f);
                mPath.rLineTo(4.8f, -1.0f);
                mPath.rCubicTo(-1.1f, -4.5f, -0.9f, -4.8f, -0.4f, -9.1f);
                mPath.rCubicTo(0.3f, -3.0f, -1.6f, -3.6f, -2.9f, -6.7f);
                mPath.rCubicTo(-1.6f, -3.8f, -1.8f, -7.6f, -2.4f, -9.1f);
                mPath.rCubicTo(-0.9f, -2.2f, -2.7f, -3.1f, -2.6f, -4.8f);
                mPath.rLineTo(1.6f, -4.3f);
                mPath.rCubicTo(-5.4f, -2.6f, -4.2f, -3.1f, -6.9f, -5.6f);
                mPath.rLineTo(-3.4f, -2.4f);
                mPath.rCubicTo(-0.9f, -0.9f, -1.6f, -3.2f, -2.2f, -4.5f);
                mPath.rLineTo(-1.4f, 3.8f);
                mPath.rCubicTo(-3.3f, -2.1f, -3.6f, -2.9f, -6.2f, -5.1f);
                mPath.rLineTo(-5.3f, -3.8f);
                mPath.rLineTo(-3.8f, -3.2f);
                mPath.rLineTo(-7.6f, -4.5f);
                mPath.rCubicTo(-1.6f, -1.3f, -1.7f, -2.8f, -3.2f, -4.1f);
                mPath.rCubicTo(-2.6f, -2.3f, -3.1f, -1.0f, -6.0f, -5.7f);
                mPath.rLineTo(-2.4f, 5.3f);
                mPath.rCubicTo(-4.5f, -2.6f, -8.0f, -5.1f, -11.4f, -9.1f);
                mPath.rCubicTo(-3.6f, -4.4f, -4.4f, -7.7f, -10.2f, -10.8f);
                mPath.rCubicTo(-3.7f, -2.0f, -3.8f, 0.6f, -6.2f, 0.6f);
                mPath.rCubicTo(-1.0f, 0.0f, -3.4f, -1.4f, -4.8f, -1.8f);
                mPath.rCubicTo(-0.5f, 0.8f, -1.0f, 1.6f, -1.7f, 2.2f);
                mPath.rCubicTo(-2.0f, 1.9f, -5.0f, 1.2f, -7.0f, -0.3f);
                mPath.rCubicTo(-2.6f, -1.9f, -8.7f, -7.7f, -12.0f, -7.2f);
                mPath.rCubicTo(-2.0f, 0.3f, -3.4f, 2.5f, -3.8f, 4.3f);
                mPath.rLineTo(-2.4f, 16.3f);
                mPath.rCubicTo(-6.0f, -1.6f, -5.3f, -3.2f, -9.1f, -5.9f);
                mPath.rCubicTo(-2.2f, -1.5f, -4.8f, -1.9f, -7.2f, -3.8f);
                mPath.rLineTo(-9.3f, -9.7f);
                mPath.rCubicTo(-2.4f, -2.3f, -5.9f, -4.0f, -9.0f, -5.2f);
                mPath.rLineTo(-9.1f, -3.1f);
                mPath.rCubicTo(-1.4f, -0.5f, -4.6f, -2.1f, -5.8f, -2.2f);
                mPath.rCubicTo(-1.8f, -0.1f, -3.5f, 1.2f, -5.8f, 1.1f);
                mPath.rCubicTo(-2.3f, -0.1f, -5.0f, -1.5f, -7.7f, -1.3f);
                mPath.rCubicTo(-3.3f, 0.3f, -6.4f, 2.0f, -8.2f, 2.2f);
                mPath.rCubicTo(-1.5f, 0.2f, -2.8f, -0.4f, -4.3f, -0.4f);
                mPath.rLineTo(-9.6f, 1.1f);
                mPath.rLineTo(-4.3f, 1.4f);
                mPath.rLineTo(-6.2f, 0.9f);
                mPath.rLineTo(-9.6f, 1.9f);
                mPath.rCubicTo(-3.3f, 0.6f, -5.2f, 1.7f, -8.6f, 1.8f);
                mPath.lineTo(381.90002f, 439.0f);
                mPath.lineTo(381.90002f, 439.0f);
                mPath.close();
                mPath.moveTo(381.90002f, 439.0f);
                break;
            case 23:
                mPath.moveTo(774.4f, 433.3f);
                mPath.rCubicTo(-3.4f, 1.3f, -6.4f, 5.1f, -8.2f, 8.2f);
                mPath.rLineTo(-2.9f, -3.8f);
                mPath.rCubicTo(-1.3f, 0.3f, -4.6f, 0.8f, -5.5f, 1.4f);
                mPath.rCubicTo(-0.8f, 0.6f, -1.7f, 2.4f, -2.4f, 3.4f);
                mPath.rLineTo(-6.0f, 6.7f);
                mPath.rCubicTo(-2.4f, 2.7f, -3.9f, 2.7f, -5.6f, 4.5f);
                mPath.rCubicTo(-1.1f, 1.1f, -2.6f, 4.1f, -3.5f, 5.6f);
                mPath.rCubicTo(-2.2f, 3.6f, -4.9f, 6.5f, -4.3f, 11.0f);
                mPath.rCubicTo(0.2f, 1.3f, 0.9f, 3.1f, 1.3f, 4.3f);
                mPath.rCubicTo(-1.1f, 0.4f, -3.2f, 1.1f, -4.0f, 1.8f);
                mPath.rCubicTo(-1.2f, 1.1f, -2.0f, 5.6f, -2.2f, 7.4f);
                mPath.rLineTo(-6.7f, 0.0f);
                mPath.rCubicTo(-1.3f, 0.2f, -3.1f, 0.8f, -4.3f, 0.3f);
                mPath.rCubicTo(-1.4f, -0.6f, -1.9f, -2.1f, -2.8f, -3.1f);
                mPath.rCubicTo(-1.2f, -1.2f, -5.2f, -2.7f, -6.8f, -2.0f);
                mPath.rCubicTo(-1.6f, 0.7f, -3.1f, 3.2f, -3.8f, 4.8f);
                mPath.rCubicTo(-2.0f, 4.3f, -3.5f, 8.1f, -3.4f, 13.0f);
                mPath.rCubicTo(0.1f, 4.9f, 3.4f, 7.3f, 7.7f, 8.7f);
                mPath.rCubicTo(1.3f, 0.4f, 3.7f, 0.8f, 4.7f, 1.4f);
                mPath.rCubicTo(1.5f, 1.0f, 2.0f, 2.9f, 3.3f, 3.9f);
                mPath.rCubicTo(1.1f, 0.9f, 2.5f, 0.8f, 4.0f, 1.5f);
                mPath.rCubicTo(4.2f, 1.8f, 2.2f, 2.8f, 8.2f, 2.8f);
                mPath.rLineTo(1.3f, 6.2f);
                mPath.rCubicTo(0.3f, 2.2f, -1.0f, 3.0f, -1.8f, 4.8f);
                mPath.rCubicTo(-0.6f, 1.5f, -0.6f, 4.1f, -0.5f, 5.8f);
                mPath.rCubicTo(0.4f, 3.8f, 2.1f, 3.4f, 1.3f, 8.6f);
                mPath.rCubicTo(-0.1f, 0.8f, -0.3f, 2.0f, -0.8f, 2.7f);
                mPath.rCubicTo(-0.8f, 1.2f, -3.0f, 1.4f, -4.3f, 1.6f);
                mPath.rLineTo(-4.3f, 0.0f);
                mPath.rCubicTo(-4.2f, 0.4f, -3.4f, 1.4f, -8.1f, 0.0f);
                mPath.rCubicTo(0.0f, 1.1f, 0.3f, 4.0f, 0.0f, 4.8f);
                mPath.rCubicTo(-1.1f, 3.5f, -8.9f, 5.2f, -12.1f, 4.1f);
                mPath.rCubicTo(-2.4f, -0.9f, -2.5f, -2.8f, -7.2f, -3.0f);
                mPath.rCubicTo(-1.6f, -0.1f, -3.2f, 0.2f, -4.8f, 0.4f);
                mPath.rCubicTo(0.1f, 1.4f, 0.5f, 3.6f, 0.3f, 4.8f);
                mPath.rCubicTo(-0.5f, 3.0f, -2.5f, 4.9f, -4.1f, 7.2f);
                mPath.rLineTo(8.2f, 5.3f);
                mPath.rLineTo(-4.3f, 4.0f);
                mPath.rLineTo(-0.5f, 4.7f);
                mPath.rLineTo(-0.4f, 6.2f);
                mPath.rLineTo(2.3f, 5.8f);
                mPath.rLineTo(-4.3f, 0.0f);
                mPath.rCubicTo(-4.6f, 0.5f, -3.5f, 1.4f, -8.6f, 0.0f);
                mPath.rCubicTo(-0.5f, 1.2f, -2.1f, 4.0f, -2.0f, 5.2f);
                mPath.rCubicTo(0.1f, 1.8f, 1.7f, 2.7f, 1.8f, 4.8f);
                mPath.rCubicTo(0.3f, 3.3f, -2.0f, 6.4f, -5.1f, 7.4f);
                mPath.rCubicTo(-1.0f, 0.3f, -2.3f, 0.3f, -3.4f, 0.3f);
                mPath.rLineTo(1.4f, 3.8f);
                mPath.rCubicTo(2.0f, -1.0f, 6.3f, -3.8f, 8.5f, -3.0f);
                mPath.rCubicTo(1.4f, 0.5f, 2.0f, 2.3f, 2.9f, 3.3f);
                mPath.rCubicTo(1.0f, 1.1f, 2.5f, 1.3f, 3.9f, 1.5f);
                mPath.rCubicTo(2.5f, 0.3f, 7.3f, -1.1f, 10.1f, -1.6f);
                mPath.rCubicTo(1.4f, -0.2f, 3.4f, -0.5f, 4.6f, 0.6f);
                mPath.rCubicTo(1.0f, 0.9f, 1.7f, 3.7f, 2.2f, 5.0f);
                mPath.rLineTo(5.8f, -1.9f);
                mPath.rCubicTo(2.0f, 5.5f, 3.3f, 4.3f, 6.2f, 5.9f);
                mPath.rCubicTo(3.6f, 2.0f, 2.6f, 2.3f, 7.2f, 2.2f);
                mPath.rCubicTo(2.6f, -0.1f, 4.5f, -0.8f, 7.2f, -0.4f);
                mPath.rCubicTo(3.3f, 0.5f, 10.5f, 4.7f, 13.9f, 6.5f);
                mPath.rCubicTo(4.8f, 2.5f, 4.6f, 4.8f, 6.8f, 5.6f);
                mPath.rCubicTo(1.3f, 0.5f, 3.9f, -0.3f, 5.2f, -0.7f);
                mPath.rCubicTo(-1.8f, -7.2f, -0.2f, -8.1f, -0.3f, -11.0f);
                mPath.rCubicTo(-0.1f, -2.0f, -1.3f, -3.0f, -1.7f, -4.3f);
                mPath.rCubicTo(-0.5f, -2.1f, 1.8f, -4.3f, 3.4f, -5.3f);
                mPath.rCubicTo(2.9f, -1.8f, 4.1f, -0.4f, 6.2f, -0.7f);
                mPath.rCubicTo(1.0f, -0.1f, 2.4f, -0.8f, 3.4f, -1.2f);
                mPath.rLineTo(-3.7f, -5.8f);
                mPath.rLineTo(-3.4f, -1.2f);
                mPath.rLineTo(-3.3f, -4.5f);
                mPath.rLineTo(-5.5f, -1.4f);
                mPath.rCubicTo(0.9f, -1.0f, 2.2f, -2.8f, 3.4f, -3.3f);
                mPath.rLineTo(9.6f, 0.4f);
                mPath.rLineTo(5.3f, 0.4f);
                mPath.rLineTo(3.4f, -0.6f);
                mPath.rCubicTo(1.9f, 0.1f, 2.7f, 2.0f, 4.3f, 2.1f);
                mPath.rCubicTo(0.9f, 0.1f, 1.7f, -0.5f, 2.4f, -1.0f);
                mPath.rCubicTo(3.3f, -2.5f, 2.9f, -3.8f, 2.9f, -7.6f);
                mPath.rCubicTo(-0.1f, -4.7f, -2.7f, -3.3f, -6.3f, -9.1f);
                mPath.rCubicTo(-1.7f, -2.8f, -1.0f, -4.7f, -2.0f, -6.7f);
                mPath.rCubicTo(-1.0f, -2.0f, -3.3f, -2.9f, -4.2f, -4.5f);
                mPath.rCubicTo(-0.8f, -1.4f, -0.7f, -6.2f, -1.3f, -8.0f);
                mPath.rCubicTo(-0.7f, -2.1f, -2.3f, -3.4f, -2.4f, -5.8f);
                mPath.rCubicTo(0.0f, -2.4f, 1.4f, -9.7f, 2.2f, -12.0f);
                mPath.rCubicTo(0.9f, -2.5f, 2.8f, -7.0f, 2.8f, -9.6f);
                mPath.rCubicTo(-0.1f, -3.6f, -2.0f, -6.6f, -2.8f, -10.1f);
                mPath.rCubicTo(-0.9f, -4.0f, -0.2f, -7.6f, -0.6f, -11.5f);
                mPath.rLineTo(-1.7f, -9.1f);
                mPath.rCubicTo(0.0f, -3.1f, 1.4f, -5.4f, 2.5f, -8.2f);
                mPath.rCubicTo(1.1f, -2.8f, 2.8f, -9.6f, 2.6f, -12.5f);
                mPath.rCubicTo(-0.3f, -3.5f, -4.7f, -9.1f, -4.6f, -11.5f);
                mPath.rLineTo(4.5f, -9.6f);
                mPath.rLineTo(2.7f, -7.7f);
                mPath.rLineTo(1.2f, -5.8f);
                mPath.rCubicTo(0.5f, -1.8f, 1.7f, -3.5f, 1.6f, -5.3f);
                mPath.cubicTo(776.5f, 439.09998f, 775.1f, 435.59998f, 774.4f, 433.3f);
                mPath.lineTo(774.4f, 433.3f);
                mPath.close();
                mPath.moveTo(774.4f, 433.3f);
                break;
            case 24:
                mPath.moveTo(1011.0f, 629.5f);
                mPath.rCubicTo(3.1f, -1.1f, 4.0f, -2.4f, 6.2f, -4.7f);
                mPath.rCubicTo(-1.0f, -1.8f, -3.4f, -5.2f, -4.9f, -6.6f);
                mPath.rCubicTo(-1.3f, -1.2f, -2.6f, -1.7f, -4.2f, -2.3f);
                mPath.rCubicTo(-1.4f, -0.6f, -4.3f, -2.0f, -5.8f, -1.6f);
                mPath.rCubicTo(-2.3f, 0.6f, -3.4f, 3.7f, -4.1f, 5.7f);
                mPath.rCubicTo(-0.4f, 1.2f, -1.6f, 5.6f, -1.5f, 6.7f);
                mPath.rCubicTo(0.4f, 3.0f, 6.2f, 6.2f, 7.9f, 6.3f);
                mPath.cubicTo(1007.0f, 633.1f, 1007.5f, 630.8f, 1011.0f, 629.5f);
                mPath.lineTo(1011.0f, 629.5f);
                mPath.close();
                mPath.moveTo(1011.0f, 629.5f);
                break;
            case 25:
                mPath.moveTo(866.69995f, 516.9f);
                mPath.rCubicTo(1.4f, 0.1f, 3.3f, 0.5f, 4.7f, 0.0f);
                mPath.rCubicTo(2.6f, -0.8f, 2.2f, -2.2f, 7.2f, -2.9f);
                mPath.rCubicTo(-1.1f, 1.9f, -1.6f, 3.4f, -3.4f, 4.8f);
                mPath.rLineTo(-5.4f, 3.6f);
                mPath.rCubicTo(-1.4f, 1.5f, -1.1f, 3.5f, -3.2f, 6.4f);
                mPath.rCubicTo(-2.9f, 4.1f, -4.4f, 2.9f, -5.8f, 4.6f);
                mPath.rCubicTo(-1.0f, 1.2f, -2.8f, 7.1f, -3.4f, 8.9f);
                mPath.rCubicTo(4.6f, 0.0f, 6.8f, -0.8f, 10.5f, 2.3f);
                mPath.rCubicTo(5.2f, 4.3f, 1.2f, 6.8f, 7.2f, 6.8f);
                mPath.rCubicTo(4.1f, 0.0f, 4.6f, -0.7f, 7.7f, -0.9f);
                mPath.rCubicTo(2.1f, -0.2f, 3.9f, 0.2f, 5.7f, -1.3f);
                mPath.rCubicTo(2.1f, -1.7f, 1.2f, -3.4f, 1.8f, -5.0f);
                mPath.rCubicTo(0.6f, -1.6f, 3.9f, -3.7f, 5.5f, -4.1f);
                mPath.rCubicTo(3.9f, -0.9f, 6.0f, 2.3f, 7.8f, 5.0f);
                mPath.rCubicTo(0.6f, 0.9f, 1.4f, 2.4f, 2.4f, 2.8f);
                mPath.rCubicTo(1.2f, 0.5f, 2.3f, -0.5f, 3.7f, -0.4f);
                mPath.rCubicTo(2.4f, 0.2f, 3.8f, 2.7f, 7.2f, 1.3f);
                mPath.rCubicTo(3.1f, -1.3f, 4.2f, -3.8f, 6.2f, -3.9f);
                mPath.rCubicTo(1.5f, 0.0f, 5.0f, 2.7f, 7.7f, 3.6f);
                mPath.rCubicTo(0.1f, -1.8f, 0.3f, -3.8f, 1.6f, -5.1f);
                mPath.rCubicTo(1.3f, -1.4f, 3.6f, -1.7f, 4.5f, -3.3f);
                mPath.rCubicTo(0.8f, -1.4f, 0.6f, -5.6f, 3.3f, -8.3f);
                mPath.rCubicTo(2.1f, -2.1f, 6.3f, -2.4f, 7.7f, -4.6f);
                mPath.rLineTo(5.0f, -11.8f);
                mPath.rCubicTo(1.4f, -1.8f, 3.4f, -1.4f, 4.7f, -3.6f);
                mPath.rLineTo(3.2f, -7.6f);
                mPath.rCubicTo(0.4f, -1.9f, -0.6f, -3.4f, 0.0f, -4.7f);
                mPath.rCubicTo(0.5f, -1.1f, 2.2f, -1.9f, 3.2f, -2.5f);
                mPath.rLineTo(1.0f, 4.3f);
                mPath.rLineTo(6.2f, -2.9f);
                mPath.rLineTo(-1.0f, -6.7f);
                mPath.rLineTo(3.8f, 0.0f);
                mPath.rCubicTo(0.6f, -3.6f, 0.5f, -3.8f, -2.9f, -5.3f);
                mPath.rCubicTo(5.6f, -2.4f, 4.8f, -1.1f, 11.0f, -5.1f);
                mPath.rLineTo(7.7f, -5.9f);
                mPath.rCubicTo(1.4f, -0.8f, 2.6f, -0.7f, 3.8f, -1.3f);
                mPath.rCubicTo(1.2f, -0.5f, 2.4f, -1.6f, 3.4f, -1.6f);
                mPath.rCubicTo(1.0f, 0.0f, 2.9f, 1.7f, 3.8f, 2.4f);
                mPath.rLineTo(0.9f, -5.8f);
                mPath.rLineTo(2.4f, -4.3f);
                mPath.rLineTo(0.0f, -4.8f);
                mPath.rLineTo(-5.7f, 1.2f);
                mPath.rCubicTo(-2.2f, 0.0f, -4.8f, -1.5f, -7.7f, -1.0f);
                mPath.rCubicTo(-3.0f, 0.5f, -5.4f, 2.8f, -7.2f, 2.4f);
                mPath.rCubicTo(-1.3f, -0.3f, -2.3f, -1.8f, -3.8f, -2.3f);
                mPath.rCubicTo(-2.4f, -0.8f, -2.2f, 1.2f, -6.7f, -1.6f);
                mPath.rCubicTo(-2.0f, -1.2f, -4.4f, -3.7f, -6.7f, -3.1f);
                mPath.rCubicTo(-2.1f, 0.6f, -7.0f, 4.1f, -8.4f, 5.8f);
                mPath.rLineTo(-2.3f, 3.3f);
                mPath.rCubicTo(-0.9f, 1.2f, -1.8f, 1.9f, -2.6f, 3.4f);
                mPath.rCubicTo(-1.4f, 2.7f, -1.9f, 7.0f, -5.5f, 9.0f);
                mPath.rCubicTo(-1.9f, 1.1f, -7.5f, 1.5f, -9.6f, 0.8f);
                mPath.rCubicTo(-1.4f, -0.5f, -2.3f, -1.7f, -3.8f, -2.4f);
                mPath.rCubicTo(-1.1f, -0.5f, -3.1f, -0.9f, -4.3f, -1.1f);
                mPath.rCubicTo(1.4f, -5.2f, 2.1f, -7.3f, 1.1f, -13.0f);
                mPath.rCubicTo(-0.3f, -1.6f, -0.8f, -3.9f, -2.2f, -4.8f);
                mPath.rCubicTo(-0.9f, -0.6f, -2.2f, -0.5f, -3.2f, -0.5f);
                mPath.rCubicTo(-1.7f, 0.0f, -5.2f, -0.1f, -6.7f, 0.3f);
                mPath.rLineTo(-4.3f, 2.0f);
                mPath.rCubicTo(-2.5f, 0.7f, -2.8f, -2.3f, -5.8f, -2.9f);
                mPath.rCubicTo(-2.3f, -0.5f, -2.9f, 1.4f, -3.9f, 3.0f);
                mPath.rCubicTo(-1.4f, 2.2f, -2.9f, 4.2f, -5.2f, 5.4f);
                mPath.rLineTo(-10.6f, 3.4f);
                mPath.rCubicTo(-3.5f, 2.7f, -4.8f, 7.1f, -6.4f, 8.7f);
                mPath.rCubicTo(-2.3f, 2.1f, -5.7f, 2.1f, -7.6f, 5.2f);
                mPath.rCubicTo(-3.1f, 5.0f, -1.9f, 7.1f, -4.3f, 11.0f);
                mPath.rCubicTo(-1.9f, 2.9f, -7.0f, 7.6f, -7.3f, 11.0f);
                mPath.rCubicTo(-0.2f, 2.4f, 2.5f, 5.0f, 3.2f, 7.2f);
                mPath.cubicTo(867.5f, 512.4f, 866.80005f, 514.8f, 866.69995f, 516.9f);
                mPath.close();
                mPath.moveTo(866.69995f, 516.9f);
                break;
            case 26:
                mPath.moveTo(833.2f, 403.90002f);
                mPath.rLineTo(-2.6f, -4.8f);
                mPath.rCubicTo(-0.3f, 1.2f, -0.5f, 2.8f, -1.2f, 3.7f);
                mPath.rCubicTo(-1.2f, 1.6f, -4.6f, 2.8f, -6.4f, 3.9f);
                mPath.rCubicTo(-1.1f, 0.7f, -2.9f, 2.6f, -4.0f, 2.8f);
                mPath.rCubicTo(-0.9f, 0.1f, -2.9f, -0.8f, -4.1f, -1.0f);
                mPath.rCubicTo(-2.1f, -0.3f, -6.5f, 1.6f, -7.9f, 3.2f);
                mPath.rCubicTo(-0.9f, 0.9f, -1.2f, 1.7f, -1.7f, 2.8f);
                mPath.rCubicTo(-2.0f, -0.6f, -3.6f, -1.6f, -5.8f, -1.1f);
                mPath.rCubicTo(-3.3f, 0.9f, -3.8f, 3.0f, -5.0f, 5.9f);
                mPath.rCubicTo(-1.6f, 4.0f, -3.0f, 6.6f, -3.2f, 11.0f);
                mPath.rCubicTo(-2.3f, 0.0f, -6.6f, -0.2f, -8.5f, 0.8f);
                mPath.rCubicTo(-1.7f, 0.9f, -1.8f, 2.5f, -2.8f, 3.9f);
                mPath.rCubicTo(-1.1f, 1.3f, -2.4f, 1.7f, -3.1f, 2.7f);
                mPath.rCubicTo(-0.6f, 1.2f, 0.3f, 2.6f, 0.0f, 4.6f);
                mPath.rLineTo(-1.4f, 3.8f);
                mPath.rLineTo(-1.4f, 6.7f);
                mPath.rCubicTo(-0.9f, 2.9f, -2.6f, 7.4f, -3.9f, 10.1f);
                mPath.rCubicTo(-0.7f, 1.4f, -3.1f, 5.1f, -3.3f, 6.2f);
                mPath.rCubicTo(-0.5f, 2.8f, 4.6f, 8.9f, 4.8f, 12.5f);
                mPath.rCubicTo(0.2f, 6.8f, -4.2f, 13.7f, -5.0f, 18.7f);
                mPath.rCubicTo(-0.4f, 2.9f, 1.0f, 7.1f, 1.6f, 10.1f);
                mPath.rLineTo(0.0f, 8.2f);
                mPath.rCubicTo(0.2f, 7.0f, 3.6f, 10.1f, 3.3f, 14.4f);
                mPath.rCubicTo(-0.1f, 2.1f, -2.1f, 6.9f, -2.9f, 9.1f);
                mPath.rCubicTo(-0.7f, 2.0f, -2.4f, 11.1f, -2.1f, 13.0f);
                mPath.rCubicTo(0.2f, 1.4f, 1.5f, 3.4f, 2.3f, 4.8f);
                mPath.rCubicTo(2.8f, -0.8f, 6.0f, -1.4f, 8.6f, -2.5f);
                mPath.rCubicTo(3.3f, -1.5f, 4.8f, -3.1f, 6.2f, -3.7f);
                mPath.rCubicTo(2.4f, -1.0f, 3.4f, 0.3f, 6.7f, -1.5f);
                mPath.rCubicTo(3.6f, -2.0f, 4.8f, -4.0f, 6.7f, -5.4f);
                mPath.rCubicTo(1.9f, -1.4f, 3.1f, -1.0f, 4.8f, -2.0f);
                mPath.rCubicTo(1.5f, -1.0f, 2.0f, -2.4f, 3.9f, -3.3f);
                mPath.rCubicTo(3.3f, -1.6f, 7.5f, -0.7f, 11.0f, -1.8f);
                mPath.rCubicTo(3.3f, -1.0f, 5.6f, -2.8f, 8.2f, -5.2f);
                mPath.rLineTo(4.1f, -3.9f);
                mPath.rCubicTo(2.2f, -2.7f, 3.1f, -8.0f, 3.1f, -11.4f);
                mPath.rCubicTo(0.0f, -2.0f, 0.3f, -7.5f, -0.5f, -9.1f);
                mPath.rCubicTo(-1.0f, -2.0f, -5.0f, -6.0f, -4.1f, -8.5f);
                mPath.rCubicTo(0.5f, -1.4f, 2.2f, -1.4f, 3.3f, -3.5f);
                mPath.rLineTo(3.6f, -12.9f);
                mPath.rCubicTo(0.7f, -1.6f, 2.8f, -5.8f, 2.7f, -7.2f);
                mPath.rCubicTo(-0.1f, -1.9f, -3.8f, -7.0f, -4.8f, -9.1f);
                mPath.rCubicTo(-0.7f, -1.4f, -1.3f, -3.4f, -2.3f, -4.5f);
                mPath.rCubicTo(-1.1f, -1.1f, -5.4f, -2.7f, -5.9f, -7.0f);
                mPath.rCubicTo(-0.5f, -4.2f, 2.7f, -5.4f, 3.8f, -8.2f);
                mPath.rCubicTo(1.3f, -3.2f, -1.8f, -5.0f, 2.6f, -8.4f);
                mPath.rCubicTo(1.6f, -1.2f, 3.3f, -0.5f, 5.1f, -0.9f);
                mPath.rCubicTo(3.4f, -0.9f, 3.8f, -3.6f, 3.8f, -6.6f);
                mPath.rCubicTo(0.0f, -3.5f, 0.4f, -10.7f, -3.0f, -12.9f);
                mPath.rLineTo(-4.7f, -1.3f);
                mPath.rLineTo(-3.8f, -1.7f);
                mPath.rCubicTo(3.2f, -7.2f, 5.7f, -5.2f, 10.6f, -9.6f);
                mPath.lineTo(833.2f, 403.90002f);
                mPath.lineTo(833.2f, 403.90002f);
                mPath.close();
                mPath.moveTo(833.2f, 403.90002f);
                break;
            case 27:
                mPath.moveTo(620.9f, 577.8f);
                mPath.rCubicTo(-0.8f, -1.8f, -4.8f, -6.8f, -6.3f, -8.2f);
                mPath.rCubicTo(-5.9f, 5.9f, -4.6f, 3.2f, -9.1f, 5.6f);
                mPath.rLineTo(-4.3f, 3.0f);
                mPath.rLineTo(4.1f, 9.9f);
                mPath.rLineTo(-1.8f, 3.5f);
                mPath.rLineTo(-3.0f, 4.8f);
                mPath.rLineTo(-4.7f, 0.5f);
                mPath.rCubicTo(0.0f, -4.0f, 0.0f, -6.3f, -4.3f, -7.7f);
                mPath.rLineTo(-2.4f, 10.6f);
                mPath.rCubicTo(-0.9f, -0.8f, -1.7f, -1.7f, -2.9f, -2.1f);
                mPath.rCubicTo(-2.7f, -0.9f, -6.9f, 0.5f, -7.6f, 3.6f);
                mPath.rCubicTo(-0.4f, 1.6f, 0.8f, 3.1f, 1.0f, 4.8f);
                mPath.rCubicTo(0.8f, 6.5f, -5.5f, 5.9f, -9.7f, 4.8f);
                mPath.rCubicTo(-2.3f, 4.5f, -1.4f, 4.8f, -6.7f, 4.8f);
                mPath.rLineTo(0.5f, -6.7f);
                mPath.rCubicTo(-1.8f, 0.0f, -3.2f, 0.2f, -4.6f, -1.1f);
                mPath.rCubicTo(-1.2f, -1.1f, -3.3f, -5.4f, -5.4f, -5.9f);
                mPath.rCubicTo(-2.1f, -0.6f, -2.9f, 3.2f, -6.7f, 3.2f);
                mPath.rCubicTo(-1.8f, 0.0f, -3.0f, -1.1f, -4.3f, -2.1f);
                mPath.rLineTo(-9.8f, -6.6f);
                mPath.rCubicTo(-1.1f, -1.2f, -2.0f, -4.1f, -2.8f, -5.7f);
                mPath.rLineTo(-2.8f, -5.3f);
                mPath.rCubicTo(-0.6f, -1.6f, -0.4f, -3.7f, -1.3f, -5.1f);
                mPath.rCubicTo(-0.9f, -1.3f, -3.8f, -3.4f, -5.3f, -4.1f);
                mPath.rCubicTo(-3.4f, -1.6f, -4.9f, -0.3f, -6.7f, -0.8f);
                mPath.rCubicTo(-2.3f, -0.6f, -3.6f, -3.5f, -6.2f, -2.2f);
                mPath.rCubicTo(-5.0f, 2.4f, -7.1f, 10.9f, 0.5f, 13.1f);
                mPath.rLineTo(-5.1f, 9.1f);
                mPath.rCubicTo(-1.3f, 2.0f, -3.0f, 3.2f, -2.8f, 5.8f);
                mPath.rCubicTo(0.8f, 7.4f, 11.4f, 9.2f, 15.0f, 13.0f);
                mPath.rCubicTo(1.4f, 1.5f, 4.6f, 8.4f, 5.1f, 10.5f);
                mPath.rCubicTo(0.4f, 1.7f, 0.2f, 3.4f, 1.0f, 5.3f);
                mPath.rLineTo(4.8f, 7.5f);
                mPath.rLineTo(3.2f, 3.0f);
                mPath.rLineTo(-4.3f, 0.5f);
                mPath.rLineTo(0.2f, 6.2f);
                mPath.rLineTo(3.5f, 9.6f);
                mPath.rLineTo(0.7f, 12.0f);
                mPath.rLineTo(1.6f, 7.2f);
                mPath.rLineTo(-1.6f, 7.2f);
                mPath.rLineTo(1.9f, 14.9f);
                mPath.rLineTo(0.0f, 5.3f);
                mPath.rLineTo(-0.6f, 5.3f);
                mPath.rLineTo(2.0f, 9.1f);
                mPath.rLineTo(2.5f, 4.3f);
                mPath.rLineTo(1.3f, -5.3f);
                mPath.rLineTo(4.5f, -10.6f);
                mPath.rLineTo(4.6f, 4.8f);
                mPath.rLineTo(3.2f, 4.3f);
                mPath.rLineTo(3.4f, 3.8f);
                mPath.rCubicTo(1.2f, 2.3f, -2.0f, 2.5f, -1.6f, 5.3f);
                mPath.rCubicTo(0.1f, 0.9f, 0.9f, 2.6f, 1.4f, 3.4f);
                mPath.rCubicTo(3.0f, 4.6f, 8.2f, 4.3f, 13.0f, 4.3f);
                mPath.rCubicTo(1.0f, 5.6f, 4.5f, 9.0f, 6.6f, 13.9f);
                mPath.rCubicTo(0.9f, 2.3f, 0.9f, 6.0f, 2.0f, 7.5f);
                mPath.rCubicTo(0.9f, 1.2f, 6.0f, 4.8f, 6.9f, 6.7f);
                mPath.rCubicTo(0.8f, 1.7f, -1.5f, 3.0f, -1.1f, 4.9f);
                mPath.rCubicTo(0.3f, 1.3f, 2.0f, 2.5f, 2.9f, 3.4f);
                mPath.rCubicTo(2.3f, 2.3f, 3.5f, 5.5f, 6.3f, 7.4f);
                mPath.rCubicTo(1.4f, 0.9f, 2.3f, 0.8f, 3.8f, 0.6f);
                mPath.rCubicTo(6.6f, -0.8f, 7.4f, -4.3f, 11.0f, -5.3f);
                mPath.rCubicTo(2.2f, -0.6f, 2.8f, 2.3f, 5.8f, 1.5f);
                mPath.rCubicTo(2.1f, -0.5f, 3.2f, -1.5f, 4.2f, -3.4f);
                mPath.rCubicTo(3.4f, -6.3f, -1.2f, -9.2f, -1.3f, -15.4f);
                mPath.rCubicTo(0.0f, -1.5f, -0.2f, -5.4f, 0.5f, -6.6f);
                mPath.rCubicTo(0.9f, -1.5f, 2.8f, -1.8f, 4.2f, -2.8f);
                mPath.rCubicTo(1.3f, -1.0f, 2.4f, -3.5f, 3.7f, -4.9f);
                mPath.rCubicTo(1.2f, -1.5f, 4.4f, -4.3f, 5.1f, -5.8f);
                mPath.rCubicTo(0.7f, -1.5f, -0.2f, -5.9f, -0.5f, -7.7f);
                mPath.rCubicTo(3.3f, -0.5f, 6.0f, -1.2f, 7.7f, -4.3f);
                mPath.rCubicTo(2.0f, -3.5f, 0.0f, -7.8f, 4.8f, -7.6f);
                mPath.rCubicTo(1.7f, 0.1f, 5.3f, 1.1f, 6.0f, 2.9f);
                mPath.rCubicTo(0.2f, 1.0f, -0.4f, 2.4f, 0.0f, 3.6f);
                mPath.rCubicTo(0.6f, 1.4f, 2.3f, 2.0f, 2.8f, 3.5f);
                mPath.rCubicTo(0.3f, 1.2f, -0.5f, 2.3f, 0.0f, 4.3f);
                mPath.rCubicTo(1.6f, 6.0f, 5.8f, 5.1f, 10.0f, 2.4f);
                mPath.rCubicTo(1.6f, -1.1f, 3.0f, -2.5f, 4.3f, -3.9f);
                mPath.rLineTo(5.3f, 10.1f);
                mPath.rCubicTo(0.9f, -0.4f, 2.8f, -1.3f, 3.6f, -1.3f);
                mPath.rCubicTo(1.4f, 0.0f, 3.6f, 1.8f, 5.5f, 2.0f);
                mPath.rCubicTo(1.5f, 0.1f, 3.7f, -0.9f, 5.3f, -1.3f);
                mPath.rLineTo(4.6f, -0.6f);
                mPath.rCubicTo(0.7f, -0.3f, 1.2f, -1.0f, 1.6f, -1.7f);
                mPath.rCubicTo(1.6f, -2.8f, 0.5f, -4.9f, -0.5f, -7.7f);
                mPath.rLineTo(-5.1f, 0.4f);
                mPath.rLineTo(-2.8f, -2.5f);
                mPath.rLineTo(-4.1f, -1.2f);
                mPath.rCubicTo(-0.2f, -1.2f, -0.8f, -4.3f, -0.5f, -5.2f);
                mPath.rCubicTo(0.4f, -1.6f, 6.5f, -5.8f, 8.2f, -5.7f);
                mPath.rCubicTo(1.3f, 0.1f, 4.1f, 2.3f, 6.7f, 3.3f);
                mPath.rCubicTo(-1.4f, -3.5f, -2.5f, -6.8f, -6.2f, -8.6f);
                mPath.rCubicTo(-2.0f, -1.0f, -3.6f, -0.1f, -5.1f, -1.3f);
                mPath.rCubicTo(-1.5f, -1.2f, -1.0f, -2.9f, -4.1f, -5.8f);
                mPath.rCubicTo(-1.5f, -1.4f, -6.0f, -5.1f, -6.4f, -6.9f);
                mPath.rCubicTo(-0.3f, -1.2f, 0.9f, -3.3f, 1.6f, -4.3f);
                mPath.rCubicTo(1.9f, -2.9f, 4.8f, -4.9f, 5.8f, -8.6f);
                mPath.rCubicTo(0.8f, -2.8f, -2.3f, -3.0f, -1.1f, -5.2f);
                mPath.rCubicTo(0.4f, -0.8f, 4.7f, -4.9f, 5.5f, -5.2f);
                mPath.rCubicTo(2.9f, -1.0f, 5.4f, 2.0f, 7.7f, 3.1f);
                mPath.rCubicTo(2.4f, 1.2f, 3.3f, -0.8f, 5.3f, 0.0f);
                mPath.rCubicTo(1.3f, 0.5f, 6.0f, 6.2f, 10.6f, 5.0f);
                mPath.rCubicTo(3.1f, -0.8f, 5.5f, -6.1f, 7.1f, -8.8f);
                mPath.rCubicTo(0.6f, -1.1f, 1.6f, -2.6f, 1.9f, -3.8f);
                mPath.rCubicTo(0.5f, -1.9f, -0.2f, -3.4f, 1.0f, -5.3f);
                mPath.rCubicTo(3.1f, -4.8f, 7.2f, 0.3f, 10.8f, -4.6f);
                mPath.rCubicTo(0.8f, -1.1f, 1.6f, -5.7f, 2.3f, -7.4f);
                mPath.rCubicTo(2.2f, -6.0f, 3.7f, -8.0f, 8.2f, -12.5f);
                mPath.rCubicTo(-1.5f, -2.4f, -4.4f, -6.0f, -3.2f, -9.1f);
                mPath.rCubicTo(0.3f, -0.9f, 2.0f, -2.8f, 2.7f, -3.8f);
                mPath.rLineTo(-4.8f, -0.6f);
                mPath.rLineTo(-8.2f, 0.4f);
                mPath.rLineTo(-3.8f, -2.2f);
                mPath.rLineTo(-3.7f, -1.6f);
                mPath.rLineTo(-3.6f, -3.5f);
                mPath.rLineTo(-5.2f, 1.4f);
                mPath.rLineTo(-1.4f, -5.7f);
                mPath.rLineTo(-4.8f, 0.0f);
                mPath.rCubicTo(-2.8f, 0.4f, -7.6f, 1.9f, -10.1f, 1.6f);
                mPath.rCubicTo(-1.6f, -0.2f, -2.9f, -0.6f, -4.0f, -1.8f);
                mPath.rCubicTo(-0.9f, -1.0f, -1.4f, -2.4f, -2.8f, -2.9f);
                mPath.rCubicTo(-2.5f, -0.9f, -6.9f, 1.9f, -9.0f, 3.0f);
                mPath.rLineTo(-1.4f, -4.3f);
                mPath.rCubicTo(-1.9f, 1.9f, -3.8f, 5.4f, -5.8f, 6.4f);
                mPath.rCubicTo(-5.8f, 2.8f, -16.6f, -2.7f, -20.1f, -7.4f);
                mPath.rLineTo(3.4f, -1.9f);
                mPath.rCubicTo(-1.0f, -4.4f, -4.3f, -14.5f, -8.6f, -16.4f);
                mPath.rCubicTo(-1.5f, -0.7f, -3.6f, -0.4f, -5.3f, -0.5f);
                mPath.rCubicTo(-2.5f, -0.3f, -7.5f, -1.8f, -9.5f, -3.3f);
                mPath.cubicTo(621.2f, 581.9f, 621.9f, 579.9f, 620.9f, 577.8f);
                mPath.lineTo(620.9f, 577.8f);
                mPath.close();
                mPath.moveTo(620.9f, 577.8f);
                break;
            case 28:
                mPath.moveTo(1040.1f, 770.6f);
                mPath.rCubicTo(-1.3f, -1.2f, -5.2f, -2.3f, -7.0f, -2.7f);
                mPath.rCubicTo(-0.9f, 1.6f, -1.4f, 2.8f, -2.9f, 3.9f);
                mPath.rCubicTo(-2.4f, 1.9f, -5.7f, 3.0f, -7.5f, 5.7f);
                mPath.rCubicTo(-2.0f, 3.1f, -0.5f, 6.0f, -1.6f, 8.0f);
                mPath.rCubicTo(-1.0f, 1.7f, -2.9f, 2.1f, -4.4f, 4.9f);
                mPath.rLineTo(-2.5f, 8.2f);
                mPath.rCubicTo(-1.3f, 3.6f, -5.3f, 11.7f, -5.5f, 14.9f);
                mPath.rCubicTo(-0.1f, 2.4f, 1.1f, 3.8f, 1.3f, 5.6f);
                mPath.rCubicTo(0.2f, 1.6f, -0.7f, 3.0f, -0.3f, 5.0f);
                mPath.rLineTo(2.4f, 5.8f);
                mPath.rCubicTo(1.1f, 3.2f, 0.8f, 5.4f, 3.1f, 8.6f);
                mPath.rCubicTo(1.9f, 2.7f, 6.1f, 3.8f, 8.6f, 6.0f);
                mPath.rCubicTo(3.0f, 2.6f, 1.0f, 3.5f, 7.2f, 6.5f);
                mPath.rCubicTo(0.0f, -4.8f, -1.5f, -7.2f, 0.0f, -12.0f);
                mPath.rCubicTo(1.3f, -4.5f, 2.3f, -5.0f, 4.4f, -8.6f);
                mPath.rCubicTo(0.8f, -1.4f, 3.3f, -7.7f, 3.6f, -9.1f);
                mPath.rLineTo(0.3f, -4.8f);
                mPath.rCubicTo(0.3f, -3.4f, 0.9f, -3.4f, 0.9f, -7.7f);
                mPath.rCubicTo(0.0f, -9.4f, -0.3f, -6.6f, 1.4f, -15.8f);
                mPath.rLineTo(2.0f, -8.6f);
                mPath.rCubicTo(0.0f, -1.9f, -1.2f, -3.2f, -1.5f, -5.8f);
                mPath.cubicTo(1042.0f, 775.8f, 1042.2f, 772.6f, 1040.1f, 770.6f);
                mPath.lineTo(1040.1f, 770.6f);
                mPath.close();
                mPath.moveTo(1040.1f, 770.6f);
                break;
            case 29:
                mPath.moveTo(889.6f, 410.7f);
                mPath.rCubicTo(-0.1f, 3.7f, 0.5f, 6.0f, 1.0f, 9.5f);
                mPath.rCubicTo(-1.3f, -0.1f, -4.8f, -1.2f, -5.8f, 0.0f);
                mPath.rCubicTo(-1.7f, 1.9f, 1.6f, 7.9f, 1.8f, 10.2f);
                mPath.rLineTo(-1.2f, 8.6f);
                mPath.rCubicTo(-0.1f, 1.0f, -0.1f, 2.0f, 0.4f, 2.9f);
                mPath.rCubicTo(0.9f, 1.6f, 4.9f, 4.2f, 6.7f, 4.4f);
                mPath.rCubicTo(1.4f, 0.2f, 6.9f, -1.1f, 8.7f, -1.5f);
                mPath.rLineTo(0.0f, -4.8f);
                mPath.rCubicTo(0.4f, -2.6f, 2.3f, -9.2f, 4.4f, -10.7f);
                mPath.rCubicTo(0.9f, -0.7f, 1.7f, -0.7f, 2.8f, -0.8f);
                mPath.rLineTo(-3.4f, -9.1f);
                mPath.rLineTo(-3.8f, 1.0f);
                mPath.rLineTo(-2.7f, -4.8f);
                mPath.rLineTo(-1.2f, -5.8f);
                mPath.rLineTo(3.4f, -1.0f);
                mPath.rCubicTo(-2.9f, -3.2f, -8.6f, -6.4f, -10.8f, -0.5f);
                mPath.cubicTo(889.6f, 409.09998f, 889.6f, 409.90002f, 889.6f, 410.7f);
                mPath.lineTo(889.6f, 410.7f);
                mPath.close();
                mPath.moveTo(889.6f, 410.7f);
                break;

        }
    }

    private void renderByProvince4(int index) {
        switch (index) {
            case 30:
                mPath.moveTo(288.3f, 202.20001f);
                mPath.rCubicTo(-1.0f, -0.4f, -3.2f, -0.3f, -4.3f, -0.3f);
                mPath.rCubicTo(-1.3f, 4.9f, -2.5f, 4.8f, -4.6f, 8.6f);
                mPath.rCubicTo(-3.5f, 6.2f, -2.5f, 5.5f, -7.4f, 12.0f);
                mPath.rCubicTo(-1.8f, 2.4f, -4.5f, 4.7f, -5.7f, 7.2f);
                mPath.rCubicTo(-1.1f, 2.4f, -2.1f, 6.5f, -1.9f, 9.1f);
                mPath.rCubicTo(0.2f, 2.0f, 1.0f, 2.9f, 1.2f, 4.3f);
                mPath.rCubicTo(0.2f, 1.4f, -0.4f, 3.4f, -0.7f, 4.8f);
                mPath.rCubicTo(-3.9f, -2.9f, -4.2f, -1.3f, -6.2f, -2.4f);
                mPath.rCubicTo(-1.4f, -0.8f, -2.2f, -2.9f, -3.9f, -4.0f);
                mPath.rCubicTo(-1.4f, -0.9f, -3.2f, -0.8f, -4.8f, -0.8f);
                mPath.rLineTo(-13.0f, 1.4f);
                mPath.rLineTo(-6.2f, 0.0f);
                mPath.rLineTo(-3.8f, -0.6f);
                mPath.rCubicTo(-2.4f, -0.2f, -6.2f, 0.5f, -6.6f, 3.5f);
                mPath.rCubicTo(-0.3f, 2.6f, 3.6f, 4.0f, 3.9f, 7.2f);
                mPath.rLineTo(-1.6f, 15.4f);
                mPath.rLineTo(0.0f, 5.8f);
                mPath.rCubicTo(0.4f, 3.4f, 0.9f, 3.4f, 0.9f, 7.7f);
                mPath.rLineTo(0.0f, 10.1f);
                mPath.rCubicTo(-2.0f, -0.4f, -4.9f, -1.5f, -6.0f, 1.1f);
                mPath.rCubicTo(-0.6f, 1.3f, 0.1f, 3.0f, -1.4f, 4.3f);
                mPath.rCubicTo(-1.1f, 0.9f, -6.2f, 1.9f, -7.2f, 4.4f);
                mPath.rCubicTo(-0.8f, 1.7f, 0.5f, 6.5f, -2.1f, 9.9f);
                mPath.rCubicTo(-1.1f, 1.4f, -2.9f, 1.7f, -4.4f, 2.5f);
                mPath.rLineTo(-4.3f, 2.7f);
                mPath.rCubicTo(-5.3f, 2.9f, -5.7f, 1.5f, -10.1f, 2.3f);
                mPath.rLineTo(-9.6f, 2.4f);
                mPath.rLineTo(-9.1f, 2.3f);
                mPath.rCubicTo(-2.6f, -0.2f, -3.9f, -3.7f, -7.7f, -3.7f);
                mPath.rCubicTo(-2.6f, 0.0f, -3.6f, 2.1f, -5.8f, 2.7f);
                mPath.rLineTo(-7.2f, 0.4f);
                mPath.rLineTo(-0.5f, 4.8f);
                mPath.rCubicTo(-4.5f, -0.9f, -5.0f, -2.1f, -6.7f, -2.4f);
                mPath.rCubicTo(-5.4f, -1.0f, -7.2f, 7.0f, -12.0f, 10.8f);
                mPath.rCubicTo(-4.0f, 3.2f, -5.4f, 0.7f, -9.1f, 1.0f);
                mPath.rCubicTo(-2.0f, 0.2f, -5.3f, 1.4f, -6.9f, -0.5f);
                mPath.rCubicTo(-0.8f, -1.0f, -0.3f, -2.8f, -0.4f, -4.1f);
                mPath.rCubicTo(-0.1f, -1.9f, -0.6f, -3.1f, -1.4f, -4.8f);
                mPath.rLineTo(-7.9f, 2.3f);
                mPath.rLineTo(-5.6f, -2.7f);
                mPath.rLineTo(0.0f, 4.3f);
                mPath.rCubicTo(-6.2f, -2.3f, -6.8f, 1.2f, -10.6f, 1.8f);
                mPath.rCubicTo(-1.5f, 0.2f, -2.4f, -0.6f, -3.8f, -0.7f);
                mPath.rCubicTo(-2.7f, -0.1f, -6.4f, 2.0f, -7.9f, 4.1f);
                mPath.rCubicTo(-1.6f, 2.2f, -0.9f, 3.8f, -2.4f, 5.5f);
                mPath.rCubicTo(-1.8f, 2.0f, -4.7f, 2.4f, -6.6f, 6.0f);
                mPath.rCubicTo(-1.2f, 2.3f, 0.4f, 3.3f, 0.5f, 5.1f);
                mPath.rCubicTo(0.3f, 3.3f, -2.7f, 6.3f, -5.2f, 7.9f);
                mPath.rCubicTo(0.9f, 2.1f, 2.8f, 6.7f, 4.8f, 7.6f);
                mPath.rCubicTo(2.0f, 1.0f, 4.1f, -0.9f, 6.0f, -0.9f);
                mPath.rCubicTo(2.5f, 0.0f, 6.8f, 3.8f, 8.2f, 5.8f);
                mPath.rCubicTo(1.9f, 2.7f, -0.3f, 5.9f, -0.9f, 8.6f);
                mPath.rCubicTo(-0.6f, 2.3f, 0.2f, 3.4f, 0.0f, 5.8f);
                mPath.rLineTo(-2.1f, 9.1f);
                mPath.rCubicTo(-0.2f, 3.1f, 3.7f, 4.5f, -0.3f, 8.0f);
                mPath.rCubicTo(-3.0f, 2.5f, -5.0f, 0.1f, -7.1f, 0.0f);
                mPath.rCubicTo(-0.9f, 0.1f, -3.2f, 0.8f, -4.3f, 1.1f);
                mPath.rLineTo(8.2f, 6.7f);
                mPath.rLineTo(3.8f, 2.1f);
                mPath.rCubicTo(3.7f, 2.8f, 3.6f, 4.9f, 4.8f, 6.3f);
                mPath.rCubicTo(1.2f, 1.3f, 2.5f, 0.9f, 4.0f, 2.7f);
                mPath.rCubicTo(2.5f, 3.0f, 2.8f, 9.8f, 1.4f, 13.4f);
                mPath.rCubicTo(-0.6f, 1.4f, -1.6f, 2.6f, -2.6f, 3.8f);
                mPath.rCubicTo(2.5f, 3.5f, 2.9f, 2.8f, 2.9f, 7.2f);
                mPath.rCubicTo(6.1f, 0.0f, 5.0f, 2.2f, 8.5f, 6.1f);
                mPath.rCubicTo(1.5f, 1.7f, 3.2f, 2.2f, 4.8f, 3.7f);
                mPath.rCubicTo(1.3f, 1.2f, 2.0f, 2.6f, 3.5f, 3.7f);
                mPath.rCubicTo(3.0f, 2.2f, 9.2f, 2.8f, 12.9f, 4.1f);
                mPath.rCubicTo(1.5f, 0.5f, 2.9f, 1.4f, 4.3f, 2.1f);
                mPath.rCubicTo(-2.3f, 2.7f, -3.5f, 4.5f, -2.7f, 8.2f);
                mPath.rLineTo(1.3f, 3.8f);
                mPath.rLineTo(-0.5f, 7.2f);
                mPath.rCubicTo(0.1f, 3.4f, 1.5f, 2.4f, 5.3f, 5.8f);
                mPath.rCubicTo(1.6f, 1.4f, 5.6f, 6.0f, 7.2f, 6.6f);
                mPath.rCubicTo(1.6f, 0.7f, 4.0f, -0.3f, 5.8f, -0.3f);
                mPath.rLineTo(8.6f, 1.4f);
                mPath.rCubicTo(2.4f, 0.1f, 4.2f, -3.2f, 5.6f, -4.9f);
                mPath.rLineTo(5.5f, -7.6f);
                mPath.rLineTo(3.8f, -3.4f);
                mPath.rCubicTo(1.0f, -1.0f, 2.6f, -2.8f, 3.8f, -3.3f);
                mPath.rCubicTo(3.1f, -1.4f, 6.7f, 2.0f, 9.1f, 3.4f);
                mPath.rCubicTo(1.9f, 1.1f, 4.1f, 1.9f, 6.2f, 2.2f);
                mPath.rCubicTo(1.2f, 0.2f, 3.3f, 0.0f, 4.3f, 0.4f);
                mPath.rCubicTo(1.7f, 0.7f, 1.9f, 2.3f, 3.1f, 3.1f);
                mPath.rCubicTo(0.9f, 0.6f, 2.6f, 0.5f, 3.6f, 0.5f);
                mPath.rCubicTo(1.5f, 0.0f, 3.9f, 0.2f, 5.3f, -0.5f);
                mPath.rCubicTo(2.0f, -1.0f, 7.7f, -7.8f, 13.2f, -6.7f);
                mPath.rCubicTo(2.5f, 0.5f, 6.7f, 3.0f, 8.0f, 5.2f);
                mPath.rCubicTo(0.6f, 1.2f, 0.9f, 3.4f, 1.0f, 4.8f);
                mPath.rCubicTo(6.0f, 0.5f, 5.2f, 2.2f, 8.6f, 3.4f);
                mPath.rCubicTo(4.2f, 1.5f, 6.4f, 0.2f, 8.6f, 0.5f);
                mPath.rCubicTo(1.5f, 0.2f, 2.6f, 1.0f, 3.8f, 1.0f);
                mPath.rCubicTo(1.8f, -0.1f, 4.8f, -2.5f, 6.7f, -3.1f);
                mPath.rCubicTo(2.1f, -0.7f, 5.4f, -0.1f, 7.7f, -0.5f);
                mPath.rCubicTo(2.0f, -0.4f, 4.7f, -2.0f, 6.7f, -2.0f);
                mPath.rCubicTo(3.7f, -0.1f, 6.6f, 4.7f, 9.1f, 4.5f);
                mPath.rCubicTo(2.2f, -0.2f, 8.9f, -4.5f, 10.5f, -6.2f);
                mPath.rCubicTo(1.5f, -1.5f, 2.7f, -3.6f, 4.8f, -4.1f);
                mPath.rLineTo(9.1f, -0.8f);
                mPath.rCubicTo(1.7f, 0.1f, 2.3f, 0.7f, 4.3f, 0.5f);
                mPath.rLineTo(8.2f, -1.2f);
                mPath.rCubicTo(1.5f, 0.2f, 2.4f, 1.5f, 3.8f, 2.0f);
                mPath.rCubicTo(1.1f, 0.4f, 3.6f, 0.3f, 4.8f, 0.3f);
                mPath.rLineTo(8.6f, -1.0f);
                mPath.rCubicTo(2.9f, -0.1f, 5.2f, 0.3f, 7.5f, 2.2f);
                mPath.rCubicTo(1.2f, 1.0f, 1.9f, 2.4f, 3.1f, 3.0f);
                mPath.rCubicTo(1.6f, 0.9f, 2.1f, -0.2f, 6.2f, 1.8f);
                mPath.rLineTo(9.1f, 5.7f);
                mPath.rCubicTo(1.8f, 0.8f, 5.2f, 2.1f, 7.2f, 1.6f);
                mPath.rCubicTo(1.4f, -0.4f, 2.9f, -1.7f, 4.1f, -1.7f);
                mPath.rCubicTo(1.0f, 0.0f, 2.9f, 1.4f, 4.0f, 1.8f);
                mPath.rLineTo(5.3f, 1.5f);
                mPath.rCubicTo(1.3f, 0.7f, 2.4f, 2.2f, 3.4f, 3.3f);
                mPath.rCubicTo(1.2f, -0.7f, 2.3f, -1.4f, 3.3f, -2.4f);
                mPath.rCubicTo(2.4f, -2.1f, 2.6f, -5.9f, 1.2f, -8.7f);
                mPath.rCubicTo(-1.0f, -1.9f, -3.4f, -4.9f, -3.0f, -7.2f);
                mPath.rCubicTo(0.6f, -4.1f, 6.6f, -5.0f, 8.1f, -6.0f);
                mPath.rCubicTo(1.3f, -0.9f, 2.7f, -2.3f, 2.5f, -4.0f);
                mPath.rCubicTo(-0.3f, -2.2f, -3.4f, -6.3f, -4.7f, -8.2f);
                mPath.rCubicTo(-1.0f, -1.5f, -1.9f, -3.4f, -3.2f, -4.6f);
                mPath.rCubicTo(-1.3f, -1.2f, -4.1f, -2.8f, -4.9f, -4.1f);
                mPath.rCubicTo(-1.5f, -2.1f, 0.7f, -3.3f, 0.0f, -6.2f);
                mPath.rCubicTo(-0.5f, -2.6f, -2.7f, -8.3f, -1.9f, -11.0f);
                mPath.rCubicTo(0.5f, -1.6f, 2.6f, -2.0f, 4.0f, -2.7f);
                mPath.rCubicTo(1.4f, -0.7f, 3.1f, -2.1f, 4.3f, -2.4f);
                mPath.rLineTo(7.2f, 0.3f);
                mPath.rCubicTo(4.1f, 0.0f, 5.4f, -1.1f, 9.1f, -1.8f);
                mPath.rLineTo(9.6f, -1.9f);
                mPath.rLineTo(6.2f, -0.9f);
                mPath.rLineTo(3.8f, -1.3f);
                mPath.rCubicTo(2.2f, -0.6f, 7.7f, -0.3f, 9.2f, -1.7f);
                mPath.rCubicTo(1.0f, -1.0f, 1.4f, -5.8f, 1.3f, -7.3f);
                mPath.lineTo(427.0f, 413.8f);
                mPath.rCubicTo(0.3f, -1.5f, 2.3f, -3.5f, 3.0f, -5.5f);
                mPath.rCubicTo(0.6f, -1.6f, 1.2f, -8.6f, 1.3f, -10.6f);
                mPath.rCubicTo(2.1f, 0.5f, 5.2f, 1.7f, 7.2f, 1.5f);
                mPath.rCubicTo(6.9f, -0.6f, 6.9f, -3.8f, 10.3f, -8.2f);
                mPath.rLineTo(7.4f, -7.6f);
                mPath.rCubicTo(5.8f, -5.4f, 13.1f, -12.4f, 21.1f, -13.8f);
                mPath.rCubicTo(4.2f, -0.7f, 5.0f, 0.2f, 8.6f, 0.3f);
                mPath.rCubicTo(1.0f, 0.0f, 2.5f, 0.0f, 3.4f, -0.3f);
                mPath.rCubicTo(7.5f, -2.8f, 3.9f, -12.8f, 6.5f, -17.9f);
                mPath.rCubicTo(0.8f, -1.6f, 3.9f, -2.7f, 5.5f, -3.5f);
                mPath.rCubicTo(-0.4f, -1.9f, -0.7f, -4.1f, -1.6f, -5.8f);
                mPath.rLineTo(-6.0f, -8.6f);
                mPath.rCubicTo(-0.8f, -1.7f, -0.4f, -3.0f, -0.7f, -4.8f);
                mPath.rLineTo(-1.8f, -5.3f);
                mPath.rCubicTo(-1.5f, -5.1f, -0.4f, -8.3f, -6.6f, -9.6f);
                mPath.rLineTo(1.0f, -6.3f);
                mPath.rCubicTo(-0.8f, 0.1f, -1.6f, 0.1f, -2.4f, 0.0f);
                mPath.rLineTo(-8.0f, -3.2f);
                mPath.rCubicTo(-1.1f, -0.9f, -1.4f, -2.2f, -2.4f, -3.1f);
                mPath.rLineTo(-3.4f, -2.4f);
                mPath.rLineTo(-2.4f, -3.4f);
                mPath.rLineTo(-8.8f, -7.1f);
                mPath.rCubicTo(-3.4f, -2.4f, -11.2f, -4.6f, -15.4f, -4.7f);
                mPath.rCubicTo(-1.9f, 0.1f, -3.9f, 0.2f, -5.8f, 0.0f);
                mPath.rCubicTo(-4.6f, -0.9f, -5.3f, -2.8f, -9.1f, -3.5f);
                mPath.rLineTo(-3.8f, -0.5f);
                mPath.rCubicTo(-1.5f, -0.5f, -2.3f, -1.8f, -3.8f, -2.3f);
                mPath.rLineTo(-3.4f, -0.5f);
                mPath.rLineTo(-2.9f, -1.3f);
                mPath.rCubicTo(-1.9f, -0.7f, -3.4f, 0.0f, -4.3f, -2.4f);
                mPath.rCubicTo(-0.6f, -1.6f, -2.1f, -7.6f, -1.7f, -9.1f);
                mPath.rCubicTo(1.4f, -5.0f, 6.0f, -6.5f, 7.1f, -12.0f);
                mPath.rCubicTo(0.6f, -2.7f, -0.5f, -4.1f, 0.0f, -6.0f);
                mPath.rLineTo(1.9f, -5.1f);
                mPath.rCubicTo(0.6f, -2.1f, 0.4f, -7.1f, -0.3f, -9.1f);
                mPath.rCubicTo(-1.0f, -2.9f, -3.6f, -4.0f, -5.0f, -8.6f);
                mPath.rCubicTo(-1.2f, -4.2f, 0.0f, -7.7f, -1.4f, -10.5f);
                mPath.rCubicTo(-0.9f, -1.9f, -2.4f, -1.9f, -3.7f, -3.5f);
                mPath.rCubicTo(-1.0f, -1.2f, -1.3f, -2.7f, -2.1f, -3.2f);
                mPath.rCubicTo(-1.1f, -0.7f, -2.3f, 0.3f, -3.7f, -0.8f);
                mPath.rCubicTo(-1.2f, -0.9f, -1.7f, -2.9f, -3.6f, -3.9f);
                mPath.rCubicTo(-2.4f, -1.2f, -3.2f, 0.7f, -5.7f, -1.2f);
                mPath.rLineTo(-7.8f, -6.6f);
                mPath.rCubicTo(-1.2f, -1.6f, -1.2f, -3.5f, -2.5f, -5.0f);
                mPath.rCubicTo(-1.2f, -1.3f, -3.7f, -2.4f, -4.5f, -3.8f);
                mPath.rCubicTo(-0.9f, -1.4f, -0.2f, -3.6f, -0.8f, -5.0f);
                mPath.rLineTo(-4.5f, -5.4f);
                mPath.rLineTo(2.9f, -1.4f);
                mPath.rLineTo(-1.0f, -5.3f);
                mPath.rCubicTo(-1.9f, 0.4f, -3.9f, 1.0f, -5.8f, 0.9f);
                mPath.rCubicTo(-2.5f, -0.2f, -10.7f, -4.7f, -11.8f, 1.0f);
                mPath.rLineTo(0.0f, 3.4f);
                mPath.rCubicTo(-0.3f, 2.5f, -2.8f, 5.5f, -5.0f, 6.5f);
                mPath.rCubicTo(-0.9f, 0.4f, -6.5f, 1.7f, -7.5f, 1.7f);
                mPath.rCubicTo(-3.3f, -0.1f, -6.0f, -1.4f, -8.8f, 1.9f);
                mPath.rCubicTo(-3.1f, 3.7f, -2.6f, 4.8f, -3.0f, 9.1f);
                mPath.rLineTo(-0.8f, 5.3f);
                mPath.rCubicTo(-0.2f, 2.5f, 0.2f, 4.8f, -0.4f, 7.2f);
                mPath.rCubicTo(-0.7f, 2.9f, -2.3f, 6.8f, -5.4f, 7.9f);
                mPath.rCubicTo(-2.5f, 0.8f, -5.7f, -1.2f, -8.2f, -1.4f);
                mPath.rCubicTo(-1.6f, -0.1f, -2.6f, 0.6f, -4.3f, 0.4f);
                mPath.rLineTo(-5.8f, -1.5f);
                mPath.rCubicTo(-2.8f, -0.3f, -4.1f, 0.3f, -7.2f, -1.0f);
                mPath.rLineTo(-6.2f, -3.2f);
                mPath.cubicTo(291.5f, 204.8f, 290.1f, 202.8f, 288.3f, 202.20001f);
                mPath.lineTo(288.3f, 202.20001f);
                mPath.close();
                mPath.moveTo(288.3f, 202.20001f);
                break;
            case 31:
                mPath.moveTo(149.1f, 615.0f);
                mPath.rCubicTo(0.8f, 1.1f, 2.2f, 1.6f, 3.4f, 2.1f);
                mPath.rCubicTo(1.1f, -1.4f, 3.1f, -4.0f, 4.4f, -5.1f);
                mPath.rCubicTo(3.0f, -2.5f, 4.5f, -1.9f, 7.6f, -0.3f);
                mPath.rCubicTo(1.0f, 0.5f, 2.4f, 1.1f, 3.2f, 1.9f);
                mPath.rCubicTo(2.1f, 1.8f, 3.9f, 6.3f, 5.3f, 8.8f);
                mPath.rCubicTo(1.4f, 2.3f, 2.7f, 2.6f, 4.2f, 4.4f);
                mPath.rCubicTo(1.9f, 2.3f, 1.4f, 3.5f, 5.0f, 6.4f);
                mPath.rCubicTo(2.2f, 1.7f, 6.0f, 3.5f, 7.4f, 5.2f);
                mPath.rCubicTo(2.3f, 2.9f, 2.8f, 7.3f, 6.5f, 10.2f);
                mPath.rCubicTo(3.3f, 2.5f, 3.6f, 0.1f, 6.2f, 0.5f);
                mPath.rCubicTo(2.1f, 0.3f, 5.2f, 2.6f, 6.0f, 4.6f);
                mPath.rCubicTo(0.4f, 1.0f, 0.3f, 2.7f, 0.3f, 3.8f);
                mPath.rCubicTo(0.0f, 5.9f, 3.4f, 6.6f, 7.2f, 9.8f);
                mPath.rCubicTo(1.2f, 1.0f, 2.0f, 2.3f, 3.4f, 2.9f);
                mPath.rCubicTo(1.4f, 0.5f, 3.3f, 0.0f, 4.6f, 0.8f);
                mPath.rCubicTo(2.4f, 1.5f, 2.6f, 6.6f, 3.8f, 7.7f);
                mPath.rCubicTo(0.6f, 0.5f, 7.4f, 2.1f, 9.7f, 3.8f);
                mPath.rCubicTo(1.6f, 1.2f, 1.8f, 3.6f, 2.6f, 5.3f);
                mPath.rCubicTo(0.8f, 1.7f, 2.2f, 3.2f, 3.2f, 4.8f);
                mPath.rLineTo(1.9f, -3.4f);
                mPath.rCubicTo(1.6f, 1.1f, 4.7f, 4.6f, 6.2f, 4.7f);
                mPath.rCubicTo(2.9f, 0.2f, 3.0f, -3.0f, 7.7f, -1.0f);
                mPath.rCubicTo(1.9f, 0.8f, 4.1f, 2.1f, 5.6f, 3.7f);
                mPath.rCubicTo(0.8f, 0.8f, 1.4f, 2.2f, 2.3f, 2.7f);
                mPath.rCubicTo(1.4f, 0.9f, 5.1f, 0.3f, 7.0f, 0.7f);
                mPath.rCubicTo(1.7f, 0.4f, 3.0f, 1.4f, 4.3f, 1.4f);
                mPath.rCubicTo(1.7f, 0.0f, 2.7f, -1.4f, 4.3f, -1.5f);
                mPath.rLineTo(3.4f, 0.7f);
                mPath.rCubicTo(1.4f, 0.3f, 4.8f, 0.2f, 6.2f, 0.0f);
                mPath.rCubicTo(4.0f, -0.8f, 5.3f, -2.5f, 7.7f, -1.3f);
                mPath.rCubicTo(7.3f, 3.7f, 2.1f, 8.5f, 1.9f, 13.9f);
                mPath.rCubicTo(-0.1f, 3.9f, 0.7f, 5.3f, 3.8f, 7.7f);
                mPath.rCubicTo(0.8f, -2.9f, 2.0f, -8.0f, 3.9f, -10.1f);
                mPath.rCubicTo(2.1f, -2.4f, 3.8f, -3.2f, 5.6f, -4.9f);
                mPath.rCubicTo(2.7f, -2.6f, 3.1f, -4.6f, 7.3f, -5.8f);
                mPath.rCubicTo(2.3f, -0.6f, 8.6f, 0.2f, 10.6f, 1.4f);
                mPath.rCubicTo(1.6f, 1.0f, 2.8f, 2.8f, 4.8f, 3.9f);
                mPath.rLineTo(7.7f, 2.6f);
                mPath.rCubicTo(2.3f, 1.0f, 3.0f, 2.3f, 4.8f, 2.7f);
                mPath.rLineTo(5.8f, -0.3f);
                mPath.rCubicTo(3.7f, 0.0f, 4.6f, -0.2f, 6.4f, 3.4f);
                mPath.rCubicTo(0.5f, 1.0f, 0.9f, 1.8f, 1.0f, 2.9f);
                mPath.rCubicTo(0.0f, 1.6f, -1.0f, 3.6f, 0.0f, 5.0f);
                mPath.rCubicTo(2.2f, 2.8f, 7.5f, 2.6f, 8.6f, 6.0f);
                mPath.rCubicTo(1.8f, 5.0f, -2.2f, 6.7f, 0.0f, 11.0f);
                mPath.rCubicTo(0.4f, 1.0f, 0.8f, 1.5f, 1.8f, 1.9f);
                mPath.rCubicTo(0.6f, 0.1f, 2.1f, 0.1f, 2.8f, 0.0f);
                mPath.rLineTo(6.2f, -0.5f);
                mPath.rLineTo(3.4f, 1.2f);
                mPath.rLineTo(4.3f, 0.6f);
                mPath.rLineTo(4.8f, 1.3f);
                mPath.rLineTo(5.8f, -0.6f);
                mPath.rCubicTo(2.1f, -0.1f, 5.2f, 0.0f, 7.1f, -0.9f);
                mPath.rCubicTo(1.9f, -0.9f, 1.9f, -2.7f, 3.2f, -4.3f);
                mPath.rLineTo(7.9f, -7.0f);
                mPath.rCubicTo(3.5f, -2.6f, 6.5f, -0.9f, 10.1f, -2.3f);
                mPath.rCubicTo(3.0f, -1.2f, 12.5f, -5.4f, 14.9f, -7.0f);
                mPath.rCubicTo(3.5f, -2.4f, 3.6f, -5.1f, 9.1f, -6.1f);
                mPath.rCubicTo(5.0f, -0.9f, 5.9f, 0.8f, 10.1f, 2.4f);
                mPath.rCubicTo(3.2f, 1.2f, 6.9f, 2.0f, 9.6f, 4.3f);
                mPath.rLineTo(3.4f, 3.1f);
                mPath.rLineTo(3.8f, 2.7f);
                mPath.rCubicTo(0.8f, 0.7f, 2.0f, 2.2f, 3.0f, 2.3f);
                mPath.rCubicTo(2.1f, 0.3f, 4.0f, -2.8f, 4.8f, -4.4f);
                mPath.rCubicTo(1.9f, -3.8f, 4.1f, -11.1f, 8.5f, -12.8f);
                mPath.rCubicTo(2.4f, -1.0f, 3.0f, 2.4f, 5.4f, 4.3f);
                mPath.rCubicTo(0.9f, 0.8f, 5.7f, 3.8f, 6.6f, 3.8f);
                mPath.rCubicTo(1.0f, 0.0f, 3.3f, -1.5f, 4.3f, -2.0f);
                mPath.rCubicTo(0.5f, 1.0f, 1.1f, 2.3f, 2.1f, 2.9f);
                mPath.rCubicTo(1.2f, 0.7f, 4.7f, -0.3f, 5.2f, -1.6f);
                mPath.rCubicTo(0.4f, -1.1f, -1.1f, -8.4f, -1.2f, -10.3f);
                mPath.rCubicTo(-0.1f, -2.1f, 1.8f, -5.3f, 2.4f, -7.8f);
                mPath.rLineTo(4.8f, 2.9f);
                mPath.rLineTo(2.0f, -5.3f);
                mPath.rLineTo(2.1f, -3.8f);
                mPath.rLineTo(-1.6f, -11.0f);
                mPath.rLineTo(1.7f, -7.7f);
                mPath.rLineTo(-1.7f, -7.2f);
                mPath.rLineTo(0.0f, -7.2f);
                mPath.rLineTo(-1.0f, -6.7f);
                mPath.rLineTo(-3.4f, -10.1f);
                mPath.rLineTo(0.7f, -4.0f);
                mPath.rLineTo(3.1f, -1.2f);
                mPath.rLineTo(-2.7f, -2.9f);
                mPath.rLineTo(-4.8f, -7.6f);
                mPath.rCubicTo(-0.7f, -1.8f, -0.6f, -3.6f, -1.0f, -5.3f);
                mPath.rCubicTo(-0.6f, -2.4f, -3.7f, -9.3f, -5.5f, -10.9f);
                mPath.rCubicTo(-2.4f, -2.0f, -7.0f, -3.5f, -10.1f, -3.6f);
                mPath.rCubicTo(-1.7f, 0.0f, -3.6f, -0.3f, -4.8f, 1.1f);
                mPath.rCubicTo(-1.0f, 1.2f, -2.1f, 4.0f, -2.5f, 5.6f);
                mPath.rCubicTo(-0.2f, 1.1f, -0.4f, 2.8f, -1.2f, 3.6f);
                mPath.rCubicTo(-1.0f, 1.0f, -2.6f, 0.6f, -4.0f, 1.0f);
                mPath.rCubicTo(-1.2f, 0.4f, -2.8f, 1.6f, -3.7f, 2.5f);
                mPath.rCubicTo(-2.4f, 2.3f, -1.9f, 5.0f, -3.6f, 5.7f);
                mPath.rCubicTo(-2.3f, 0.8f, -5.5f, -2.8f, -7.1f, -3.9f);
                mPath.rCubicTo(-1.4f, -1.0f, -2.7f, -1.2f, -4.3f, -1.7f);
                mPath.rLineTo(-1.0f, 5.8f);
                mPath.rLineTo(-8.6f, -3.0f);
                mPath.rCubicTo(-1.2f, -0.4f, -3.7f, -1.1f, -4.5f, -2.0f);
                mPath.rCubicTo(-1.6f, -1.8f, 0.2f, -4.0f, -1.9f, -8.4f);
                mPath.rCubicTo(-0.5f, -1.1f, -1.2f, -2.5f, -2.4f, -3.1f);
                mPath.rCubicTo(-1.4f, -0.6f, -2.7f, 0.2f, -4.5f, -1.4f);
                mPath.rCubicTo(-2.7f, -2.5f, -4.6f, -8.5f, -8.4f, -9.4f);
                mPath.rCubicTo(-2.0f, -0.5f, -6.6f, 2.5f, -9.1f, 2.8f);
                mPath.rCubicTo(-4.1f, 0.5f, -6.8f, -3.5f, -10.1f, -4.2f);
                mPath.rCubicTo(-1.5f, -0.3f, -3.4f, 0.1f, -5.3f, -0.4f);
                mPath.rLineTo(-10.6f, -4.1f);
                mPath.rCubicTo(-3.0f, -0.9f, -6.8f, -1.4f, -9.6f, -2.9f);
                mPath.rCubicTo(-1.7f, -0.9f, -2.7f, -2.3f, -3.8f, -2.9f);
                mPath.rCubicTo(-2.1f, -1.2f, -3.3f, 0.4f, -5.3f, -0.7f);
                mPath.rCubicTo(-1.0f, -0.5f, -2.5f, -2.2f, -3.4f, -3.0f);
                mPath.rCubicTo(-4.5f, -4.5f, -5.4f, -4.8f, -6.7f, -11.0f);
                mPath.rCubicTo(-5.3f, 1.7f, -4.8f, 1.5f, -10.1f, 2.0f);
                mPath.rCubicTo(-1.3f, 0.1f, -3.1f, 0.7f, -4.3f, 0.4f);
                mPath.rCubicTo(-1.5f, -0.4f, -3.7f, -2.3f, -4.8f, -3.4f);
                mPath.rCubicTo(-1.3f, -1.2f, -4.0f, -3.8f, -4.9f, -5.2f);
                mPath.rLineTo(-3.1f, -7.2f);
                mPath.rCubicTo(-2.0f, -3.9f, -3.9f, -3.0f, -4.7f, -8.2f);
                mPath.rCubicTo(-0.8f, -5.0f, 1.4f, -3.5f, 3.0f, -6.4f);
                mPath.rCubicTo(0.5f, -0.9f, 0.9f, -3.6f, 1.0f, -4.7f);
                mPath.rLineTo(-0.6f, -5.8f);
                mPath.rCubicTo(0.1f, -1.6f, 1.4f, -4.9f, 1.1f, -6.2f);
                mPath.rCubicTo(-0.3f, -1.6f, -2.0f, -2.3f, -2.8f, -3.9f);
                mPath.rCubicTo(-0.8f, -1.5f, -1.0f, -5.2f, -1.4f, -7.2f);
                mPath.rCubicTo(9.3f, -2.9f, 6.5f, -11.9f, 2.9f, -18.2f);
                mPath.rLineTo(4.3f, -1.0f);
                mPath.rLineTo(-3.4f, -2.0f);
                mPath.rCubicTo(-3.2f, -2.1f, -3.7f, -3.1f, -7.7f, -4.8f);
                mPath.rCubicTo(-2.8f, -1.3f, -3.7f, -0.6f, -5.3f, -1.4f);
                mPath.rCubicTo(-1.3f, -0.7f, -2.2f, -2.2f, -3.4f, -3.2f);
                mPath.rCubicTo(-2.0f, -1.7f, -3.7f, -2.1f, -6.2f, -2.1f);
                mPath.rLineTo(-10.6f, 1.0f);
                mPath.rCubicTo(-1.4f, 0.0f, -3.1f, 0.1f, -4.3f, -0.5f);
                mPath.rCubicTo(-1.4f, -0.7f, -2.1f, -1.9f, -3.8f, -2.0f);
                mPath.rLineTo(-8.6f, 1.3f);
                mPath.rLineTo(-4.3f, -0.6f);
                mPath.rLineTo(-9.1f, 0.9f);
                mPath.rCubicTo(-2.1f, 0.5f, -3.1f, 2.6f, -4.5f, 4.0f);
                mPath.rCubicTo(-1.5f, 1.5f, -8.3f, 5.7f, -10.3f, 6.1f);
                mPath.rCubicTo(-1.4f, 0.2f, -2.4f, -1.1f, -3.4f, -1.8f);
                mPath.rCubicTo(-1.8f, -1.4f, -3.9f, -2.8f, -6.2f, -2.5f);
                mPath.rCubicTo(-2.3f, 0.2f, -4.2f, 1.4f, -6.2f, 2.0f);
                mPath.rCubicTo(-1.6f, 0.4f, -3.6f, 0.3f, -5.3f, 0.3f);
                mPath.rCubicTo(-5.0f, 0.1f, -5.8f, 2.6f, -8.6f, 3.1f);
                mPath.rCubicTo(-1.6f, 0.3f, -2.7f, -0.8f, -4.3f, -0.9f);
                mPath.rCubicTo(-2.4f, -0.1f, -3.3f, 1.2f, -7.7f, 0.0f);
                mPath.rCubicTo(-2.3f, -0.8f, -3.2f, -2.1f, -5.3f, -2.9f);
                mPath.rCubicTo(-1.4f, -0.5f, -3.1f, -0.5f, -4.0f, -1.5f);
                mPath.rCubicTo(-1.2f, -1.2f, -0.9f, -3.5f, -1.7f, -5.0f);
                mPath.rCubicTo(-1.1f, -2.0f, -5.4f, -4.1f, -7.7f, -4.4f);
                mPath.rCubicTo(-6.1f, -0.8f, -11.2f, 5.7f, -13.4f, 6.8f);
                mPath.rCubicTo(-1.0f, 0.5f, -1.8f, 0.5f, -2.9f, 0.5f);
                mPath.rCubicTo(-1.3f, 0.0f, -4.5f, 0.2f, -5.6f, -0.5f);
                mPath.rCubicTo(-1.2f, -0.8f, -1.4f, -2.5f, -2.8f, -3.1f);
                mPath.rCubicTo(-0.8f, -0.4f, -3.1f, -0.3f, -4.1f, -0.4f);
                mPath.rCubicTo(-2.0f, -0.3f, -4.0f, -1.0f, -5.8f, -1.9f);
                mPath.rCubicTo(-2.8f, -1.5f, -6.5f, -5.1f, -10.1f, -3.9f);
                mPath.rCubicTo(-1.5f, 0.5f, -3.2f, 2.4f, -4.3f, 3.5f);
                mPath.rCubicTo(-1.6f, 1.5f, -3.1f, 2.5f, -4.4f, 4.3f);
                mPath.rCubicTo(-1.7f, 2.4f, -6.0f, 9.2f, -8.2f, 10.8f);
                mPath.rCubicTo(-1.7f, 1.2f, -3.8f, 0.4f, -5.7f, 0.0f);
                mPath.rCubicTo(-3.2f, -0.6f, -5.9f, -1.0f, -9.1f, 0.0f);
                mPath.rCubicTo(-2.5f, 0.8f, -3.2f, 2.7f, -4.9f, 4.3f);
                mPath.rLineTo(-3.9f, 2.9f);
                mPath.rCubicTo(-0.8f, 1.0f, -1.0f, 2.3f, -1.2f, 3.5f);
                mPath.rCubicTo(-0.5f, 2.2f, -2.1f, 6.1f, -1.6f, 8.2f);
                mPath.rCubicTo(1.0f, 4.5f, 4.9f, 8.9f, 5.0f, 13.9f);
                mPath.rCubicTo(0.1f, 5.6f, 1.0f, 12.4f, -5.3f, 14.9f);
                mPath.rCubicTo(-0.8f, 0.3f, -2.0f, 0.7f, -2.9f, 0.6f);
                mPath.rCubicTo(-3.2f, -0.3f, -4.7f, -5.7f, -5.7f, -6.6f);
                mPath.rCubicTo(-1.2f, -1.1f, -3.5f, 0.0f, -4.1f, 1.3f);
                mPath.rCubicTo(-0.4f, 0.8f, -0.3f, 2.3f, -0.3f, 3.2f);
                mPath.rCubicTo(-0.1f, 1.6f, -1.0f, 5.4f, -0.6f, 6.7f);
                mPath.rCubicTo(0.4f, 1.5f, 1.8f, 2.3f, 1.9f, 3.6f);
                mPath.rCubicTo(0.1f, 1.0f, -0.9f, 2.4f, -1.1f, 4.1f);
                mPath.rLineTo(0.4f, 4.8f);
                mPath.rLineTo(-1.2f, 4.8f);
                mPath.rCubicTo(-0.2f, 1.4f, 2.0f, 9.3f, 2.9f, 10.4f);
                mPath.rCubicTo(1.7f, 2.0f, 4.7f, 2.1f, 6.9f, 2.9f);
                mPath.rCubicTo(2.5f, 0.9f, 6.9f, 4.3f, 8.5f, 6.4f);
                mPath.rCubicTo(1.9f, 2.5f, 1.2f, 5.3f, 3.0f, 7.5f);
                mPath.rCubicTo(1.4f, 1.6f, 2.6f, 0.9f, 5.3f, 2.9f);
                mPath.rCubicTo(2.8f, 2.0f, 4.9f, 4.9f, 7.3f, 7.2f);
                mPath.rLineTo(3.6f, 2.7f);
                mPath.cubicTo(148.6f, 612.2f, 148.20001f, 613.8f, 149.1f, 615.0f);
                mPath.lineTo(149.1f, 615.0f);
                mPath.close();
                mPath.moveTo(149.1f, 615.0f);
                break;
            case 32:
                mPath.moveTo(530.1f, 708.39996f);
                mPath.rCubicTo(-0.1f, -3.6f, 1.4f, -8.1f, 0.0f, -11.5f);
                mPath.rCubicTo(-2.0f, 2.7f, -2.8f, 4.9f, -3.3f, 8.2f);
                mPath.rLineTo(-5.3f, -2.4f);
                mPath.rLineTo(-2.0f, 5.8f);
                mPath.lineTo(521.0f, 720.8f);
                mPath.rCubicTo(-4.8f, 0.7f, -5.2f, 2.7f, -8.2f, -1.9f);
                mPath.rCubicTo(-1.3f, 0.5f, -3.1f, 1.2f, -4.0f, 2.3f);
                mPath.rCubicTo(-0.9f, 1.0f, -0.7f, 2.2f, -0.8f, 3.5f);
                mPath.rCubicTo(0.0f, 8.5f, 1.5f, 5.9f, 3.4f, 13.0f);
                mPath.rCubicTo(1.4f, -0.5f, 3.8f, -2.2f, 5.1f, -1.5f);
                mPath.rCubicTo(2.3f, 1.2f, 3.6f, 5.3f, 3.3f, 7.7f);
                mPath.rCubicTo(-0.3f, 2.5f, -0.7f, 2.9f, -0.7f, 5.8f);
                mPath.rLineTo(0.0f, 10.1f);
                mPath.rLineTo(-1.0f, 6.7f);
                mPath.rLineTo(0.0f, 4.3f);
                mPath.rCubicTo(-0.5f, 2.4f, -2.1f, 2.5f, -2.8f, 4.0f);
                mPath.rCubicTo(-0.9f, 1.8f, 1.1f, 3.8f, 0.3f, 5.4f);
                mPath.rCubicTo(-0.5f, 1.1f, -2.7f, 1.8f, -3.7f, 2.6f);
                mPath.rCubicTo(-1.9f, 1.4f, -2.0f, 2.8f, -3.5f, 4.0f);
                mPath.rCubicTo(-1.4f, 1.1f, -3.4f, 1.2f, -4.5f, 2.2f);
                mPath.rCubicTo(-1.4f, 1.1f, -1.4f, 3.0f, -2.8f, 4.1f);
                mPath.rCubicTo(-1.8f, 1.5f, -4.0f, 0.3f, -6.2f, 2.8f);
                mPath.rCubicTo(-2.5f, 2.8f, -1.5f, 5.3f, -2.6f, 8.1f);
                mPath.rCubicTo(-1.4f, 3.3f, -4.6f, 5.3f, -4.1f, 9.6f);
                mPath.rCubicTo(0.3f, 2.1f, 1.9f, 2.5f, 2.2f, 4.8f);
                mPath.rCubicTo(0.4f, 3.6f, -1.8f, 3.7f, 0.9f, 8.6f);
                mPath.rCubicTo(5.0f, -1.4f, 6.6f, -4.0f, 13.0f, -4.3f);
                mPath.rCubicTo(6.4f, -0.3f, 4.8f, 2.3f, 13.0f, 2.4f);
                mPath.rLineTo(-4.3f, 2.4f);
                mPath.rCubicTo(2.4f, 5.5f, 3.9f, 8.6f, 4.3f, 14.9f);
                mPath.rCubicTo(0.2f, 2.8f, -0.8f, 4.2f, 0.3f, 5.4f);
                mPath.rCubicTo(2.4f, 2.5f, 10.3f, 2.3f, 13.6f, 2.3f);
                mPath.rCubicTo(-1.3f, 4.8f, -3.4f, 7.1f, -4.0f, 9.1f);
                mPath.rCubicTo(-0.7f, 2.4f, 0.6f, 4.4f, 0.0f, 6.0f);
                mPath.rCubicTo(-1.0f, 2.3f, -4.4f, 3.5f, -5.6f, 7.9f);
                mPath.rCubicTo(6.6f, 3.2f, 3.5f, 1.2f, 7.7f, 2.1f);
                mPath.rCubicTo(3.4f, 0.7f, 3.2f, 2.6f, 9.1f, 0.8f);
                mPath.rCubicTo(0.6f, 1.5f, 1.5f, 3.2f, 1.8f, 4.8f);
                mPath.rCubicTo(0.3f, 1.7f, -0.1f, 3.4f, 0.6f, 4.8f);
                mPath.rCubicTo(0.8f, 1.7f, 4.4f, 4.6f, 6.2f, 4.8f);
                mPath.rCubicTo(1.2f, 0.2f, 2.2f, -0.3f, 3.8f, 0.0f);
                mPath.rCubicTo(2.0f, 0.3f, 3.0f, 1.5f, 5.3f, 0.7f);
                mPath.rCubicTo(3.0f, -1.0f, 4.2f, -2.9f, 6.2f, -4.3f);
                mPath.rCubicTo(1.4f, -1.0f, 3.2f, -1.2f, 4.8f, -1.7f);
                mPath.rLineTo(1.7f, 6.2f);
                mPath.rCubicTo(0.0f, 1.7f, -0.9f, 3.2f, 0.0f, 4.7f);
                mPath.rCubicTo(2.6f, 4.0f, 6.0f, 2.3f, 7.8f, 2.5f);
                mPath.rCubicTo(0.9f, 0.1f, 2.8f, 1.4f, 4.0f, 1.9f);
                mPath.rLineTo(0.5f, -5.3f);
                mPath.rLineTo(2.0f, -5.3f);
                mPath.rLineTo(-4.3f, -15.8f);
                mPath.rLineTo(3.7f, -6.2f);
                mPath.rCubicTo(0.9f, 0.8f, 1.8f, 1.8f, 2.9f, 2.3f);
                mPath.rCubicTo(0.9f, 0.3f, 2.0f, 0.2f, 2.9f, 0.0f);
                mPath.rCubicTo(4.3f, -0.5f, 5.4f, -1.6f, 8.6f, -4.4f);
                mPath.rCubicTo(1.2f, -1.0f, 3.3f, -3.5f, 4.8f, -3.6f);
                mPath.rCubicTo(2.0f, -0.2f, 5.0f, 3.0f, 6.7f, 4.0f);
                mPath.rCubicTo(1.8f, 1.1f, 4.6f, 1.4f, 6.7f, 1.7f);
                mPath.rLineTo(4.8f, -7.2f);
                mPath.rCubicTo(1.1f, 0.8f, 3.8f, 3.4f, 4.8f, 3.6f);
                mPath.rCubicTo(1.6f, 0.4f, 2.6f, -1.4f, 4.2f, -0.7f);
                mPath.rCubicTo(1.9f, 0.8f, 1.7f, 3.0f, 6.3f, 3.8f);
                mPath.rCubicTo(0.2f, -2.7f, 1.0f, -5.0f, 3.8f, -6.0f);
                mPath.rCubicTo(2.2f, -0.8f, 3.8f, 1.4f, 5.8f, 1.3f);
                mPath.rCubicTo(1.5f, 0.0f, 2.4f, -1.3f, 3.8f, -1.8f);
                mPath.rLineTo(3.2f, -0.6f);
                mPath.rCubicTo(1.6f, -0.8f, 1.4f, -3.4f, 2.9f, -5.3f);
                mPath.rCubicTo(2.8f, -3.5f, 5.5f, -5.3f, 9.8f, -6.1f);
                mPath.rCubicTo(1.0f, -0.1f, 2.3f, -0.4f, 3.4f, 0.0f);
                mPath.rCubicTo(1.2f, 0.3f, 2.0f, 1.2f, 2.9f, 2.0f);
                mPath.rCubicTo(1.8f, -1.3f, 3.1f, -2.5f, 4.4f, -4.3f);
                mPath.rCubicTo(0.9f, -1.3f, 1.6f, -2.9f, 3.3f, -3.3f);
                mPath.rCubicTo(1.2f, -0.2f, 2.5f, 0.5f, 3.7f, 0.0f);
                mPath.rCubicTo(2.1f, -1.2f, 4.3f, -7.3f, 4.0f, -9.2f);
                mPath.rCubicTo(-0.2f, -1.1f, -1.0f, -2.0f, -1.9f, -2.7f);
                mPath.rCubicTo(-2.1f, -1.7f, -6.4f, -1.1f, -9.1f, -1.1f);
                mPath.rCubicTo(-2.8f, 0.0f, -10.3f, -0.9f, -12.1f, -3.1f);
                mPath.rCubicTo(-1.3f, -1.6f, -0.4f, -4.1f, -2.4f, -5.2f);
                mPath.rLineTo(-8.5f, -1.9f);
                mPath.rCubicTo(-1.2f, -0.2f, -3.1f, -0.4f, -3.8f, -1.6f);
                mPath.rCubicTo(-0.6f, -0.8f, -0.5f, -2.6f, -0.5f, -3.6f);
                mPath.rCubicTo(0.1f, -4.9f, 3.7f, -7.1f, 3.8f, -12.5f);
                mPath.rCubicTo(0.1f, -3.0f, -0.6f, -6.2f, -2.7f, -8.5f);
                mPath.rCubicTo(-1.8f, -2.0f, -4.5f, -1.4f, -4.3f, -4.5f);
                mPath.rCubicTo(0.1f, -3.2f, 2.6f, -10.0f, 4.1f, -13.0f);
                mPath.rCubicTo(0.9f, -1.8f, 2.8f, -4.3f, 2.3f, -6.2f);
                mPath.rCubicTo(-0.3f, -1.1f, -1.4f, -2.8f, -2.4f, -3.4f);
                mPath.rCubicTo(-1.2f, -0.8f, -8.5f, -2.0f, -9.9f, -1.7f);
                mPath.rCubicTo(-1.8f, 0.4f, -3.1f, 2.0f, -4.8f, 1.6f);
                mPath.rCubicTo(-4.6f, -1.1f, -2.5f, -5.6f, -3.2f, -7.6f);
                mPath.rCubicTo(-0.6f, -1.7f, -2.3f, -2.7f, -2.3f, -4.3f);
                mPath.rCubicTo(-0.1f, -3.5f, 5.6f, -8.0f, 8.8f, -8.4f);
                mPath.rCubicTo(1.2f, -0.1f, 4.1f, 0.9f, 5.8f, 1.2f);
                mPath.rLineTo(1.9f, -3.4f);
                mPath.rCubicTo(2.6f, 1.1f, 7.0f, 4.1f, 9.6f, 4.1f);
                mPath.rCubicTo(1.9f, 0.0f, 3.4f, -1.5f, 4.8f, -2.6f);
                mPath.rCubicTo(1.1f, -0.9f, 2.3f, -1.9f, 3.3f, -3.0f);
                mPath.rCubicTo(5.0f, -5.7f, 0.7f, -9.6f, -2.3f, -14.9f);
                mPath.rCubicTo(-2.4f, 1.7f, -6.5f, 5.9f, -9.6f, 5.9f);
                mPath.rCubicTo(-2.7f, 0.0f, -5.1f, -3.7f, -5.2f, -6.1f);
                mPath.rCubicTo(-0.2f, -1.2f, 0.4f, -2.4f, 0.0f, -3.4f);
                mPath.rCubicTo(-0.3f, -1.2f, -1.8f, -1.9f, -2.5f, -3.1f);
                mPath.rCubicTo(-0.5f, -1.1f, -0.1f, -3.4f, 0.0f, -4.7f);
                mPath.rCubicTo(-5.0f, -1.4f, -2.9f, -1.4f, -8.7f, -1.4f);
                mPath.rCubicTo(-0.3f, 3.8f, -0.9f, 7.8f, -4.4f, 10.2f);
                mPath.rCubicTo(-1.0f, 0.7f, -3.5f, 1.4f, -4.8f, 1.8f);
                mPath.rCubicTo(0.2f, 1.4f, 0.8f, 5.1f, 0.5f, 6.2f);
                mPath.rCubicTo(-0.4f, 1.7f, -3.1f, 3.9f, -4.3f, 5.3f);
                mPath.rCubicTo(-2.4f, 2.6f, -2.8f, 4.1f, -4.1f, 5.7f);
                mPath.rCubicTo(-3.0f, 3.5f, -5.0f, 0.9f, -5.1f, 6.3f);
                mPath.rLineTo(0.0f, 4.3f);
                mPath.rCubicTo(0.2f, 6.3f, 5.5f, 10.7f, 0.0f, 16.7f);
                mPath.rCubicTo(-0.9f, 0.8f, -2.2f, 1.6f, -3.3f, 1.8f);
                mPath.rCubicTo(-3.1f, 0.7f, -3.4f, -2.7f, -6.7f, -1.2f);
                mPath.rCubicTo(-4.3f, 1.9f, -4.5f, 4.3f, -10.1f, 5.1f);
                mPath.rCubicTo(-0.8f, 0.2f, -1.9f, 0.3f, -2.7f, 0.0f);
                mPath.rCubicTo(-3.9f, -1.7f, -5.8f, -8.7f, -11.7f, -11.4f);
                mPath.rCubicTo(0.7f, -1.1f, 2.4f, -3.6f, 2.3f, -4.8f);
                mPath.rCubicTo(-0.2f, -2.9f, -6.1f, -5.6f, -7.5f, -8.2f);
                mPath.rLineTo(-1.3f, -6.2f);
                mPath.rCubicTo(-0.9f, -2.8f, -3.4f, -6.4f, -4.8f, -9.1f);
                mPath.rCubicTo(-0.5f, -1.0f, -1.5f, -3.4f, -2.1f, -4.0f);
                mPath.rCubicTo(-0.9f, -0.9f, -5.9f, -1.0f, -7.7f, -1.6f);
                mPath.rCubicTo(-4.1f, -1.3f, -6.3f, -5.4f, -7.2f, -9.3f);
                mPath.rLineTo(3.4f, -1.9f);
                mPath.rCubicTo(-1.3f, -2.7f, -2.8f, -3.5f, -4.6f, -5.8f);
                mPath.rCubicTo(-2.5f, -3.0f, -3.5f, -5.8f, -7.4f, -7.7f);
                mPath.rCubicTo(-2.9f, 6.7f, -4.8f, 8.2f, -4.8f, 15.8f);
                mPath.cubicTo(532.2f, 718.89996f, 530.2f, 714.1f, 530.1f, 708.39996f);
                mPath.lineTo(530.1f, 708.39996f);
                mPath.close();
                mPath.moveTo(530.1f, 708.39996f);
                break;
            case 33:
                mPath.moveTo(968.0f, 637.3f);
                mPath.rCubicTo(-1.0f, 3.9f, -1.3f, 4.4f, -5.5f, 4.8f);
                mPath.rLineTo(2.3f, 4.3f);
                mPath.rCubicTo(0.9f, 3.2f, -6.8f, 5.3f, -9.1f, 5.8f);
                mPath.rCubicTo(0.5f, 1.6f, 1.8f, 5.1f, 1.6f, 6.7f);
                mPath.rCubicTo(-0.4f, 4.2f, -4.4f, 10.1f, -7.3f, 13.0f);
                mPath.rLineTo(-4.8f, 4.5f);
                mPath.rCubicTo(-0.7f, 1.1f, -1.6f, 5.6f, -1.7f, 7.0f);
                mPath.rCubicTo(-0.4f, 3.9f, 2.8f, 2.5f, 5.7f, 6.3f);
                mPath.rCubicTo(2.5f, 3.2f, 3.4f, 8.9f, 3.7f, 12.9f);
                mPath.rCubicTo(6.7f, 0.0f, 4.1f, 0.0f, 9.6f, 2.9f);
                mPath.rLineTo(-0.7f, 5.8f);
                mPath.rLineTo(2.7f, 4.3f);
                mPath.rLineTo(1.3f, 4.8f);
                mPath.rCubicTo(1.7f, 0.3f, 6.3f, 1.5f, 7.7f, 1.4f);
                mPath.rCubicTo(3.3f, -0.3f, 6.3f, -4.4f, 7.7f, -7.1f);
                mPath.rCubicTo(1.2f, 2.1f, 4.2f, 9.2f, 7.2f, 8.5f);
                mPath.rCubicTo(1.1f, -0.3f, 5.3f, -4.4f, 7.6f, -3.8f);
                mPath.rCubicTo(1.2f, 0.3f, 4.4f, 4.3f, 5.8f, 5.4f);
                mPath.rCubicTo(0.9f, -2.0f, 3.2f, -5.7f, 2.8f, -7.7f);
                mPath.rCubicTo(-0.1f, -0.8f, -0.7f, -1.8f, -0.7f, -2.9f);
                mPath.rCubicTo(0.0f, -1.2f, 1.0f, -3.0f, 1.3f, -4.3f);
                mPath.rLineTo(0.7f, -4.3f);
                mPath.rCubicTo(0.8f, -2.7f, 3.0f, -3.0f, 3.8f, -4.9f);
                mPath.rCubicTo(0.7f, -1.6f, -0.6f, -7.4f, 3.5f, -7.3f);
                mPath.rCubicTo(1.1f, 0.0f, 3.3f, 2.7f, 4.5f, 3.6f);
                mPath.rCubicTo(1.0f, -3.6f, 1.7f, -3.9f, 4.8f, -5.8f);
                mPath.rLineTo(-2.9f, -7.7f);
                mPath.rCubicTo(-0.2f, -2.0f, 0.9f, -2.8f, 1.0f, -4.8f);
                mPath.rCubicTo(0.2f, -3.7f, -2.0f, -5.8f, -4.4f, -8.2f);
                mPath.rLineTo(4.8f, 0.0f);
                mPath.rLineTo(0.5f, -4.3f);
                mPath.rLineTo(1.9f, 2.9f);
                mPath.rCubicTo(4.6f, -2.3f, 2.2f, -6.4f, 0.0f, -9.6f);
                mPath.rLineTo(-2.7f, 2.7f);
                mPath.rLineTo(-4.5f, -0.3f);
                mPath.rLineTo(3.2f, -2.2f);
                mPath.rLineTo(4.5f, -7.9f);
                mPath.rCubicTo(-2.6f, -0.1f, -6.0f, -0.4f, -8.2f, -2.1f);
                mPath.rCubicTo(-2.2f, -1.7f, -4.3f, -5.1f, -7.2f, -5.5f);
                mPath.rCubicTo(-3.8f, -0.6f, -5.7f, 2.2f, -8.6f, 3.9f);
                mPath.rCubicTo(-2.0f, 1.2f, -3.5f, 1.4f, -5.8f, 1.8f);
                mPath.rLineTo(1.4f, -5.8f);
                mPath.rLineTo(9.2f, -10.6f);
                mPath.rCubicTo(-1.5f, -0.6f, -3.0f, -1.3f, -4.3f, -2.2f);
                mPath.rCubicTo(-1.1f, -0.8f, -2.7f, -2.5f, -3.8f, -3.0f);
                mPath.rCubicTo(-2.1f, -0.8f, -4.8f, 1.1f, -5.9f, 2.8f);
                mPath.rCubicTo(-0.6f, 1.0f, -0.9f, 1.7f, -1.3f, 2.9f);
                mPath.rLineTo(-9.1f, -2.9f);
                mPath.rCubicTo(-3.3f, -1.7f, -3.3f, -4.8f, -7.7f, -3.7f);
                mPath.rCubicTo(-0.7f, 0.2f, -2.2f, 0.6f, -2.7f, 1.0f);
                mPath.rCubicTo(-1.5f, 1.1f, -1.0f, 3.5f, -1.2f, 5.1f);
                mPath.cubicTo(968.69995f, 634.89996f, 968.4f, 636.0f, 968.0f, 637.3f);
                mPath.lineTo(968.0f, 637.3f);
                mPath.close();
                mPath.moveTo(968.0f, 637.3f);
                break;
        }
    }

}